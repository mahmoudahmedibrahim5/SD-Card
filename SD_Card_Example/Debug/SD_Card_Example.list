
SD_Card_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005124  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005384  08005384  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800538c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001760  20000088  08005414  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017e8  08005414  000217e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df9a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002141  00000000  00000000  0002e052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170d4  00000000  00000000  00031870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114e3  00000000  00000000  00048944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087917  00000000  00000000  00059e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e173e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000e1790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052ac 	.word	0x080052ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080052ac 	.word	0x080052ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_15

/* SPI Chip Select */
static void SELECT(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000baa:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <SELECT+0x14>)
 8000bac:	f001 fb1c 	bl	80021e8 <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc2:	4802      	ldr	r0, [pc, #8]	; (8000bcc <DESELECT+0x14>)
 8000bc4:	f001 fb10 	bl	80021e8 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000bda:	bf00      	nop
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <SPI_TxByte+0x30>)
 8000bde:	f002 fb03 	bl	80031e8 <HAL_SPI_GetState>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d1f9      	bne.n	8000bdc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000be8:	1df9      	adds	r1, r7, #7
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <SPI_TxByte+0x30>)
 8000bf2:	f002 f81b 	bl	8002c2c <HAL_SPI_Transmit>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000a8 	.word	0x200000a8

08000c04 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c0a:	23ff      	movs	r3, #255	; 0xff
 8000c0c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000c12:	bf00      	nop
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <SPI_RxByte+0x38>)
 8000c16:	f002 fae7 	bl	80031e8 <HAL_SPI_GetState>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d1f9      	bne.n	8000c14 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000c20:	1dba      	adds	r2, r7, #6
 8000c22:	1df9      	adds	r1, r7, #7
 8000c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <SPI_RxByte+0x38>)
 8000c2e:	f002 f939 	bl	8002ea4 <HAL_SPI_TransmitReceive>

  return data;
 8000c32:	79bb      	ldrb	r3, [r7, #6]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000a8 	.word	0x200000a8

08000c40 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c48:	f7ff ffdc 	bl	8000c04 <SPI_RxByte>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	701a      	strb	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <SD_ReadyWait+0x34>)
 8000c64:	2232      	movs	r2, #50	; 0x32
 8000c66:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000c68:	f7ff ffcc 	bl	8000c04 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000c6c:	f7ff ffca 	bl	8000c04 <SPI_RxByte>
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2bff      	cmp	r3, #255	; 0xff
 8000c78:	d004      	beq.n	8000c84 <SD_ReadyWait+0x28>
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SD_ReadyWait+0x34>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f3      	bne.n	8000c6c <SD_ReadyWait+0x10>

  return res;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20001592 	.word	0x20001592

08000c94 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c9e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000ca0:	f7ff ff8a 	bl	8000bb8 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	e005      	b.n	8000cb6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000caa:	20ff      	movs	r0, #255	; 0xff
 8000cac:	f7ff ff90 	bl	8000bd0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	ddf6      	ble.n	8000caa <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000cbc:	f7ff ff70 	bl	8000ba0 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000cd4:	2395      	movs	r3, #149	; 0x95
 8000cd6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e009      	b.n	8000cf2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cde:	1d3a      	adds	r2, r7, #4
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff72 	bl	8000bd0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b05      	cmp	r3, #5
 8000cf6:	ddf2      	ble.n	8000cde <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000cf8:	e002      	b.n	8000d00 <SD_PowerOn+0x6c>
  {
    Count--;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000d00:	f7ff ff80 	bl	8000c04 <SPI_RxByte>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d002      	beq.n	8000d10 <SD_PowerOn+0x7c>
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f4      	bne.n	8000cfa <SD_PowerOn+0x66>
  }

  DESELECT();
 8000d10:	f7ff ff52 	bl	8000bb8 <DESELECT>
  SPI_TxByte(0XFF);
 8000d14:	20ff      	movs	r0, #255	; 0xff
 8000d16:	f7ff ff5b 	bl	8000bd0 <SPI_TxByte>

  PowerFlag = 1;
 8000d1a:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <SD_PowerOn+0x94>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200000a5 	.word	0x200000a5

08000d2c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <SD_PowerOff+0x14>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	200000a5 	.word	0x200000a5

08000d44 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <SD_CheckPower+0x14>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000a5 	.word	0x200000a5

08000d5c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <SD_RxDataBlock+0x68>)
 8000d68:	220a      	movs	r2, #10
 8000d6a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000d6c:	f7ff ff4a 	bl	8000c04 <SPI_RxByte>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d104      	bne.n	8000d84 <SD_RxDataBlock+0x28>
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <SD_RxDataBlock+0x68>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f3      	bne.n	8000d6c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2bfe      	cmp	r3, #254	; 0xfe
 8000d88:	d001      	beq.n	8000d8e <SD_RxDataBlock+0x32>
    return FALSE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e016      	b.n	8000dbc <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff53 	bl	8000c40 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff4d 	bl	8000c40 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	3b02      	subs	r3, #2
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1ed      	bne.n	8000d8e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000db2:	f7ff ff27 	bl	8000c04 <SPI_RxByte>
  SPI_RxByte();
 8000db6:	f7ff ff25 	bl	8000c04 <SPI_RxByte>

  return TRUE;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20001591 	.word	0x20001591

08000dc8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000dd8:	f7ff ff40 	bl	8000c5c <SD_ReadyWait>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2bff      	cmp	r3, #255	; 0xff
 8000de0:	d001      	beq.n	8000de6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e040      	b.n	8000e68 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fef1 	bl	8000bd0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	2bfd      	cmp	r3, #253	; 0xfd
 8000df2:	d031      	beq.n	8000e58 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fee5 	bl	8000bd0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fede 	bl	8000bd0 <SPI_TxByte>
    } while (--wc);
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	73bb      	strb	r3, [r7, #14]
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1eb      	bne.n	8000df8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000e20:	f7ff fef0 	bl	8000c04 <SPI_RxByte>
    SPI_RxByte();
 8000e24:	f7ff feee 	bl	8000c04 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000e28:	e00b      	b.n	8000e42 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000e2a:	f7ff feeb 	bl	8000c04 <SPI_RxByte>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d006      	beq.n	8000e4a <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e3c:	7b7b      	ldrb	r3, [r7, #13]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	2b40      	cmp	r3, #64	; 0x40
 8000e46:	d9f0      	bls.n	8000e2a <SD_TxDataBlock+0x62>
 8000e48:	e000      	b.n	8000e4c <SD_TxDataBlock+0x84>
        break;
 8000e4a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e4c:	bf00      	nop
 8000e4e:	f7ff fed9 	bl	8000c04 <SPI_RxByte>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0fa      	beq.n	8000e4e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	d101      	bne.n	8000e66 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e7c:	f7ff feee 	bl	8000c5c <SD_ReadyWait>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d001      	beq.n	8000e8a <SD_SendCmd+0x1a>
    return 0xFF;
 8000e86:	23ff      	movs	r3, #255	; 0xff
 8000e88:	e040      	b.n	8000f0c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe9f 	bl	8000bd0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	0e1b      	lsrs	r3, r3, #24
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe99 	bl	8000bd0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	0c1b      	lsrs	r3, r3, #16
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe93 	bl	8000bd0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fe8d 	bl	8000bd0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe88 	bl	8000bd0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b40      	cmp	r3, #64	; 0x40
 8000ec8:	d101      	bne.n	8000ece <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000eca:	2395      	movs	r3, #149	; 0x95
 8000ecc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b48      	cmp	r3, #72	; 0x48
 8000ed2:	d101      	bne.n	8000ed8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ed4:	2387      	movs	r3, #135	; 0x87
 8000ed6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe78 	bl	8000bd0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b4c      	cmp	r3, #76	; 0x4c
 8000ee4:	d101      	bne.n	8000eea <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000ee6:	f7ff fe8d 	bl	8000c04 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000eea:	230a      	movs	r3, #10
 8000eec:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000eee:	f7ff fe89 	bl	8000c04 <SPI_RxByte>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ef6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	da05      	bge.n	8000f0a <SD_SendCmd+0x9a>
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	73bb      	strb	r3, [r7, #14]
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f1      	bne.n	8000eee <SD_SendCmd+0x7e>

  return res;
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0d5      	b.n	80010d4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f28:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <SD_disk_initialize+0x1c8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <SD_disk_initialize+0x2a>
    return Stat;
 8000f36:	4b69      	ldr	r3, [pc, #420]	; (80010dc <SD_disk_initialize+0x1c8>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	e0ca      	b.n	80010d4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000f3e:	f7ff fea9 	bl	8000c94 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000f42:	f7ff fe2d 	bl	8000ba0 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2040      	movs	r0, #64	; 0x40
 8000f4e:	f7ff ff8f 	bl	8000e70 <SD_SendCmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 80a5 	bne.w	80010a4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f5a:	4b61      	ldr	r3, [pc, #388]	; (80010e0 <SD_disk_initialize+0x1cc>)
 8000f5c:	2264      	movs	r2, #100	; 0x64
 8000f5e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f64:	2048      	movs	r0, #72	; 0x48
 8000f66:	f7ff ff83 	bl	8000e70 <SD_SendCmd>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d158      	bne.n	8001022 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e00c      	b.n	8000f90 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f76:	7bfc      	ldrb	r4, [r7, #15]
 8000f78:	f7ff fe44 	bl	8000c04 <SPI_RxByte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f104 0310 	add.w	r3, r4, #16
 8000f84:	443b      	add	r3, r7
 8000f86:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d9ef      	bls.n	8000f76 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	f040 8083 	bne.w	80010a4 <SD_disk_initialize+0x190>
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	2baa      	cmp	r3, #170	; 0xaa
 8000fa2:	d17f      	bne.n	80010a4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2077      	movs	r0, #119	; 0x77
 8000fa8:	f7ff ff62 	bl	8000e70 <SD_SendCmd>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d807      	bhi.n	8000fc2 <SD_disk_initialize+0xae>
 8000fb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fb6:	2069      	movs	r0, #105	; 0x69
 8000fb8:	f7ff ff5a 	bl	8000e70 <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <SD_disk_initialize+0x1cc>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1eb      	bne.n	8000fa4 <SD_disk_initialize+0x90>
 8000fcc:	e000      	b.n	8000fd0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000fce:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <SD_disk_initialize+0x1cc>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d064      	beq.n	80010a4 <SD_disk_initialize+0x190>
 8000fda:	2100      	movs	r1, #0
 8000fdc:	207a      	movs	r0, #122	; 0x7a
 8000fde:	f7ff ff47 	bl	8000e70 <SD_SendCmd>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d15d      	bne.n	80010a4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e00c      	b.n	8001008 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000fee:	7bfc      	ldrb	r4, [r7, #15]
 8000ff0:	f7ff fe08 	bl	8000c04 <SPI_RxByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f104 0310 	add.w	r3, r4, #16
 8000ffc:	443b      	add	r3, r7
 8000ffe:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	3301      	adds	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d9ef      	bls.n	8000fee <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800100e:	7a3b      	ldrb	r3, [r7, #8]
 8001010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SD_disk_initialize+0x108>
 8001018:	2306      	movs	r3, #6
 800101a:	e000      	b.n	800101e <SD_disk_initialize+0x10a>
 800101c:	2302      	movs	r3, #2
 800101e:	73bb      	strb	r3, [r7, #14]
 8001020:	e040      	b.n	80010a4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001022:	2100      	movs	r1, #0
 8001024:	2077      	movs	r0, #119	; 0x77
 8001026:	f7ff ff23 	bl	8000e70 <SD_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d808      	bhi.n	8001042 <SD_disk_initialize+0x12e>
 8001030:	2100      	movs	r1, #0
 8001032:	2069      	movs	r0, #105	; 0x69
 8001034:	f7ff ff1c 	bl	8000e70 <SD_SendCmd>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d801      	bhi.n	8001042 <SD_disk_initialize+0x12e>
 800103e:	2302      	movs	r3, #2
 8001040:	e000      	b.n	8001044 <SD_disk_initialize+0x130>
 8001042:	2301      	movs	r3, #1
 8001044:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d10e      	bne.n	800106a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800104c:	2100      	movs	r1, #0
 800104e:	2077      	movs	r0, #119	; 0x77
 8001050:	f7ff ff0e 	bl	8000e70 <SD_SendCmd>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d80e      	bhi.n	8001078 <SD_disk_initialize+0x164>
 800105a:	2100      	movs	r1, #0
 800105c:	2069      	movs	r0, #105	; 0x69
 800105e:	f7ff ff07 	bl	8000e70 <SD_SendCmd>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d107      	bne.n	8001078 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001068:	e00d      	b.n	8001086 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800106a:	2100      	movs	r1, #0
 800106c:	2041      	movs	r0, #65	; 0x41
 800106e:	f7ff feff 	bl	8000e70 <SD_SendCmd>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <SD_disk_initialize+0x1cc>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1e1      	bne.n	8001046 <SD_disk_initialize+0x132>
 8001082:	e000      	b.n	8001086 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001084:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <SD_disk_initialize+0x1cc>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <SD_disk_initialize+0x18c>
 8001090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001094:	2050      	movs	r0, #80	; 0x50
 8001096:	f7ff feeb 	bl	8000e70 <SD_SendCmd>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80010a4:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <SD_disk_initialize+0x1d0>)
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80010aa:	f7ff fd85 	bl	8000bb8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80010ae:	f7ff fda9 	bl	8000c04 <SPI_RxByte>

  if (type)
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <SD_disk_initialize+0x1c8>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f023 0301 	bic.w	r3, r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SD_disk_initialize+0x1c8>)
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e001      	b.n	80010ce <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010ca:	f7ff fe2f 	bl	8000d2c <SD_PowerOff>
  }

  return Stat;
 80010ce:	4b03      	ldr	r3, [pc, #12]	; (80010dc <SD_disk_initialize+0x1c8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20001591 	.word	0x20001591
 80010e4:	200000a4 	.word	0x200000a4

080010e8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SD_disk_status+0x14>
    return STA_NOINIT;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e002      	b.n	8001102 <SD_disk_status+0x1a>

  return Stat;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SD_disk_status+0x28>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <SD_disk_read+0x1c>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <SD_disk_read+0x20>
    return RES_PARERR;
 8001130:	2304      	movs	r3, #4
 8001132:	e051      	b.n	80011d8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <SD_disk_read+0xcc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001142:	2303      	movs	r3, #3
 8001144:	e048      	b.n	80011d8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <SD_disk_read+0xd0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	607b      	str	r3, [r7, #4]

  SELECT();
 8001158:	f7ff fd22 	bl	8000ba0 <SELECT>

  if (count == 1)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d111      	bne.n	8001186 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	2051      	movs	r0, #81	; 0x51
 8001166:	f7ff fe83 	bl	8000e70 <SD_SendCmd>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d129      	bne.n	80011c4 <SD_disk_read+0xb0>
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	68b8      	ldr	r0, [r7, #8]
 8001176:	f7ff fdf1 	bl	8000d5c <SD_RxDataBlock>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <SD_disk_read+0xb0>
      count = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	e01e      	b.n	80011c4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	2052      	movs	r0, #82	; 0x52
 800118a:	f7ff fe71 	bl	8000e70 <SD_SendCmd>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d117      	bne.n	80011c4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f7ff fddf 	bl	8000d5c <SD_RxDataBlock>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00a      	beq.n	80011ba <SD_disk_read+0xa6>
          break;

        buff += 512;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011aa:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ed      	bne.n	8001194 <SD_disk_read+0x80>
 80011b8:	e000      	b.n	80011bc <SD_disk_read+0xa8>
          break;
 80011ba:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80011bc:	2100      	movs	r1, #0
 80011be:	204c      	movs	r0, #76	; 0x4c
 80011c0:	f7ff fe56 	bl	8000e70 <SD_SendCmd>
    }
  }

  DESELECT();
 80011c4:	f7ff fcf8 	bl	8000bb8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80011c8:	f7ff fd1c 	bl	8000c04 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	200000a4 	.word	0x200000a4

080011e8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <SD_disk_write+0x1c>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <SD_disk_write+0x20>
    return RES_PARERR;
 8001204:	2304      	movs	r3, #4
 8001206:	e06b      	b.n	80012e0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001208:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <SD_disk_write+0x100>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001216:	2303      	movs	r3, #3
 8001218:	e062      	b.n	80012e0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <SD_disk_write+0x100>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001228:	2302      	movs	r3, #2
 800122a:	e059      	b.n	80012e0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <SD_disk_write+0x104>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	607b      	str	r3, [r7, #4]

  SELECT();
 800123e:	f7ff fcaf 	bl	8000ba0 <SELECT>

  if (count == 1)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d110      	bne.n	800126a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	2058      	movs	r0, #88	; 0x58
 800124c:	f7ff fe10 	bl	8000e70 <SD_SendCmd>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d13a      	bne.n	80012cc <SD_disk_write+0xe4>
 8001256:	21fe      	movs	r1, #254	; 0xfe
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f7ff fdb5 	bl	8000dc8 <SD_TxDataBlock>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d033      	beq.n	80012cc <SD_disk_write+0xe4>
      count = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	e030      	b.n	80012cc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <SD_disk_write+0x104>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001276:	2100      	movs	r1, #0
 8001278:	2077      	movs	r0, #119	; 0x77
 800127a:	f7ff fdf9 	bl	8000e70 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	2057      	movs	r0, #87	; 0x57
 8001282:	f7ff fdf5 	bl	8000e70 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	2059      	movs	r0, #89	; 0x59
 800128a:	f7ff fdf1 	bl	8000e70 <SD_SendCmd>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11b      	bne.n	80012cc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001294:	21fc      	movs	r1, #252	; 0xfc
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff fd96 	bl	8000dc8 <SD_TxDataBlock>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00a      	beq.n	80012b8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012a8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ee      	bne.n	8001294 <SD_disk_write+0xac>
 80012b6:	e000      	b.n	80012ba <SD_disk_write+0xd2>
          break;
 80012b8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80012ba:	21fd      	movs	r1, #253	; 0xfd
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fd83 	bl	8000dc8 <SD_TxDataBlock>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <SD_disk_write+0xe4>
      {
        count = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80012cc:	f7ff fc74 	bl	8000bb8 <DESELECT>
  SPI_RxByte();
 80012d0:	f7ff fc98 	bl	8000c04 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	200000a4 	.word	0x200000a4

080012f0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b08b      	sub	sp, #44	; 0x2c
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	603a      	str	r2, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	460b      	mov	r3, r1
 80012fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800130a:	2304      	movs	r3, #4
 800130c:	e11b      	b.n	8001546 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2b05      	cmp	r3, #5
 8001318:	d129      	bne.n	800136e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d017      	beq.n	8001352 <SD_disk_ioctl+0x62>
 8001322:	2b02      	cmp	r3, #2
 8001324:	dc1f      	bgt.n	8001366 <SD_disk_ioctl+0x76>
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <SD_disk_ioctl+0x40>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d00b      	beq.n	8001346 <SD_disk_ioctl+0x56>
 800132e:	e01a      	b.n	8001366 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001330:	f7ff fd08 	bl	8000d44 <SD_CheckPower>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800133a:	f7ff fcf7 	bl	8000d2c <SD_PowerOff>
      res = RES_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001344:	e0fd      	b.n	8001542 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001346:	f7ff fca5 	bl	8000c94 <SD_PowerOn>
      res = RES_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001350:	e0f7      	b.n	8001542 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	1c5c      	adds	r4, r3, #1
 8001356:	f7ff fcf5 	bl	8000d44 <SD_CheckPower>
 800135a:	4603      	mov	r3, r0
 800135c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800135e:	2300      	movs	r3, #0
 8001360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001364:	e0ed      	b.n	8001542 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001366:	2304      	movs	r3, #4
 8001368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800136c:	e0e9      	b.n	8001542 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <SD_disk_ioctl+0x260>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800137c:	2303      	movs	r3, #3
 800137e:	e0e2      	b.n	8001546 <SD_disk_ioctl+0x256>

    SELECT();
 8001380:	f7ff fc0e 	bl	8000ba0 <SELECT>

    switch (ctrl)
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	2b0d      	cmp	r3, #13
 8001388:	f200 80cc 	bhi.w	8001524 <SD_disk_ioctl+0x234>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <SD_disk_ioctl+0xa4>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	0800148f 	.word	0x0800148f
 8001398:	080013cd 	.word	0x080013cd
 800139c:	0800147f 	.word	0x0800147f
 80013a0:	08001525 	.word	0x08001525
 80013a4:	08001525 	.word	0x08001525
 80013a8:	08001525 	.word	0x08001525
 80013ac:	08001525 	.word	0x08001525
 80013b0:	08001525 	.word	0x08001525
 80013b4:	08001525 	.word	0x08001525
 80013b8:	08001525 	.word	0x08001525
 80013bc:	08001525 	.word	0x08001525
 80013c0:	080014a1 	.word	0x080014a1
 80013c4:	080014c5 	.word	0x080014c5
 80013c8:	080014e9 	.word	0x080014e9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013cc:	2100      	movs	r1, #0
 80013ce:	2049      	movs	r0, #73	; 0x49
 80013d0:	f7ff fd4e 	bl	8000e70 <SD_SendCmd>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80a8 	bne.w	800152c <SD_disk_ioctl+0x23c>
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2110      	movs	r1, #16
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fcba 	bl	8000d5c <SD_RxDataBlock>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 809e 	beq.w	800152c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80013f0:	7b3b      	ldrb	r3, [r7, #12]
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d10e      	bne.n	8001418 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013fa:	7d7b      	ldrb	r3, [r7, #21]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	7d3b      	ldrb	r3, [r7, #20]
 8001400:	b29b      	uxth	r3, r3
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b29b      	uxth	r3, r3
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	3301      	adds	r3, #1
 800140c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800140e:	8bfb      	ldrh	r3, [r7, #30]
 8001410:	029a      	lsls	r2, r3, #10
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e02e      	b.n	8001476 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001418:	7c7b      	ldrb	r3, [r7, #17]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	b2da      	uxtb	r2, r3
 8001420:	7dbb      	ldrb	r3, [r7, #22]
 8001422:	09db      	lsrs	r3, r3, #7
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7d7b      	ldrb	r3, [r7, #21]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 0306 	and.w	r3, r3, #6
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4413      	add	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3302      	adds	r3, #2
 800143c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001440:	7d3b      	ldrb	r3, [r7, #20]
 8001442:	099b      	lsrs	r3, r3, #6
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	b29b      	uxth	r3, r3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b29a      	uxth	r2, r3
 8001454:	7cbb      	ldrb	r3, [r7, #18]
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	b29b      	uxth	r3, r3
 800145a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	3301      	adds	r3, #1
 8001466:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001468:	8bfa      	ldrh	r2, [r7, #30]
 800146a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800146e:	3b09      	subs	r3, #9
 8001470:	409a      	lsls	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800147c:	e056      	b.n	800152c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800148c:	e055      	b.n	800153a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800148e:	f7ff fbe5 	bl	8000c5c <SD_ReadyWait>
 8001492:	4603      	mov	r3, r0
 8001494:	2bff      	cmp	r3, #255	; 0xff
 8001496:	d14b      	bne.n	8001530 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800149e:	e047      	b.n	8001530 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014a0:	2100      	movs	r1, #0
 80014a2:	2049      	movs	r0, #73	; 0x49
 80014a4:	f7ff fce4 	bl	8000e70 <SD_SendCmd>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d142      	bne.n	8001534 <SD_disk_ioctl+0x244>
 80014ae:	2110      	movs	r1, #16
 80014b0:	6a38      	ldr	r0, [r7, #32]
 80014b2:	f7ff fc53 	bl	8000d5c <SD_RxDataBlock>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03b      	beq.n	8001534 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014c2:	e037      	b.n	8001534 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014c4:	2100      	movs	r1, #0
 80014c6:	204a      	movs	r0, #74	; 0x4a
 80014c8:	f7ff fcd2 	bl	8000e70 <SD_SendCmd>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d132      	bne.n	8001538 <SD_disk_ioctl+0x248>
 80014d2:	2110      	movs	r1, #16
 80014d4:	6a38      	ldr	r0, [r7, #32]
 80014d6:	f7ff fc41 	bl	8000d5c <SD_RxDataBlock>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d02b      	beq.n	8001538 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014e6:	e027      	b.n	8001538 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014e8:	2100      	movs	r1, #0
 80014ea:	207a      	movs	r0, #122	; 0x7a
 80014ec:	f7ff fcc0 	bl	8000e70 <SD_SendCmd>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014fc:	e00b      	b.n	8001516 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80014fe:	6a3c      	ldr	r4, [r7, #32]
 8001500:	1c63      	adds	r3, r4, #1
 8001502:	623b      	str	r3, [r7, #32]
 8001504:	f7ff fb7e 	bl	8000c04 <SPI_RxByte>
 8001508:	4603      	mov	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800150c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001510:	3301      	adds	r3, #1
 8001512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800151a:	2b03      	cmp	r3, #3
 800151c:	d9ef      	bls.n	80014fe <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001524:	2304      	movs	r3, #4
 8001526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800152a:	e006      	b.n	800153a <SD_disk_ioctl+0x24a>
      break;
 800152c:	bf00      	nop
 800152e:	e004      	b.n	800153a <SD_disk_ioctl+0x24a>
      break;
 8001530:	bf00      	nop
 8001532:	e002      	b.n	800153a <SD_disk_ioctl+0x24a>
      break;
 8001534:	bf00      	nop
 8001536:	e000      	b.n	800153a <SD_disk_ioctl+0x24a>
      break;
 8001538:	bf00      	nop
    }

    DESELECT();
 800153a:	f7ff fb3d 	bl	8000bb8 <DESELECT>
    SPI_RxByte();
 800153e:	f7ff fb61 	bl	8000c04 <SPI_RxByte>
  }

  return res;
 8001542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001546:	4618      	mov	r0, r3
 8001548:	372c      	adds	r7, #44	; 0x2c
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000

08001554 <send_uart>:
uint32_t total, free_space;


/* Function for sending Uart Data */
void send_uart(char* string)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7fe fe3f 	bl	80001e0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, len, 2000);
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	b29a      	uxth	r2, r3
 800156a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <send_uart+0x2c>)
 8001572:	f001 ff5e 	bl	8003432 <HAL_UART_Transmit>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000100 	.word	0x20000100

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f000 fb2e 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f886 	bl	800169c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f000 f944 	bl	800181c <MX_GPIO_Init>
  MX_SPI3_Init();
 8001594:	f000 f8e2 	bl	800175c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001598:	f000 f916 	bl	80017c8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800159c:	f002 fabe 	bl	8003b1c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  res = f_mount(&fs, "", 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	4931      	ldr	r1, [pc, #196]	; (8001668 <main+0xe4>)
 80015a4:	4831      	ldr	r0, [pc, #196]	; (800166c <main+0xe8>)
 80015a6:	f003 f889 	bl	80046bc <f_mount>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <main+0xec>)
 80015b0:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <main+0xec>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <main+0x3e>
	  send_uart("error in mounting SD Card \n");
 80015ba:	482e      	ldr	r0, [pc, #184]	; (8001674 <main+0xf0>)
 80015bc:	f7ff ffca 	bl	8001554 <send_uart>
 80015c0:	e002      	b.n	80015c8 <main+0x44>
  else
	  send_uart("SD Card mounted successfully \n");
 80015c2:	482d      	ldr	r0, [pc, #180]	; (8001678 <main+0xf4>)
 80015c4:	f7ff ffc6 	bl	8001554 <send_uart>

  f_getfree("", &fre_clust, &pfs);
 80015c8:	4a2c      	ldr	r2, [pc, #176]	; (800167c <main+0xf8>)
 80015ca:	492d      	ldr	r1, [pc, #180]	; (8001680 <main+0xfc>)
 80015cc:	4826      	ldr	r0, [pc, #152]	; (8001668 <main+0xe4>)
 80015ce:	f003 f8bb 	bl	8004748 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <main+0xf8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	3b02      	subs	r3, #2
 80015da:	4a28      	ldr	r2, [pc, #160]	; (800167c <main+0xf8>)
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	8952      	ldrh	r2, [r2, #10]
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f8bf 	bl	8000768 <__aeabi_ui2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <main+0x100>)
 80015f0:	f7fe fe4e 	bl	8000290 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff f92e 	bl	800085c <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a21      	ldr	r2, [pc, #132]	; (8001688 <main+0x104>)
 8001604:	6013      	str	r3, [r2, #0]
  total /= (1024 * 1024 * 8);
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <main+0x104>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0ddb      	lsrs	r3, r3, #23
 800160c:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <main+0x104>)
 800160e:	6013      	str	r3, [r2, #0]
  //sprintf(buffer, "SD CARD Total Size: \t %lu\n", total);
  //send_uart(buffer);
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <main+0xf8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <main+0xfc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f8a1 	bl	8000768 <__aeabi_ui2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <main+0x100>)
 800162c:	f7fe fe30 	bl	8000290 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff f910 	bl	800085c <__aeabi_d2uiz>
 800163c:	4603      	mov	r3, r0
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <main+0x108>)
 8001640:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD CARD Total Size: \t %lu\n", free_space);
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <main+0x108>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	4911      	ldr	r1, [pc, #68]	; (8001690 <main+0x10c>)
 800164a:	4812      	ldr	r0, [pc, #72]	; (8001694 <main+0x110>)
 800164c:	f003 f9c0 	bl	80049d0 <siprintf>
  send_uart(buffer);
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <main+0x110>)
 8001652:	f7ff ff7f 	bl	8001554 <send_uart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	send_uart("Hello World\n");
 8001656:	4810      	ldr	r0, [pc, #64]	; (8001698 <main+0x114>)
 8001658:	f7ff ff7c 	bl	8001554 <send_uart>
	HAL_Delay(1000);
 800165c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001660:	f000 fb34 	bl	8001ccc <HAL_Delay>
	send_uart("Hello World\n");
 8001664:	e7f7      	b.n	8001656 <main+0xd2>
 8001666:	bf00      	nop
 8001668:	080052c4 	.word	0x080052c4
 800166c:	20000144 	.word	0x20000144
 8001670:	2000117c 	.word	0x2000117c
 8001674:	080052c8 	.word	0x080052c8
 8001678:	080052e4 	.word	0x080052e4
 800167c:	20001580 	.word	0x20001580
 8001680:	20001584 	.word	0x20001584
 8001684:	3fe00000 	.word	0x3fe00000
 8001688:	20001588 	.word	0x20001588
 800168c:	2000158c 	.word	0x2000158c
 8001690:	08005304 	.word	0x08005304
 8001694:	20001180 	.word	0x20001180
 8001698:	08005320 	.word	0x08005320

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	; 0x50
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	2230      	movs	r2, #48	; 0x30
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 f988 	bl	80049c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <SystemClock_Config+0xb8>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <SystemClock_Config+0xb8>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <SystemClock_Config+0xb8>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <SystemClock_Config+0xbc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <SystemClock_Config+0xbc>)
 80016ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <SystemClock_Config+0xbc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fd84 	bl	800221c <HAL_RCC_OscConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800171a:	f000 f8d1 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171e:	230f      	movs	r3, #15
 8001720:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001722:	2301      	movs	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f000 ffe7 	bl	800270c <HAL_RCC_ClockConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001744:	f000 f8bc 	bl	80018c0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001748:	f001 f8c6 	bl	80028d8 <HAL_RCC_EnableCSS>
}
 800174c:	bf00      	nop
 800174e:	3750      	adds	r7, #80	; 0x50
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000

0800175c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <MX_SPI3_Init+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800176c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_SPI3_Init+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_SPI3_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_SPI3_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MX_SPI3_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_SPI3_Init+0x64>)
 80017a8:	220a      	movs	r2, #10
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_SPI3_Init+0x64>)
 80017ae:	f001 f9b4 	bl	8002b1a <HAL_SPI_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80017b8:	f000 f882 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200000a8 	.word	0x200000a8
 80017c4:	40003c00 	.word	0x40003c00

080017c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <MX_USART1_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_USART1_UART_Init+0x4c>)
 8001800:	f001 fdca 	bl	8003398 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f000 f859 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000100 	.word	0x20000100
 8001818:	40011000 	.word	0x40011000

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_GPIO_Init+0x9c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <MX_GPIO_Init+0x9c>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_GPIO_Init+0x9c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_GPIO_Init+0x9c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <MX_GPIO_Init+0x9c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_GPIO_Init+0x9c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_GPIO_Init+0x9c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <MX_GPIO_Init+0x9c>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_GPIO_Init+0x9c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <MX_GPIO_Init+0xa0>)
 800188e:	f000 fcab 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_GPIO_Init+0xa0>)
 80018ac:	f000 fb18 	bl	8001ee0 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>
	...

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_SPI_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001976:	2338      	movs	r3, #56	; 0x38
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001986:	2306      	movs	r3, #6
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_SPI_MspInit+0x8c>)
 8001992:	f000 faa5 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40003c00 	.word	0x40003c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_UART_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12c      	bne.n	8001a28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_UART_MspInit+0x8c>)
 8001a24:	f000 fa5c 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000

08001a3c <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <SDTimer_Handler+0x40>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <SDTimer_Handler+0x1c>
		Timer1--;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <SDTimer_Handler+0x40>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <SDTimer_Handler+0x40>)
 8001a56:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <SDTimer_Handler+0x44>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <SDTimer_Handler+0x34>
		Timer2--;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <SDTimer_Handler+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SDTimer_Handler+0x44>)
 8001a6e:	701a      	strb	r2, [r3, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20001591 	.word	0x20001591
 8001a80:	20001592 	.word	0x20001592

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a88:	f001 f82c 	bl	8002ae4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x8>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <SysTick_Handler+0x30>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <SysTick_Handler+0x30>)
 8001ae0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <SysTick_Handler+0x30>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d904      	bls.n	8001af6 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Handler+0x30>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001af2:	f7ff ffa3 	bl	8001a3c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af6:	f000 f8c9 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20001590 	.word	0x20001590

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f002 ff1a 	bl	800496c <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20018000 	.word	0x20018000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20001594 	.word	0x20001594
 8001b6c:	200017e8 	.word	0x200017e8

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff ffd7 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f002 fed9 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fcdd 	bl	8001584 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001bd8:	0800538c 	.word	0x0800538c
  ldr r2, =_sbss
 8001bdc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001be0:	200017e8 	.word	0x200017e8

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f931 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fe56 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f93b 	bl	8001ec6 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f911 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000004 	.word	0x20000004
 8001c84:	2000000c 	.word	0x2000000c
 8001c88:	20000008 	.word	0x20000008

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000000c 	.word	0x2000000c
 8001cb0:	20001598 	.word	0x20001598

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20001598 	.word	0x20001598

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000000c 	.word	0x2000000c

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff47 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff5c 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff8e 	bl	8001dcc <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5d 	bl	8001d78 <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffb0 	bl	8001e34 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e159      	b.n	80021b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 8148 	bne.w	80021aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d005      	beq.n	8001f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d130      	bne.n	8001f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d017      	beq.n	8001fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d123      	bne.n	8002024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0203 	and.w	r2, r3, #3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a2 	beq.w	80021aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <HAL_GPIO_Init+0x2e8>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a56      	ldr	r2, [pc, #344]	; (80021c8 <HAL_GPIO_Init+0x2e8>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <HAL_GPIO_Init+0x2e8>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002082:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_GPIO_Init+0x2ec>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a49      	ldr	r2, [pc, #292]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x202>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a48      	ldr	r2, [pc, #288]	; (80021d4 <HAL_GPIO_Init+0x2f4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x1fe>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a47      	ldr	r2, [pc, #284]	; (80021d8 <HAL_GPIO_Init+0x2f8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x1fa>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a46      	ldr	r2, [pc, #280]	; (80021dc <HAL_GPIO_Init+0x2fc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x1f6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a45      	ldr	r2, [pc, #276]	; (80021e0 <HAL_GPIO_Init+0x300>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x1f2>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x204>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x204>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x204>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x204>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x204>
 80020e2:	2300      	movs	r3, #0
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_GPIO_Init+0x2ec>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_GPIO_Init+0x304>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <HAL_GPIO_Init+0x304>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_GPIO_Init+0x304>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_GPIO_Init+0x304>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_GPIO_Init+0x304>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217a:	4a1a      	ldr	r2, [pc, #104]	; (80021e4 <HAL_GPIO_Init+0x304>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_GPIO_Init+0x304>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_GPIO_Init+0x304>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f aea2 	bls.w	8001efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e267      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d00c      	beq.n	8002260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224e:	2b08      	cmp	r3, #8
 8002250:	d112      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e242      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x74>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b70      	ldr	r3, [pc, #448]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6f      	ldr	r2, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6c      	ldr	r2, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 80022b4:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fcee 	bl	8001cb4 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fcea 	bl	8001cb4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e207      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fcda 	bl	8001cb4 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fcd6 	bl	8001cb4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1f3      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b44      	ldr	r3, [pc, #272]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c7      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7ff fc8f 	bl	8001cb4 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff fc8b 	bl	8001cb4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a8      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff fc6e 	bl	8001cb4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff fc6a 	bl	8001cb4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e187      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7ff fc4e 	bl	8001cb4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff fc4a 	bl	8001cb4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e167      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x200>
 800243a:	e01b      	b.n	8002474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fc37 	bl	8001cb4 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00e      	b.n	8002468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244a:	f7ff fc33 	bl	8001cb4 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e150      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8097 	beq.w	80025b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b81      	ldr	r3, [pc, #516]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b7d      	ldr	r3, [pc, #500]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b7a      	ldr	r3, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b74      	ldr	r3, [pc, #464]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a73      	ldr	r2, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7ff fbf3 	bl	8001cb4 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7ff fbef 	bl	8001cb4 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e10c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x2ea>
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a63      	ldr	r2, [pc, #396]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x30c>
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a5e      	ldr	r2, [pc, #376]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5b      	ldr	r2, [pc, #364]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002528:	4b58      	ldr	r3, [pc, #352]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a57      	ldr	r2, [pc, #348]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b55      	ldr	r3, [pc, #340]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a54      	ldr	r2, [pc, #336]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7ff fbb4 	bl	8001cb4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff fbb0 	bl	8001cb4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0cb      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7ff fb9e 	bl	8001cb4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7ff fb9a 	bl	8001cb4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0b5      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a1 	beq.w	80026fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d05c      	beq.n	8002680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d141      	bne.n	8002652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7ff fb6e 	bl	8001cb4 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff fb6a 	bl	8001cb4 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e087      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	491b      	ldr	r1, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fb43 	bl	8001cb4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fb3f 	bl	8001cb4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e05c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x416>
 8002650:	e054      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff fb2c 	bl	8001cb4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002660:	f7ff fb28 	bl	8001cb4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e045      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e038      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
 8002694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x4ec>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d028      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d121      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d11a      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7ff fa5a 	bl	8001cb4 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7ff fa56 	bl	8001cb4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f82d 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f9ba 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08005330 	.word	0x08005330
 80028d0:	20000004 	.word	0x20000004
 80028d4:	20000008 	.word	0x20000008

080028d8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_EnableCSS+0x14>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	4247004c 	.word	0x4247004c

080028f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f4:	b090      	sub	sp, #64	; 0x40
 80028f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
 80028fc:	2300      	movs	r3, #0
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002900:	2300      	movs	r3, #0
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b08      	cmp	r3, #8
 8002912:	d00d      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x40>
 8002914:	2b08      	cmp	r3, #8
 8002916:	f200 80a1 	bhi.w	8002a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x34>
 800291e:	2b04      	cmp	r3, #4
 8002920:	d003      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x3a>
 8002922:	e09b      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002928:	e09b      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292a:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292e:	e098      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002930:	4b4f      	ldr	r3, [pc, #316]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293a:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d028      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002946:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	2200      	movs	r2, #0
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	627a      	str	r2, [r7, #36]	; 0x24
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002958:	2100      	movs	r1, #0
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800295c:	fb03 f201 	mul.w	r2, r3, r1
 8002960:	2300      	movs	r3, #0
 8002962:	fb00 f303 	mul.w	r3, r0, r3
 8002966:	4413      	add	r3, r2
 8002968:	4a43      	ldr	r2, [pc, #268]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800296a:	fba0 1202 	umull	r1, r2, r0, r2
 800296e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002970:	460a      	mov	r2, r1
 8002972:	62ba      	str	r2, [r7, #40]	; 0x28
 8002974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002976:	4413      	add	r3, r2
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	2200      	movs	r2, #0
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	61fa      	str	r2, [r7, #28]
 8002982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800298a:	f7fd ff87 	bl	800089c <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4613      	mov	r3, r2
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002996:	e053      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002998:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	2200      	movs	r2, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	617a      	str	r2, [r7, #20]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029aa:	f04f 0b00 	mov.w	fp, #0
 80029ae:	4652      	mov	r2, sl
 80029b0:	465b      	mov	r3, fp
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	0159      	lsls	r1, r3, #5
 80029bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c0:	0150      	lsls	r0, r2, #5
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	ebb2 080a 	subs.w	r8, r2, sl
 80029ca:	eb63 090b 	sbc.w	r9, r3, fp
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029e2:	ebb2 0408 	subs.w	r4, r2, r8
 80029e6:	eb63 0509 	sbc.w	r5, r3, r9
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	00eb      	lsls	r3, r5, #3
 80029f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f8:	00e2      	lsls	r2, r4, #3
 80029fa:	4614      	mov	r4, r2
 80029fc:	461d      	mov	r5, r3
 80029fe:	eb14 030a 	adds.w	r3, r4, sl
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	eb45 030b 	adc.w	r3, r5, fp
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a16:	4629      	mov	r1, r5
 8002a18:	028b      	lsls	r3, r1, #10
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a20:	4621      	mov	r1, r4
 8002a22:	028a      	lsls	r2, r1, #10
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	60fa      	str	r2, [r7, #12]
 8002a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a34:	f7fd ff32 	bl	800089c <__aeabi_uldivmod>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a5a:	e002      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3740      	adds	r7, #64	; 0x40
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	00f42400 	.word	0x00f42400
 8002a78:	017d7840 	.word	0x017d7840

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a98:	f7ff fff0 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0a9b      	lsrs	r3, r3, #10
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08005340 	.word	0x08005340

08002abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac0:	f7ff ffdc 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0b5b      	lsrs	r3, r3, #13
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08005340 	.word	0x08005340

08002ae4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d104      	bne.n	8002afe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002af4:	f000 f80a 	bl	8002b0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	701a      	strb	r2, [r3, #0]
  }
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	4002380e 	.word	0x4002380e

08002b0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e07b      	b.n	8002c24 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3c:	d009      	beq.n	8002b52 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	61da      	str	r2, [r3, #28]
 8002b44:	e005      	b.n	8002b52 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7fe fed5 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	ea42 0103 	orr.w	r1, r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 0104 	and.w	r1, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f003 0210 	and.w	r2, r3, #16
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_SPI_Transmit+0x22>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e126      	b.n	8002e9c <HAL_SPI_Transmit+0x270>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c56:	f7ff f82d 	bl	8001cb4 <HAL_GetTick>
 8002c5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d002      	beq.n	8002c72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c70:	e10b      	b.n	8002e8a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_SPI_Transmit+0x52>
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c82:	e102      	b.n	8002e8a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2203      	movs	r2, #3
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	d10f      	bne.n	8002cec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d007      	beq.n	8002d0a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d12:	d14b      	bne.n	8002dac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_SPI_Transmit+0xf6>
 8002d1c:	8afb      	ldrh	r3, [r7, #22]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d13e      	bne.n	8002da0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	881a      	ldrh	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	1c9a      	adds	r2, r3, #2
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d46:	e02b      	b.n	8002da0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d112      	bne.n	8002d7c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	1c9a      	adds	r2, r3, #2
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d7a:	e011      	b.n	8002da0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d7c:	f7fe ff9a 	bl	8001cb4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d803      	bhi.n	8002d94 <HAL_SPI_Transmit+0x168>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d102      	bne.n	8002d9a <HAL_SPI_Transmit+0x16e>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d9e:	e074      	b.n	8002e8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ce      	bne.n	8002d48 <HAL_SPI_Transmit+0x11c>
 8002daa:	e04c      	b.n	8002e46 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_SPI_Transmit+0x18e>
 8002db4:	8afb      	ldrh	r3, [r7, #22]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d140      	bne.n	8002e3c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002de0:	e02c      	b.n	8002e3c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d113      	bne.n	8002e18 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e16:	e011      	b.n	8002e3c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e18:	f7fe ff4c 	bl	8001cb4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d803      	bhi.n	8002e30 <HAL_SPI_Transmit+0x204>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d102      	bne.n	8002e36 <HAL_SPI_Transmit+0x20a>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e3a:	e026      	b.n	8002e8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1cd      	bne.n	8002de2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fa62 	bl	8003314 <SPI_EndRxTxTransaction>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	77fb      	strb	r3, [r7, #31]
 8002e86:	e000      	b.n	8002e8a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	; 0x30
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_SPI_TransmitReceive+0x26>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e18a      	b.n	80031e0 <HAL_SPI_TransmitReceive+0x33c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed2:	f7fe feef 	bl	8001cb4 <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d00f      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x70>
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efa:	d107      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x68>
 8002f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d003      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f12:	e15b      	b.n	80031cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_SPI_TransmitReceive+0x82>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_TransmitReceive+0x82>
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f2c:	e14e      	b.n	80031cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d003      	beq.n	8002f42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	887a      	ldrh	r2, [r7, #2]
 8002f52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	887a      	ldrh	r2, [r7, #2]
 8002f6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d007      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9e:	d178      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x10a>
 8002fa8:	8b7b      	ldrh	r3, [r7, #26]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d166      	bne.n	800307c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	1c9a      	adds	r2, r3, #2
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd2:	e053      	b.n	800307c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d11b      	bne.n	800301a <HAL_SPI_TransmitReceive+0x176>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d016      	beq.n	800301a <HAL_SPI_TransmitReceive+0x176>
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d113      	bne.n	800301a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	1c9a      	adds	r2, r3, #2
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d119      	bne.n	800305c <HAL_SPI_TransmitReceive+0x1b8>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d014      	beq.n	800305c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	b292      	uxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003058:	2301      	movs	r3, #1
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800305c:	f7fe fe2a 	bl	8001cb4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003068:	429a      	cmp	r2, r3
 800306a:	d807      	bhi.n	800307c <HAL_SPI_TransmitReceive+0x1d8>
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d003      	beq.n	800307c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800307a:	e0a7      	b.n	80031cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1a6      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x130>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1a1      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x130>
 8003090:	e07c      	b.n	800318c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x1fc>
 800309a:	8b7b      	ldrh	r3, [r7, #26]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d16b      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c6:	e057      	b.n	8003178 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d11c      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x26c>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x26c>
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d114      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d119      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x2ae>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d014      	beq.n	8003152 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800314e:	2301      	movs	r3, #1
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003152:	f7fe fdaf 	bl	8001cb4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800315e:	429a      	cmp	r2, r3
 8003160:	d803      	bhi.n	800316a <HAL_SPI_TransmitReceive+0x2c6>
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d102      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x2cc>
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d103      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003176:	e029      	b.n	80031cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1a2      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x224>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d19d      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8bf 	bl	8003314 <SPI_EndRxTxTransaction>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80031a8:	e010      	b.n	80031cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	e000      	b.n	80031cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80031ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3730      	adds	r7, #48	; 0x30
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f6:	b2db      	uxtb	r3, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003214:	f7fe fd4e 	bl	8001cb4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003224:	f7fe fd46 	bl	8001cb4 <HAL_GetTick>
 8003228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	015b      	lsls	r3, r3, #5
 8003230:	0d1b      	lsrs	r3, r3, #20
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323a:	e054      	b.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d050      	beq.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003244:	f7fe fd36 	bl	8001cb4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	d902      	bls.n	800325a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13d      	bne.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003272:	d111      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327c:	d004      	beq.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	d107      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a0:	d10f      	bne.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e017      	b.n	8003306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	429a      	cmp	r2, r3
 8003302:	d19b      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000004 	.word	0x20000004

08003314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <SPI_EndRxTxTransaction+0x7c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <SPI_EndRxTxTransaction+0x80>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0d5b      	lsrs	r3, r3, #21
 800332c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333e:	d112      	bne.n	8003366 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff ff5a 	bl	8003204 <SPI_WaitFlagStateUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e00f      	b.n	8003386 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3b01      	subs	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d0f2      	beq.n	8003366 <SPI_EndRxTxTransaction+0x52>
 8003380:	e000      	b.n	8003384 <SPI_EndRxTxTransaction+0x70>
        break;
 8003382:	bf00      	nop
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000004 	.word	0x20000004
 8003394:	165e9f81 	.word	0x165e9f81

08003398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e03f      	b.n	800342a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe faf4 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f929 	bl	8003634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b08a      	sub	sp, #40	; 0x28
 8003436:	af02      	add	r7, sp, #8
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	d17c      	bne.n	800354c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_UART_Transmit+0x2c>
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e075      	b.n	800354e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_UART_Transmit+0x3e>
 800346c:	2302      	movs	r3, #2
 800346e:	e06e      	b.n	800354e <HAL_UART_Transmit+0x11c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2221      	movs	r2, #33	; 0x21
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003486:	f7fe fc15 	bl	8001cb4 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	88fa      	ldrh	r2, [r7, #6]
 8003490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	88fa      	ldrh	r2, [r7, #6]
 8003496:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a0:	d108      	bne.n	80034b4 <HAL_UART_Transmit+0x82>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e003      	b.n	80034bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034c4:	e02a      	b.n	800351c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f840 	bl	8003556 <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e036      	b.n	800354e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3302      	adds	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	e007      	b.n	800350e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	3301      	adds	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1cf      	bne.n	80034c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	2140      	movs	r1, #64	; 0x40
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f810 	bl	8003556 <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e006      	b.n	800354e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b090      	sub	sp, #64	; 0x40
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003566:	e050      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d04c      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <UART_WaitOnFlagUntilTimeout+0x30>
 8003576:	f7fe fb9d 	bl	8001cb4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003582:	429a      	cmp	r2, r3
 8003584:	d241      	bcs.n	800360a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035a6:	637a      	str	r2, [r7, #52]	; 0x34
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e5      	bne.n	8003586 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	613b      	str	r3, [r7, #16]
   return(result);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3314      	adds	r3, #20
 80035d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035da:	623a      	str	r2, [r7, #32]
 80035dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	69f9      	ldr	r1, [r7, #28]
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e5      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e00f      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d09f      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3740      	adds	r7, #64	; 0x40
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b0c0      	sub	sp, #256	; 0x100
 800363a:	af00      	add	r7, sp, #0
 800363c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003650:	68d9      	ldr	r1, [r3, #12]
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	ea40 0301 	orr.w	r3, r0, r1
 800365c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	431a      	orrs	r2, r3
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800368c:	f021 010c 	bic.w	r1, r1, #12
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800369a:	430b      	orrs	r3, r1
 800369c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ae:	6999      	ldr	r1, [r3, #24]
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	ea40 0301 	orr.w	r3, r0, r1
 80036ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b8f      	ldr	r3, [pc, #572]	; (8003900 <UART_SetConfig+0x2cc>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d005      	beq.n	80036d4 <UART_SetConfig+0xa0>
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b8d      	ldr	r3, [pc, #564]	; (8003904 <UART_SetConfig+0x2d0>)
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d104      	bne.n	80036de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d4:	f7ff f9f2 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 80036d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036dc:	e003      	b.n	80036e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036de:	f7ff f9d9 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 80036e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f0:	f040 810c 	bne.w	800390c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003706:	4622      	mov	r2, r4
 8003708:	462b      	mov	r3, r5
 800370a:	1891      	adds	r1, r2, r2
 800370c:	65b9      	str	r1, [r7, #88]	; 0x58
 800370e:	415b      	adcs	r3, r3
 8003710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003716:	4621      	mov	r1, r4
 8003718:	eb12 0801 	adds.w	r8, r2, r1
 800371c:	4629      	mov	r1, r5
 800371e:	eb43 0901 	adc.w	r9, r3, r1
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800372e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003736:	4690      	mov	r8, r2
 8003738:	4699      	mov	r9, r3
 800373a:	4623      	mov	r3, r4
 800373c:	eb18 0303 	adds.w	r3, r8, r3
 8003740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003744:	462b      	mov	r3, r5
 8003746:	eb49 0303 	adc.w	r3, r9, r3
 800374a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800375a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800375e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003762:	460b      	mov	r3, r1
 8003764:	18db      	adds	r3, r3, r3
 8003766:	653b      	str	r3, [r7, #80]	; 0x50
 8003768:	4613      	mov	r3, r2
 800376a:	eb42 0303 	adc.w	r3, r2, r3
 800376e:	657b      	str	r3, [r7, #84]	; 0x54
 8003770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003778:	f7fd f890 	bl	800089c <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4b61      	ldr	r3, [pc, #388]	; (8003908 <UART_SetConfig+0x2d4>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011c      	lsls	r4, r3, #4
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003794:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80037a4:	415b      	adcs	r3, r3
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037ac:	4641      	mov	r1, r8
 80037ae:	eb12 0a01 	adds.w	sl, r2, r1
 80037b2:	4649      	mov	r1, r9
 80037b4:	eb43 0b01 	adc.w	fp, r3, r1
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037cc:	4692      	mov	sl, r2
 80037ce:	469b      	mov	fp, r3
 80037d0:	4643      	mov	r3, r8
 80037d2:	eb1a 0303 	adds.w	r3, sl, r3
 80037d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037da:	464b      	mov	r3, r9
 80037dc:	eb4b 0303 	adc.w	r3, fp, r3
 80037e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037f8:	460b      	mov	r3, r1
 80037fa:	18db      	adds	r3, r3, r3
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
 80037fe:	4613      	mov	r3, r2
 8003800:	eb42 0303 	adc.w	r3, r2, r3
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
 8003806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800380a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800380e:	f7fd f845 	bl	800089c <__aeabi_uldivmod>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4611      	mov	r1, r2
 8003818:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <UART_SetConfig+0x2d4>)
 800381a:	fba3 2301 	umull	r2, r3, r3, r1
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2264      	movs	r2, #100	; 0x64
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	1acb      	subs	r3, r1, r3
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <UART_SetConfig+0x2d4>)
 8003830:	fba3 2302 	umull	r2, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800383c:	441c      	add	r4, r3
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003848:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800384c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	63b9      	str	r1, [r7, #56]	; 0x38
 8003858:	415b      	adcs	r3, r3
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003860:	4641      	mov	r1, r8
 8003862:	1851      	adds	r1, r2, r1
 8003864:	6339      	str	r1, [r7, #48]	; 0x30
 8003866:	4649      	mov	r1, r9
 8003868:	414b      	adcs	r3, r1
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003878:	4659      	mov	r1, fp
 800387a:	00cb      	lsls	r3, r1, #3
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003882:	4651      	mov	r1, sl
 8003884:	00ca      	lsls	r2, r1, #3
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	4603      	mov	r3, r0
 800388c:	4642      	mov	r2, r8
 800388e:	189b      	adds	r3, r3, r2
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003894:	464b      	mov	r3, r9
 8003896:	460a      	mov	r2, r1
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038b4:	460b      	mov	r3, r1
 80038b6:	18db      	adds	r3, r3, r3
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ba:	4613      	mov	r3, r2
 80038bc:	eb42 0303 	adc.w	r3, r2, r3
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038ca:	f7fc ffe7 	bl	800089c <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <UART_SetConfig+0x2d4>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	; 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3332      	adds	r3, #50	; 0x32
 80038e6:	4a08      	ldr	r2, [pc, #32]	; (8003908 <UART_SetConfig+0x2d4>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 0207 	and.w	r2, r3, #7
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4422      	add	r2, r4
 80038fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038fc:	e105      	b.n	8003b0a <UART_SetConfig+0x4d6>
 80038fe:	bf00      	nop
 8003900:	40011000 	.word	0x40011000
 8003904:	40011400 	.word	0x40011400
 8003908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003916:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800391a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800391e:	4642      	mov	r2, r8
 8003920:	464b      	mov	r3, r9
 8003922:	1891      	adds	r1, r2, r2
 8003924:	6239      	str	r1, [r7, #32]
 8003926:	415b      	adcs	r3, r3
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800392e:	4641      	mov	r1, r8
 8003930:	1854      	adds	r4, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb43 0501 	adc.w	r5, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	00eb      	lsls	r3, r5, #3
 8003942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003946:	00e2      	lsls	r2, r4, #3
 8003948:	4614      	mov	r4, r2
 800394a:	461d      	mov	r5, r3
 800394c:	4643      	mov	r3, r8
 800394e:	18e3      	adds	r3, r4, r3
 8003950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003954:	464b      	mov	r3, r9
 8003956:	eb45 0303 	adc.w	r3, r5, r3
 800395a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800396a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800397a:	4629      	mov	r1, r5
 800397c:	008b      	lsls	r3, r1, #2
 800397e:	4621      	mov	r1, r4
 8003980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003984:	4621      	mov	r1, r4
 8003986:	008a      	lsls	r2, r1, #2
 8003988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800398c:	f7fc ff86 	bl	800089c <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4b60      	ldr	r3, [pc, #384]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003996:	fba3 2302 	umull	r2, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	011c      	lsls	r4, r3, #4
 800399e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	61b9      	str	r1, [r7, #24]
 80039b8:	415b      	adcs	r3, r3
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	4641      	mov	r1, r8
 80039c2:	1851      	adds	r1, r2, r1
 80039c4:	6139      	str	r1, [r7, #16]
 80039c6:	4649      	mov	r1, r9
 80039c8:	414b      	adcs	r3, r1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d8:	4659      	mov	r1, fp
 80039da:	00cb      	lsls	r3, r1, #3
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e2:	4651      	mov	r1, sl
 80039e4:	00ca      	lsls	r2, r1, #3
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	4642      	mov	r2, r8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039f4:	464b      	mov	r3, r9
 80039f6:	460a      	mov	r2, r1
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a18:	4649      	mov	r1, r9
 8003a1a:	008b      	lsls	r3, r1, #2
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a22:	4641      	mov	r1, r8
 8003a24:	008a      	lsls	r2, r1, #2
 8003a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a2a:	f7fc ff37 	bl	800089c <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	; 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a34      	ldr	r2, [pc, #208]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a52:	441c      	add	r4, r3
 8003a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a58:	2200      	movs	r2, #0
 8003a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a5c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a62:	4642      	mov	r2, r8
 8003a64:	464b      	mov	r3, r9
 8003a66:	1891      	adds	r1, r2, r2
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a72:	4641      	mov	r1, r8
 8003a74:	1851      	adds	r1, r2, r1
 8003a76:	6039      	str	r1, [r7, #0]
 8003a78:	4649      	mov	r1, r9
 8003a7a:	414b      	adcs	r3, r1
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a8a:	4659      	mov	r1, fp
 8003a8c:	00cb      	lsls	r3, r1, #3
 8003a8e:	4651      	mov	r1, sl
 8003a90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a94:	4651      	mov	r1, sl
 8003a96:	00ca      	lsls	r2, r1, #3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	460a      	mov	r2, r1
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab8:	667a      	str	r2, [r7, #100]	; 0x64
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	008b      	lsls	r3, r1, #2
 8003aca:	4641      	mov	r1, r8
 8003acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	008a      	lsls	r2, r1, #2
 8003ad4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ad8:	f7fc fee0 	bl	800089c <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2164      	movs	r1, #100	; 0x64
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	; 0x32
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4422      	add	r2, r4
 8003b08:	609a      	str	r2, [r3, #8]
}
 8003b0a:	bf00      	nop
 8003b0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	51eb851f 	.word	0x51eb851f

08003b1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003b20:	4904      	ldr	r1, [pc, #16]	; (8003b34 <MX_FATFS_Init+0x18>)
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <MX_FATFS_Init+0x1c>)
 8003b24:	f000 ff12 	bl	800494c <FATFS_LinkDriver>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <MX_FATFS_Init+0x20>)
 8003b2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	200015a0 	.word	0x200015a0
 8003b38:	20000010 	.word	0x20000010
 8003b3c:	2000159c 	.word	0x2000159c

08003b40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd f9e1 	bl	8000f14 <SD_disk_initialize>
 8003b52:	4603      	mov	r3, r0
 8003b54:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fabc 	bl	80010e8 <SD_disk_status>
 8003b70:	4603      	mov	r3, r0
 8003b72:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003b8c:	7bf8      	ldrb	r0, [r7, #15]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	f7fd fabe 	bl	8001114 <SD_disk_read>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003bb4:	7bf8      	ldrb	r0, [r7, #15]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	f7fd fb14 	bl	80011e8 <SD_disk_write>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	603a      	str	r2, [r7, #0]
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	79b9      	ldrb	r1, [r7, #6]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fb84 	bl	80012f0 <SD_disk_ioctl>
 8003be8:	4603      	mov	r3, r0
 8003bea:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <disk_status+0x30>)
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	79fa      	ldrb	r2, [r7, #7]
 8003c0c:	4905      	ldr	r1, [pc, #20]	; (8003c24 <disk_status+0x30>)
 8003c0e:	440a      	add	r2, r1
 8003c10:	7a12      	ldrb	r2, [r2, #8]
 8003c12:	4610      	mov	r0, r2
 8003c14:	4798      	blx	r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	200017cc 	.word	0x200017cc

08003c28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <disk_initialize+0x48>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d111      	bne.n	8003c64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <disk_initialize+0x48>)
 8003c44:	2101      	movs	r1, #1
 8003c46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <disk_initialize+0x48>)
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	79fa      	ldrb	r2, [r7, #7]
 8003c56:	4906      	ldr	r1, [pc, #24]	; (8003c70 <disk_initialize+0x48>)
 8003c58:	440a      	add	r2, r1
 8003c5a:	7a12      	ldrb	r2, [r2, #8]
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4798      	blx	r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200017cc 	.word	0x200017cc

08003c74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <disk_read+0x3c>)
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	689c      	ldr	r4, [r3, #8]
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <disk_read+0x3c>)
 8003c94:	4413      	add	r3, r2
 8003c96:	7a18      	ldrb	r0, [r3, #8]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	47a0      	blx	r4
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd90      	pop	{r4, r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200017cc 	.word	0x200017cc

08003cb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <disk_write+0x3c>)
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	68dc      	ldr	r4, [r3, #12]
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <disk_write+0x3c>)
 8003cd4:	4413      	add	r3, r2
 8003cd6:	7a18      	ldrb	r0, [r3, #8]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	47a0      	blx	r4
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200017cc 	.word	0x200017cc

08003cf4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	603a      	str	r2, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
 8003d00:	460b      	mov	r3, r1
 8003d02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <disk_ioctl+0x38>)
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	79fa      	ldrb	r2, [r7, #7]
 8003d12:	4906      	ldr	r1, [pc, #24]	; (8003d2c <disk_ioctl+0x38>)
 8003d14:	440a      	add	r2, r1
 8003d16:	7a10      	ldrb	r0, [r2, #8]
 8003d18:	79b9      	ldrb	r1, [r7, #6]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	4798      	blx	r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]
  return res;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200017cc 	.word	0x200017cc

08003d30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003d40:	89fb      	ldrh	r3, [r7, #14]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	b21a      	sxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b21b      	sxth	r3, r3
 8003d50:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003d52:	89fb      	ldrh	r3, [r7, #14]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3303      	adds	r3, #3
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	3202      	adds	r2, #2
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	3201      	adds	r2, #1
 8003d86:	7812      	ldrb	r2, [r2, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	7812      	ldrb	r2, [r2, #0]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
	return rv;
 8003d98:	68fb      	ldr	r3, [r7, #12]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e010      	b.n	8003dd8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003db6:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <clear_lock+0x44>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	4413      	add	r3, r2
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d105      	bne.n	8003dd2 <clear_lock+0x2a>
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <clear_lock+0x44>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	4413      	add	r3, r2
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d9eb      	bls.n	8003db6 <clear_lock+0xe>
	}
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	200015ac 	.word	0x200015ac

08003df0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	78db      	ldrb	r3, [r3, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d034      	beq.n	8003e6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7858      	ldrb	r0, [r3, #1]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e14:	2301      	movs	r3, #1
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	f7ff ff4c 	bl	8003cb4 <disk_write>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	e022      	b.n	8003e6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	1ad2      	subs	r2, r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d217      	bcs.n	8003e6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	789b      	ldrb	r3, [r3, #2]
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	e010      	b.n	8003e68 <sync_window+0x78>
					wsect += fs->fsize;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7858      	ldrb	r0, [r3, #1]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	f7ff ff29 	bl	8003cb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d8eb      	bhi.n	8003e46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d01b      	beq.n	8003ec8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ffad 	bl	8003df0 <sync_window>
 8003e96:	4603      	mov	r3, r0
 8003e98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d113      	bne.n	8003ec8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7858      	ldrb	r0, [r3, #1]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003eaa:	2301      	movs	r3, #1
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	f7ff fee1 	bl	8003c74 <disk_read>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d904      	bls.n	8003ef2 <get_fat+0x20>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e0bb      	b.n	8004070 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	f000 8083 	beq.w	800400e <get_fat+0x13c>
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	f300 80a7 	bgt.w	800405c <get_fat+0x18a>
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d002      	beq.n	8003f18 <get_fat+0x46>
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d056      	beq.n	8003fc4 <get_fat+0xf2>
 8003f16:	e0a1      	b.n	800405c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	899b      	ldrh	r3, [r3, #12]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f36:	4413      	add	r3, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6938      	ldr	r0, [r7, #16]
 8003f3c:	f7ff ff9c 	bl	8003e78 <move_window>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 808d 	bne.w	8004062 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60fa      	str	r2, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	8992      	ldrh	r2, [r2, #12]
 8003f52:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f56:	fb01 f202 	mul.w	r2, r1, r2
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	899b      	ldrh	r3, [r3, #12]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f76:	4413      	add	r3, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6938      	ldr	r0, [r7, #16]
 8003f7c:	f7ff ff7c 	bl	8003e78 <move_window>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d16f      	bne.n	8004066 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	899b      	ldrh	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f92:	fb01 f202 	mul.w	r2, r1, r2
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <get_fat+0xe8>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	e002      	b.n	8003fc0 <get_fat+0xee>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc0:	617b      	str	r3, [r7, #20]
			break;
 8003fc2:	e055      	b.n	8004070 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	899b      	ldrh	r3, [r3, #12]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fd8:	4413      	add	r3, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6938      	ldr	r0, [r7, #16]
 8003fde:	f7ff ff4b 	bl	8003e78 <move_window>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d140      	bne.n	800406a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	8992      	ldrh	r2, [r2, #12]
 8003ff6:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ffa:	fb00 f202 	mul.w	r2, r0, r2
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	440b      	add	r3, r1
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fe94 	bl	8003d30 <ld_word>
 8004008:	4603      	mov	r3, r0
 800400a:	617b      	str	r3, [r7, #20]
			break;
 800400c:	e030      	b.n	8004070 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	899b      	ldrh	r3, [r3, #12]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	b29b      	uxth	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004022:	4413      	add	r3, r2
 8004024:	4619      	mov	r1, r3
 8004026:	6938      	ldr	r0, [r7, #16]
 8004028:	f7ff ff26 	bl	8003e78 <move_window>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11d      	bne.n	800406e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	8992      	ldrh	r2, [r2, #12]
 8004040:	fbb3 f0f2 	udiv	r0, r3, r2
 8004044:	fb00 f202 	mul.w	r2, r0, r2
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	440b      	add	r3, r1
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fe87 	bl	8003d60 <ld_dword>
 8004052:	4603      	mov	r3, r0
 8004054:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004058:	617b      	str	r3, [r7, #20]
			break;
 800405a:	e009      	b.n	8004070 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e006      	b.n	8004070 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004062:	bf00      	nop
 8004064:	e004      	b.n	8004070 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800406e:	bf00      	nop
		}
	}

	return val;
 8004070:	697b      	ldr	r3, [r7, #20]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d031      	beq.n	80040f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e002      	b.n	800409e <get_ldnumber+0x24>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3301      	adds	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b1f      	cmp	r3, #31
 80040a4:	d903      	bls.n	80040ae <get_ldnumber+0x34>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b3a      	cmp	r3, #58	; 0x3a
 80040ac:	d1f4      	bne.n	8004098 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b3a      	cmp	r3, #58	; 0x3a
 80040b4:	d11c      	bne.n	80040f0 <get_ldnumber+0x76>
			tp = *path;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	60fa      	str	r2, [r7, #12]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	3b30      	subs	r3, #48	; 0x30
 80040c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b09      	cmp	r3, #9
 80040cc:	d80e      	bhi.n	80040ec <get_ldnumber+0x72>
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d10a      	bne.n	80040ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <get_ldnumber+0x72>
					vol = (int)i;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3301      	adds	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	e002      	b.n	80040f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80040f4:	693b      	ldr	r3, [r7, #16]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	70da      	strb	r2, [r3, #3]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f04f 32ff 	mov.w	r2, #4294967295
 800411a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff feaa 	bl	8003e78 <move_window>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <check_fs+0x2a>
 800412a:	2304      	movs	r3, #4
 800412c:	e038      	b.n	80041a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3338      	adds	r3, #56	; 0x38
 8004132:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fdfa 	bl	8003d30 <ld_word>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <check_fs+0x48>
 8004148:	2303      	movs	r3, #3
 800414a:	e029      	b.n	80041a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004152:	2be9      	cmp	r3, #233	; 0xe9
 8004154:	d009      	beq.n	800416a <check_fs+0x66>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800415c:	2beb      	cmp	r3, #235	; 0xeb
 800415e:	d11e      	bne.n	800419e <check_fs+0x9a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004166:	2b90      	cmp	r3, #144	; 0x90
 8004168:	d119      	bne.n	800419e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3338      	adds	r3, #56	; 0x38
 800416e:	3336      	adds	r3, #54	; 0x36
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fdf5 	bl	8003d60 <ld_dword>
 8004176:	4603      	mov	r3, r0
 8004178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <check_fs+0xa4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <check_fs+0x82>
 8004182:	2300      	movs	r3, #0
 8004184:	e00c      	b.n	80041a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3338      	adds	r3, #56	; 0x38
 800418a:	3352      	adds	r3, #82	; 0x52
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fde7 	bl	8003d60 <ld_dword>
 8004192:	4603      	mov	r3, r0
 8004194:	4a05      	ldr	r2, [pc, #20]	; (80041ac <check_fs+0xa8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <check_fs+0x9a>
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800419e:	2302      	movs	r3, #2
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	00544146 	.word	0x00544146
 80041ac:	33544146 	.word	0x33544146

080041b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b096      	sub	sp, #88	; 0x58
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	4613      	mov	r3, r2
 80041bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff ff58 	bl	800407a <get_ldnumber>
 80041ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da01      	bge.n	80041d6 <find_volume+0x26>
 80041d2:	230b      	movs	r3, #11
 80041d4:	e265      	b.n	80046a2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80041d6:	4a9f      	ldr	r2, [pc, #636]	; (8004454 <find_volume+0x2a4>)
 80041d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <find_volume+0x3a>
 80041e6:	230c      	movs	r3, #12
 80041e8:	e25b      	b.n	80046a2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01a      	beq.n	8004236 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fcf5 	bl	8003bf4 <disk_status>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10c      	bne.n	8004236 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <find_volume+0x82>
 8004222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800422e:	230a      	movs	r3, #10
 8004230:	e237      	b.n	80046a2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004232:	2300      	movs	r3, #0
 8004234:	e235      	b.n	80046a2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800423c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fced 	bl	8003c28 <disk_initialize>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004260:	2303      	movs	r3, #3
 8004262:	e21e      	b.n	80046a2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <find_volume+0xca>
 800426a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004276:	230a      	movs	r3, #10
 8004278:	e213      	b.n	80046a2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	7858      	ldrb	r0, [r3, #1]
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	330c      	adds	r3, #12
 8004282:	461a      	mov	r2, r3
 8004284:	2102      	movs	r1, #2
 8004286:	f7ff fd35 	bl	8003cf4 <disk_ioctl>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <find_volume+0xe4>
 8004290:	2301      	movs	r3, #1
 8004292:	e206      	b.n	80046a2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	899b      	ldrh	r3, [r3, #12]
 8004298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429c:	d80d      	bhi.n	80042ba <find_volume+0x10a>
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	899b      	ldrh	r3, [r3, #12]
 80042a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a6:	d308      	bcc.n	80042ba <find_volume+0x10a>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	899b      	ldrh	r3, [r3, #12]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	899b      	ldrh	r3, [r3, #12]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <find_volume+0x10e>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1f1      	b.n	80046a2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80042c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042c6:	f7ff ff1d 	bl	8004104 <check_fs>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80042d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d149      	bne.n	800436c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80042d8:	2300      	movs	r3, #0
 80042da:	643b      	str	r3, [r7, #64]	; 0x40
 80042dc:	e01e      	b.n	800431c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80042ec:	4413      	add	r3, r2
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	3304      	adds	r3, #4
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d006      	beq.n	8004308 <find_volume+0x158>
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	3308      	adds	r3, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fd2e 	bl	8003d60 <ld_dword>
 8004304:	4602      	mov	r2, r0
 8004306:	e000      	b.n	800430a <find_volume+0x15a>
 8004308:	2200      	movs	r2, #0
 800430a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	3358      	adds	r3, #88	; 0x58
 8004310:	443b      	add	r3, r7
 8004312:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004318:	3301      	adds	r3, #1
 800431a:	643b      	str	r3, [r7, #64]	; 0x40
 800431c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431e:	2b03      	cmp	r3, #3
 8004320:	d9dd      	bls.n	80042de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004322:	2300      	movs	r3, #0
 8004324:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <find_volume+0x182>
 800432c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432e:	3b01      	subs	r3, #1
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	3358      	adds	r3, #88	; 0x58
 8004338:	443b      	add	r3, r7
 800433a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800433e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <find_volume+0x1a2>
 8004346:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004348:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800434a:	f7ff fedb 	bl	8004104 <check_fs>
 800434e:	4603      	mov	r3, r0
 8004350:	e000      	b.n	8004354 <find_volume+0x1a4>
 8004352:	2303      	movs	r3, #3
 8004354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800435c:	2b01      	cmp	r3, #1
 800435e:	d905      	bls.n	800436c <find_volume+0x1bc>
 8004360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004362:	3301      	adds	r3, #1
 8004364:	643b      	str	r3, [r7, #64]	; 0x40
 8004366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004368:	2b03      	cmp	r3, #3
 800436a:	d9e2      	bls.n	8004332 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800436c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004370:	2b04      	cmp	r3, #4
 8004372:	d101      	bne.n	8004378 <find_volume+0x1c8>
 8004374:	2301      	movs	r3, #1
 8004376:	e194      	b.n	80046a2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800437c:	2b01      	cmp	r3, #1
 800437e:	d901      	bls.n	8004384 <find_volume+0x1d4>
 8004380:	230d      	movs	r3, #13
 8004382:	e18e      	b.n	80046a2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	3338      	adds	r3, #56	; 0x38
 8004388:	330b      	adds	r3, #11
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fcd0 	bl	8003d30 <ld_word>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	899b      	ldrh	r3, [r3, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <find_volume+0x1f0>
 800439c:	230d      	movs	r3, #13
 800439e:	e180      	b.n	80046a2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	3338      	adds	r3, #56	; 0x38
 80043a4:	3316      	adds	r3, #22
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fcc2 	bl	8003d30 <ld_word>
 80043ac:	4603      	mov	r3, r0
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80043b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <find_volume+0x214>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	3338      	adds	r3, #56	; 0x38
 80043ba:	3324      	adds	r3, #36	; 0x24
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fccf 	bl	8003d60 <ld_dword>
 80043c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	789b      	ldrb	r3, [r3, #2]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d005      	beq.n	80043e8 <find_volume+0x238>
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	789b      	ldrb	r3, [r3, #2]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d001      	beq.n	80043e8 <find_volume+0x238>
 80043e4:	230d      	movs	r3, #13
 80043e6:	e15c      	b.n	80046a2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	789b      	ldrb	r3, [r3, #2]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	895b      	ldrh	r3, [r3, #10]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <find_volume+0x26c>
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	895b      	ldrh	r3, [r3, #10]
 800440e:	461a      	mov	r2, r3
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	895b      	ldrh	r3, [r3, #10]
 8004414:	3b01      	subs	r3, #1
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <find_volume+0x270>
 800441c:	230d      	movs	r3, #13
 800441e:	e140      	b.n	80046a2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	3338      	adds	r3, #56	; 0x38
 8004424:	3311      	adds	r3, #17
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fc82 	bl	8003d30 <ld_word>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	891b      	ldrh	r3, [r3, #8]
 8004438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443a:	8992      	ldrh	r2, [r2, #12]
 800443c:	0952      	lsrs	r2, r2, #5
 800443e:	b292      	uxth	r2, r2
 8004440:	fbb3 f1f2 	udiv	r1, r3, r2
 8004444:	fb01 f202 	mul.w	r2, r1, r2
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <find_volume+0x2a8>
 8004450:	230d      	movs	r3, #13
 8004452:	e126      	b.n	80046a2 <find_volume+0x4f2>
 8004454:	200015a4 	.word	0x200015a4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	3338      	adds	r3, #56	; 0x38
 800445c:	3313      	adds	r3, #19
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fc66 	bl	8003d30 <ld_word>
 8004464:	4603      	mov	r3, r0
 8004466:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <find_volume+0x2cc>
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	3338      	adds	r3, #56	; 0x38
 8004472:	3320      	adds	r3, #32
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fc73 	bl	8003d60 <ld_dword>
 800447a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	3338      	adds	r3, #56	; 0x38
 8004480:	330e      	adds	r3, #14
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fc54 	bl	8003d30 <ld_word>
 8004488:	4603      	mov	r3, r0
 800448a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800448c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <find_volume+0x2e6>
 8004492:	230d      	movs	r3, #13
 8004494:	e105      	b.n	80046a2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004496:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449a:	4413      	add	r3, r2
 800449c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800449e:	8911      	ldrh	r1, [r2, #8]
 80044a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a2:	8992      	ldrh	r2, [r2, #12]
 80044a4:	0952      	lsrs	r2, r2, #5
 80044a6:	b292      	uxth	r2, r2
 80044a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80044ac:	b292      	uxth	r2, r2
 80044ae:	4413      	add	r3, r2
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80044b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d201      	bcs.n	80044be <find_volume+0x30e>
 80044ba:	230d      	movs	r3, #13
 80044bc:	e0f1      	b.n	80046a2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80044be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c6:	8952      	ldrh	r2, [r2, #10]
 80044c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <find_volume+0x328>
 80044d4:	230d      	movs	r3, #13
 80044d6:	e0e4      	b.n	80046a2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80044d8:	2303      	movs	r3, #3
 80044da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d802      	bhi.n	80044ee <find_volume+0x33e>
 80044e8:	2302      	movs	r3, #2
 80044ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d802      	bhi.n	80044fe <find_volume+0x34e>
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800450a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800450c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800450e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004510:	441a      	add	r2, r3
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	441a      	add	r2, r3
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004524:	2b03      	cmp	r3, #3
 8004526:	d11e      	bne.n	8004566 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	3338      	adds	r3, #56	; 0x38
 800452c:	332a      	adds	r3, #42	; 0x2a
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fbfe 	bl	8003d30 <ld_word>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <find_volume+0x38e>
 800453a:	230d      	movs	r3, #13
 800453c:	e0b1      	b.n	80046a2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	891b      	ldrh	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <find_volume+0x39a>
 8004546:	230d      	movs	r3, #13
 8004548:	e0ab      	b.n	80046a2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	3338      	adds	r3, #56	; 0x38
 800454e:	332c      	adds	r3, #44	; 0x2c
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fc05 	bl	8003d60 <ld_dword>
 8004556:	4602      	mov	r2, r0
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	647b      	str	r3, [r7, #68]	; 0x44
 8004564:	e01f      	b.n	80045a6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	891b      	ldrh	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <find_volume+0x3c2>
 800456e:	230d      	movs	r3, #13
 8004570:	e097      	b.n	80046a2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004578:	441a      	add	r2, r3
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800457e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004582:	2b02      	cmp	r3, #2
 8004584:	d103      	bne.n	800458e <find_volume+0x3de>
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	e00a      	b.n	80045a4 <find_volume+0x3f4>
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	085a      	lsrs	r2, r3, #1
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80045a4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	899b      	ldrh	r3, [r3, #12]
 80045ae:	4619      	mov	r1, r3
 80045b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b2:	440b      	add	r3, r1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045b8:	8989      	ldrh	r1, [r1, #12]
 80045ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80045be:	429a      	cmp	r2, r3
 80045c0:	d201      	bcs.n	80045c6 <find_volume+0x416>
 80045c2:	230d      	movs	r3, #13
 80045c4:	e06d      	b.n	80046a2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	619a      	str	r2, [r3, #24]
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80045dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d149      	bne.n	8004678 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	3338      	adds	r3, #56	; 0x38
 80045e8:	3330      	adds	r3, #48	; 0x30
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fba0 	bl	8003d30 <ld_word>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d140      	bne.n	8004678 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80045f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f8:	3301      	adds	r3, #1
 80045fa:	4619      	mov	r1, r3
 80045fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045fe:	f7ff fc3b 	bl	8003e78 <move_window>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d137      	bne.n	8004678 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	2200      	movs	r2, #0
 800460c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	3338      	adds	r3, #56	; 0x38
 8004612:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fb8a 	bl	8003d30 <ld_word>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004624:	429a      	cmp	r2, r3
 8004626:	d127      	bne.n	8004678 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	3338      	adds	r3, #56	; 0x38
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fb97 	bl	8003d60 <ld_dword>
 8004632:	4603      	mov	r3, r0
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <find_volume+0x4fc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d11e      	bne.n	8004678 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	3338      	adds	r3, #56	; 0x38
 800463e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fb8c 	bl	8003d60 <ld_dword>
 8004648:	4603      	mov	r3, r0
 800464a:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <find_volume+0x500>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d113      	bne.n	8004678 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	3338      	adds	r3, #56	; 0x38
 8004654:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fb81 	bl	8003d60 <ld_dword>
 800465e:	4602      	mov	r2, r0
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	3338      	adds	r3, #56	; 0x38
 8004668:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fb77 	bl	8003d60 <ld_dword>
 8004672:	4602      	mov	r2, r0
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800467e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <find_volume+0x504>)
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <find_volume+0x504>)
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <find_volume+0x504>)
 800468e:	881a      	ldrh	r2, [r3, #0]
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <find_volume+0x508>)
 8004698:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800469a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800469c:	f7ff fb84 	bl	8003da8 <clear_lock>
#endif
	return FR_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3758      	adds	r7, #88	; 0x58
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	41615252 	.word	0x41615252
 80046b0:	61417272 	.word	0x61417272
 80046b4:	200015a8 	.word	0x200015a8
 80046b8:	200015cc 	.word	0x200015cc

080046bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80046ce:	f107 0310 	add.w	r3, r7, #16
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fcd1 	bl	800407a <get_ldnumber>
 80046d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	da01      	bge.n	80046e4 <f_mount+0x28>
 80046e0:	230b      	movs	r3, #11
 80046e2:	e02b      	b.n	800473c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <f_mount+0x88>)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80046f4:	69b8      	ldr	r0, [r7, #24]
 80046f6:	f7ff fb57 	bl	8003da8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	490d      	ldr	r1, [pc, #52]	; (8004744 <f_mount+0x88>)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <f_mount+0x66>
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d001      	beq.n	8004726 <f_mount+0x6a>
 8004722:	2300      	movs	r3, #0
 8004724:	e00a      	b.n	800473c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004726:	f107 010c 	add.w	r1, r7, #12
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	2200      	movs	r2, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fd3d 	bl	80041b0 <find_volume>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800473a:	7dfb      	ldrb	r3, [r7, #23]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	200015a4 	.word	0x200015a4

08004748 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b092      	sub	sp, #72	; 0x48
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8004754:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	2200      	movs	r2, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fd26 	bl	80041b0 <find_volume>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800476a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 8099 	bne.w	80048a6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8004774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	3b02      	subs	r3, #2
 8004784:	429a      	cmp	r2, r3
 8004786:	d804      	bhi.n	8004792 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e089      	b.n	80048a6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d128      	bne.n	80047f0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800479e:	2302      	movs	r3, #2
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fb90 	bl	8003ed2 <get_fat>
 80047b2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d103      	bne.n	80047c4 <f_getfree+0x7c>
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80047c2:	e063      	b.n	800488c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d103      	bne.n	80047d2 <f_getfree+0x8a>
 80047ca:	2302      	movs	r3, #2
 80047cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80047d0:	e05c      	b.n	800488c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <f_getfree+0x96>
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	3301      	adds	r3, #1
 80047dc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	3301      	adds	r3, #1
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d3db      	bcc.n	80047a6 <f_getfree+0x5e>
 80047ee:	e04d      	b.n	800488c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004800:	2300      	movs	r3, #0
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	2b00      	cmp	r3, #0
 8004808:	d113      	bne.n	8004832 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800480a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	63ba      	str	r2, [r7, #56]	; 0x38
 8004812:	4619      	mov	r1, r3
 8004814:	f7ff fb30 	bl	8003e78 <move_window>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800481e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004822:	2b00      	cmp	r3, #0
 8004824:	d131      	bne.n	800488a <f_getfree+0x142>
							p = fs->win;
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	3338      	adds	r3, #56	; 0x38
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	899b      	ldrh	r3, [r3, #12]
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d10f      	bne.n	800485a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800483a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483c:	f7ff fa78 	bl	8003d30 <ld_word>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <f_getfree+0x104>
 8004846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004848:	3301      	adds	r3, #1
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	3302      	adds	r3, #2
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
 8004852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004854:	3b02      	subs	r3, #2
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
 8004858:	e010      	b.n	800487c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800485a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800485c:	f7ff fa80 	bl	8003d60 <ld_dword>
 8004860:	4603      	mov	r3, r0
 8004862:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <f_getfree+0x128>
 800486a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486c:	3301      	adds	r3, #1
 800486e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	3304      	adds	r3, #4
 8004874:	633b      	str	r3, [r7, #48]	; 0x30
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	3b04      	subs	r3, #4
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	3b01      	subs	r3, #1
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1bd      	bne.n	8004804 <f_getfree+0xbc>
 8004888:	e000      	b.n	800488c <f_getfree+0x144>
							if (res != FR_OK) break;
 800488a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004890:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004896:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	791a      	ldrb	r2, [r3, #4]
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80048a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3748      	adds	r7, #72	; 0x48
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	4613      	mov	r3, r2
 80048c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80048ca:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 80048cc:	7a5b      	ldrb	r3, [r3, #9]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d131      	bne.n	8004938 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80048d4:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 80048d6:	7a5b      	ldrb	r3, [r3, #9]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 80048de:	2100      	movs	r1, #0
 80048e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80048e2:	4b19      	ldr	r3, [pc, #100]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 80048e4:	7a5b      	ldrb	r3, [r3, #9]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 80048f4:	7a5b      	ldrb	r3, [r3, #9]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 80048fc:	4413      	add	r3, r2
 80048fe:	79fa      	ldrb	r2, [r7, #7]
 8004900:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 8004904:	7a5b      	ldrb	r3, [r3, #9]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	b2d1      	uxtb	r1, r2
 800490c:	4a0e      	ldr	r2, [pc, #56]	; (8004948 <FATFS_LinkDriverEx+0x94>)
 800490e:	7251      	strb	r1, [r2, #9]
 8004910:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004912:	7dbb      	ldrb	r3, [r7, #22]
 8004914:	3330      	adds	r3, #48	; 0x30
 8004916:	b2da      	uxtb	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	3301      	adds	r3, #1
 8004920:	223a      	movs	r2, #58	; 0x3a
 8004922:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3302      	adds	r3, #2
 8004928:	222f      	movs	r2, #47	; 0x2f
 800492a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3303      	adds	r3, #3
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
}
 800493a:	4618      	mov	r0, r3
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200017cc 	.word	0x200017cc

0800494c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004956:	2200      	movs	r2, #0
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ffaa 	bl	80048b4 <FATFS_LinkDriverEx>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <__errno>:
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <__errno+0x8>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000024 	.word	0x20000024

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4d0d      	ldr	r5, [pc, #52]	; (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	; (80049b4 <__libc_init_array+0x3c>)
 800497e:	1b64      	subs	r4, r4, r5
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2600      	movs	r6, #0
 8004984:	42a6      	cmp	r6, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4d0b      	ldr	r5, [pc, #44]	; (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	; (80049bc <__libc_init_array+0x44>)
 800498c:	f000 fc8e 	bl	80052ac <_init>
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2600      	movs	r6, #0
 8004996:	42a6      	cmp	r6, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a0:	4798      	blx	r3
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049aa:	4798      	blx	r3
 80049ac:	3601      	adds	r6, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	08005384 	.word	0x08005384
 80049b4:	08005384 	.word	0x08005384
 80049b8:	08005384 	.word	0x08005384
 80049bc:	08005388 	.word	0x08005388

080049c0 <memset>:
 80049c0:	4402      	add	r2, r0
 80049c2:	4603      	mov	r3, r0
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d100      	bne.n	80049ca <memset+0xa>
 80049c8:	4770      	bx	lr
 80049ca:	f803 1b01 	strb.w	r1, [r3], #1
 80049ce:	e7f9      	b.n	80049c4 <memset+0x4>

080049d0 <siprintf>:
 80049d0:	b40e      	push	{r1, r2, r3}
 80049d2:	b500      	push	{lr}
 80049d4:	b09c      	sub	sp, #112	; 0x70
 80049d6:	ab1d      	add	r3, sp, #116	; 0x74
 80049d8:	9002      	str	r0, [sp, #8]
 80049da:	9006      	str	r0, [sp, #24]
 80049dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049e0:	4809      	ldr	r0, [pc, #36]	; (8004a08 <siprintf+0x38>)
 80049e2:	9107      	str	r1, [sp, #28]
 80049e4:	9104      	str	r1, [sp, #16]
 80049e6:	4909      	ldr	r1, [pc, #36]	; (8004a0c <siprintf+0x3c>)
 80049e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ec:	9105      	str	r1, [sp, #20]
 80049ee:	6800      	ldr	r0, [r0, #0]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	a902      	add	r1, sp, #8
 80049f4:	f000 f868 	bl	8004ac8 <_svfiprintf_r>
 80049f8:	9b02      	ldr	r3, [sp, #8]
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	b01c      	add	sp, #112	; 0x70
 8004a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a04:	b003      	add	sp, #12
 8004a06:	4770      	bx	lr
 8004a08:	20000024 	.word	0x20000024
 8004a0c:	ffff0208 	.word	0xffff0208

08004a10 <__ssputs_r>:
 8004a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a14:	688e      	ldr	r6, [r1, #8]
 8004a16:	429e      	cmp	r6, r3
 8004a18:	4682      	mov	sl, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4690      	mov	r8, r2
 8004a1e:	461f      	mov	r7, r3
 8004a20:	d838      	bhi.n	8004a94 <__ssputs_r+0x84>
 8004a22:	898a      	ldrh	r2, [r1, #12]
 8004a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a28:	d032      	beq.n	8004a90 <__ssputs_r+0x80>
 8004a2a:	6825      	ldr	r5, [r4, #0]
 8004a2c:	6909      	ldr	r1, [r1, #16]
 8004a2e:	eba5 0901 	sub.w	r9, r5, r1
 8004a32:	6965      	ldr	r5, [r4, #20]
 8004a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	444b      	add	r3, r9
 8004a40:	106d      	asrs	r5, r5, #1
 8004a42:	429d      	cmp	r5, r3
 8004a44:	bf38      	it	cc
 8004a46:	461d      	movcc	r5, r3
 8004a48:	0553      	lsls	r3, r2, #21
 8004a4a:	d531      	bpl.n	8004ab0 <__ssputs_r+0xa0>
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	f000 fb63 	bl	8005118 <_malloc_r>
 8004a52:	4606      	mov	r6, r0
 8004a54:	b950      	cbnz	r0, 8004a6c <__ssputs_r+0x5c>
 8004a56:	230c      	movs	r3, #12
 8004a58:	f8ca 3000 	str.w	r3, [sl]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	6921      	ldr	r1, [r4, #16]
 8004a6e:	464a      	mov	r2, r9
 8004a70:	f000 fabe 	bl	8004ff0 <memcpy>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	6126      	str	r6, [r4, #16]
 8004a82:	6165      	str	r5, [r4, #20]
 8004a84:	444e      	add	r6, r9
 8004a86:	eba5 0509 	sub.w	r5, r5, r9
 8004a8a:	6026      	str	r6, [r4, #0]
 8004a8c:	60a5      	str	r5, [r4, #8]
 8004a8e:	463e      	mov	r6, r7
 8004a90:	42be      	cmp	r6, r7
 8004a92:	d900      	bls.n	8004a96 <__ssputs_r+0x86>
 8004a94:	463e      	mov	r6, r7
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	4632      	mov	r2, r6
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	f000 fab6 	bl	800500c <memmove>
 8004aa0:	68a3      	ldr	r3, [r4, #8]
 8004aa2:	1b9b      	subs	r3, r3, r6
 8004aa4:	60a3      	str	r3, [r4, #8]
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	4433      	add	r3, r6
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	2000      	movs	r0, #0
 8004aae:	e7db      	b.n	8004a68 <__ssputs_r+0x58>
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	f000 fba5 	bl	8005200 <_realloc_r>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1e1      	bne.n	8004a80 <__ssputs_r+0x70>
 8004abc:	6921      	ldr	r1, [r4, #16]
 8004abe:	4650      	mov	r0, sl
 8004ac0:	f000 fabe 	bl	8005040 <_free_r>
 8004ac4:	e7c7      	b.n	8004a56 <__ssputs_r+0x46>
	...

08004ac8 <_svfiprintf_r>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	4698      	mov	r8, r3
 8004ace:	898b      	ldrh	r3, [r1, #12]
 8004ad0:	061b      	lsls	r3, r3, #24
 8004ad2:	b09d      	sub	sp, #116	; 0x74
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	d50e      	bpl.n	8004afa <_svfiprintf_r+0x32>
 8004adc:	690b      	ldr	r3, [r1, #16]
 8004ade:	b963      	cbnz	r3, 8004afa <_svfiprintf_r+0x32>
 8004ae0:	2140      	movs	r1, #64	; 0x40
 8004ae2:	f000 fb19 	bl	8005118 <_malloc_r>
 8004ae6:	6028      	str	r0, [r5, #0]
 8004ae8:	6128      	str	r0, [r5, #16]
 8004aea:	b920      	cbnz	r0, 8004af6 <_svfiprintf_r+0x2e>
 8004aec:	230c      	movs	r3, #12
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	e0d1      	b.n	8004c9a <_svfiprintf_r+0x1d2>
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	616b      	str	r3, [r5, #20]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9309      	str	r3, [sp, #36]	; 0x24
 8004afe:	2320      	movs	r3, #32
 8004b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b08:	2330      	movs	r3, #48	; 0x30
 8004b0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004cb4 <_svfiprintf_r+0x1ec>
 8004b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b12:	f04f 0901 	mov.w	r9, #1
 8004b16:	4623      	mov	r3, r4
 8004b18:	469a      	mov	sl, r3
 8004b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b1e:	b10a      	cbz	r2, 8004b24 <_svfiprintf_r+0x5c>
 8004b20:	2a25      	cmp	r2, #37	; 0x25
 8004b22:	d1f9      	bne.n	8004b18 <_svfiprintf_r+0x50>
 8004b24:	ebba 0b04 	subs.w	fp, sl, r4
 8004b28:	d00b      	beq.n	8004b42 <_svfiprintf_r+0x7a>
 8004b2a:	465b      	mov	r3, fp
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	4629      	mov	r1, r5
 8004b30:	4638      	mov	r0, r7
 8004b32:	f7ff ff6d 	bl	8004a10 <__ssputs_r>
 8004b36:	3001      	adds	r0, #1
 8004b38:	f000 80aa 	beq.w	8004c90 <_svfiprintf_r+0x1c8>
 8004b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b3e:	445a      	add	r2, fp
 8004b40:	9209      	str	r2, [sp, #36]	; 0x24
 8004b42:	f89a 3000 	ldrb.w	r3, [sl]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80a2 	beq.w	8004c90 <_svfiprintf_r+0x1c8>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b56:	f10a 0a01 	add.w	sl, sl, #1
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	9307      	str	r3, [sp, #28]
 8004b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b62:	931a      	str	r3, [sp, #104]	; 0x68
 8004b64:	4654      	mov	r4, sl
 8004b66:	2205      	movs	r2, #5
 8004b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b6c:	4851      	ldr	r0, [pc, #324]	; (8004cb4 <_svfiprintf_r+0x1ec>)
 8004b6e:	f7fb fb3f 	bl	80001f0 <memchr>
 8004b72:	9a04      	ldr	r2, [sp, #16]
 8004b74:	b9d8      	cbnz	r0, 8004bae <_svfiprintf_r+0xe6>
 8004b76:	06d0      	lsls	r0, r2, #27
 8004b78:	bf44      	itt	mi
 8004b7a:	2320      	movmi	r3, #32
 8004b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b80:	0711      	lsls	r1, r2, #28
 8004b82:	bf44      	itt	mi
 8004b84:	232b      	movmi	r3, #43	; 0x2b
 8004b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b90:	d015      	beq.n	8004bbe <_svfiprintf_r+0xf6>
 8004b92:	9a07      	ldr	r2, [sp, #28]
 8004b94:	4654      	mov	r4, sl
 8004b96:	2000      	movs	r0, #0
 8004b98:	f04f 0c0a 	mov.w	ip, #10
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ba2:	3b30      	subs	r3, #48	; 0x30
 8004ba4:	2b09      	cmp	r3, #9
 8004ba6:	d94e      	bls.n	8004c46 <_svfiprintf_r+0x17e>
 8004ba8:	b1b0      	cbz	r0, 8004bd8 <_svfiprintf_r+0x110>
 8004baa:	9207      	str	r2, [sp, #28]
 8004bac:	e014      	b.n	8004bd8 <_svfiprintf_r+0x110>
 8004bae:	eba0 0308 	sub.w	r3, r0, r8
 8004bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	46a2      	mov	sl, r4
 8004bbc:	e7d2      	b.n	8004b64 <_svfiprintf_r+0x9c>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	1d19      	adds	r1, r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	9103      	str	r1, [sp, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bfbb      	ittet	lt
 8004bca:	425b      	neglt	r3, r3
 8004bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8004bd0:	9307      	strge	r3, [sp, #28]
 8004bd2:	9307      	strlt	r3, [sp, #28]
 8004bd4:	bfb8      	it	lt
 8004bd6:	9204      	strlt	r2, [sp, #16]
 8004bd8:	7823      	ldrb	r3, [r4, #0]
 8004bda:	2b2e      	cmp	r3, #46	; 0x2e
 8004bdc:	d10c      	bne.n	8004bf8 <_svfiprintf_r+0x130>
 8004bde:	7863      	ldrb	r3, [r4, #1]
 8004be0:	2b2a      	cmp	r3, #42	; 0x2a
 8004be2:	d135      	bne.n	8004c50 <_svfiprintf_r+0x188>
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	9203      	str	r2, [sp, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bfb8      	it	lt
 8004bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bf4:	3402      	adds	r4, #2
 8004bf6:	9305      	str	r3, [sp, #20]
 8004bf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cc4 <_svfiprintf_r+0x1fc>
 8004bfc:	7821      	ldrb	r1, [r4, #0]
 8004bfe:	2203      	movs	r2, #3
 8004c00:	4650      	mov	r0, sl
 8004c02:	f7fb faf5 	bl	80001f0 <memchr>
 8004c06:	b140      	cbz	r0, 8004c1a <_svfiprintf_r+0x152>
 8004c08:	2340      	movs	r3, #64	; 0x40
 8004c0a:	eba0 000a 	sub.w	r0, r0, sl
 8004c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c12:	9b04      	ldr	r3, [sp, #16]
 8004c14:	4303      	orrs	r3, r0
 8004c16:	3401      	adds	r4, #1
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c1e:	4826      	ldr	r0, [pc, #152]	; (8004cb8 <_svfiprintf_r+0x1f0>)
 8004c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c24:	2206      	movs	r2, #6
 8004c26:	f7fb fae3 	bl	80001f0 <memchr>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d038      	beq.n	8004ca0 <_svfiprintf_r+0x1d8>
 8004c2e:	4b23      	ldr	r3, [pc, #140]	; (8004cbc <_svfiprintf_r+0x1f4>)
 8004c30:	bb1b      	cbnz	r3, 8004c7a <_svfiprintf_r+0x1b2>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	3307      	adds	r3, #7
 8004c36:	f023 0307 	bic.w	r3, r3, #7
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	9303      	str	r3, [sp, #12]
 8004c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c40:	4433      	add	r3, r6
 8004c42:	9309      	str	r3, [sp, #36]	; 0x24
 8004c44:	e767      	b.n	8004b16 <_svfiprintf_r+0x4e>
 8004c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	e7a5      	b.n	8004b9c <_svfiprintf_r+0xd4>
 8004c50:	2300      	movs	r3, #0
 8004c52:	3401      	adds	r4, #1
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	4619      	mov	r1, r3
 8004c58:	f04f 0c0a 	mov.w	ip, #10
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c62:	3a30      	subs	r2, #48	; 0x30
 8004c64:	2a09      	cmp	r2, #9
 8004c66:	d903      	bls.n	8004c70 <_svfiprintf_r+0x1a8>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0c5      	beq.n	8004bf8 <_svfiprintf_r+0x130>
 8004c6c:	9105      	str	r1, [sp, #20]
 8004c6e:	e7c3      	b.n	8004bf8 <_svfiprintf_r+0x130>
 8004c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c74:	4604      	mov	r4, r0
 8004c76:	2301      	movs	r3, #1
 8004c78:	e7f0      	b.n	8004c5c <_svfiprintf_r+0x194>
 8004c7a:	ab03      	add	r3, sp, #12
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	462a      	mov	r2, r5
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <_svfiprintf_r+0x1f8>)
 8004c82:	a904      	add	r1, sp, #16
 8004c84:	4638      	mov	r0, r7
 8004c86:	f3af 8000 	nop.w
 8004c8a:	1c42      	adds	r2, r0, #1
 8004c8c:	4606      	mov	r6, r0
 8004c8e:	d1d6      	bne.n	8004c3e <_svfiprintf_r+0x176>
 8004c90:	89ab      	ldrh	r3, [r5, #12]
 8004c92:	065b      	lsls	r3, r3, #25
 8004c94:	f53f af2c 	bmi.w	8004af0 <_svfiprintf_r+0x28>
 8004c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c9a:	b01d      	add	sp, #116	; 0x74
 8004c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca0:	ab03      	add	r3, sp, #12
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <_svfiprintf_r+0x1f8>)
 8004ca8:	a904      	add	r1, sp, #16
 8004caa:	4638      	mov	r0, r7
 8004cac:	f000 f87a 	bl	8004da4 <_printf_i>
 8004cb0:	e7eb      	b.n	8004c8a <_svfiprintf_r+0x1c2>
 8004cb2:	bf00      	nop
 8004cb4:	08005348 	.word	0x08005348
 8004cb8:	08005352 	.word	0x08005352
 8004cbc:	00000000 	.word	0x00000000
 8004cc0:	08004a11 	.word	0x08004a11
 8004cc4:	0800534e 	.word	0x0800534e

08004cc8 <_printf_common>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	4616      	mov	r6, r2
 8004cce:	4699      	mov	r9, r3
 8004cd0:	688a      	ldr	r2, [r1, #8]
 8004cd2:	690b      	ldr	r3, [r1, #16]
 8004cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	bfb8      	it	lt
 8004cdc:	4613      	movlt	r3, r2
 8004cde:	6033      	str	r3, [r6, #0]
 8004ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	b10a      	cbz	r2, 8004cee <_printf_common+0x26>
 8004cea:	3301      	adds	r3, #1
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	0699      	lsls	r1, r3, #26
 8004cf2:	bf42      	ittt	mi
 8004cf4:	6833      	ldrmi	r3, [r6, #0]
 8004cf6:	3302      	addmi	r3, #2
 8004cf8:	6033      	strmi	r3, [r6, #0]
 8004cfa:	6825      	ldr	r5, [r4, #0]
 8004cfc:	f015 0506 	ands.w	r5, r5, #6
 8004d00:	d106      	bne.n	8004d10 <_printf_common+0x48>
 8004d02:	f104 0a19 	add.w	sl, r4, #25
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	6832      	ldr	r2, [r6, #0]
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dc26      	bgt.n	8004d5e <_printf_common+0x96>
 8004d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d14:	1e13      	subs	r3, r2, #0
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	bf18      	it	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	0692      	lsls	r2, r2, #26
 8004d1e:	d42b      	bmi.n	8004d78 <_printf_common+0xb0>
 8004d20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d24:	4649      	mov	r1, r9
 8004d26:	4638      	mov	r0, r7
 8004d28:	47c0      	blx	r8
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d01e      	beq.n	8004d6c <_printf_common+0xa4>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	68e5      	ldr	r5, [r4, #12]
 8004d32:	6832      	ldr	r2, [r6, #0]
 8004d34:	f003 0306 	and.w	r3, r3, #6
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	bf08      	it	eq
 8004d3c:	1aad      	subeq	r5, r5, r2
 8004d3e:	68a3      	ldr	r3, [r4, #8]
 8004d40:	6922      	ldr	r2, [r4, #16]
 8004d42:	bf0c      	ite	eq
 8004d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d48:	2500      	movne	r5, #0
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bfc4      	itt	gt
 8004d4e:	1a9b      	subgt	r3, r3, r2
 8004d50:	18ed      	addgt	r5, r5, r3
 8004d52:	2600      	movs	r6, #0
 8004d54:	341a      	adds	r4, #26
 8004d56:	42b5      	cmp	r5, r6
 8004d58:	d11a      	bne.n	8004d90 <_printf_common+0xc8>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e008      	b.n	8004d70 <_printf_common+0xa8>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4652      	mov	r2, sl
 8004d62:	4649      	mov	r1, r9
 8004d64:	4638      	mov	r0, r7
 8004d66:	47c0      	blx	r8
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d103      	bne.n	8004d74 <_printf_common+0xac>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d74:	3501      	adds	r5, #1
 8004d76:	e7c6      	b.n	8004d06 <_printf_common+0x3e>
 8004d78:	18e1      	adds	r1, r4, r3
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	2030      	movs	r0, #48	; 0x30
 8004d7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d82:	4422      	add	r2, r4
 8004d84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	e7c7      	b.n	8004d20 <_printf_common+0x58>
 8004d90:	2301      	movs	r3, #1
 8004d92:	4622      	mov	r2, r4
 8004d94:	4649      	mov	r1, r9
 8004d96:	4638      	mov	r0, r7
 8004d98:	47c0      	blx	r8
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d0e6      	beq.n	8004d6c <_printf_common+0xa4>
 8004d9e:	3601      	adds	r6, #1
 8004da0:	e7d9      	b.n	8004d56 <_printf_common+0x8e>
	...

08004da4 <_printf_i>:
 8004da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	7e0f      	ldrb	r7, [r1, #24]
 8004daa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dac:	2f78      	cmp	r7, #120	; 0x78
 8004dae:	4691      	mov	r9, r2
 8004db0:	4680      	mov	r8, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	469a      	mov	sl, r3
 8004db6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dba:	d807      	bhi.n	8004dcc <_printf_i+0x28>
 8004dbc:	2f62      	cmp	r7, #98	; 0x62
 8004dbe:	d80a      	bhi.n	8004dd6 <_printf_i+0x32>
 8004dc0:	2f00      	cmp	r7, #0
 8004dc2:	f000 80d8 	beq.w	8004f76 <_printf_i+0x1d2>
 8004dc6:	2f58      	cmp	r7, #88	; 0x58
 8004dc8:	f000 80a3 	beq.w	8004f12 <_printf_i+0x16e>
 8004dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dd4:	e03a      	b.n	8004e4c <_printf_i+0xa8>
 8004dd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dda:	2b15      	cmp	r3, #21
 8004ddc:	d8f6      	bhi.n	8004dcc <_printf_i+0x28>
 8004dde:	a101      	add	r1, pc, #4	; (adr r1, 8004de4 <_printf_i+0x40>)
 8004de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004de4:	08004e3d 	.word	0x08004e3d
 8004de8:	08004e51 	.word	0x08004e51
 8004dec:	08004dcd 	.word	0x08004dcd
 8004df0:	08004dcd 	.word	0x08004dcd
 8004df4:	08004dcd 	.word	0x08004dcd
 8004df8:	08004dcd 	.word	0x08004dcd
 8004dfc:	08004e51 	.word	0x08004e51
 8004e00:	08004dcd 	.word	0x08004dcd
 8004e04:	08004dcd 	.word	0x08004dcd
 8004e08:	08004dcd 	.word	0x08004dcd
 8004e0c:	08004dcd 	.word	0x08004dcd
 8004e10:	08004f5d 	.word	0x08004f5d
 8004e14:	08004e81 	.word	0x08004e81
 8004e18:	08004f3f 	.word	0x08004f3f
 8004e1c:	08004dcd 	.word	0x08004dcd
 8004e20:	08004dcd 	.word	0x08004dcd
 8004e24:	08004f7f 	.word	0x08004f7f
 8004e28:	08004dcd 	.word	0x08004dcd
 8004e2c:	08004e81 	.word	0x08004e81
 8004e30:	08004dcd 	.word	0x08004dcd
 8004e34:	08004dcd 	.word	0x08004dcd
 8004e38:	08004f47 	.word	0x08004f47
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	602a      	str	r2, [r5, #0]
 8004e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0a3      	b.n	8004f98 <_printf_i+0x1f4>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	6829      	ldr	r1, [r5, #0]
 8004e54:	0606      	lsls	r6, r0, #24
 8004e56:	f101 0304 	add.w	r3, r1, #4
 8004e5a:	d50a      	bpl.n	8004e72 <_printf_i+0xce>
 8004e5c:	680e      	ldr	r6, [r1, #0]
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	2e00      	cmp	r6, #0
 8004e62:	da03      	bge.n	8004e6c <_printf_i+0xc8>
 8004e64:	232d      	movs	r3, #45	; 0x2d
 8004e66:	4276      	negs	r6, r6
 8004e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6c:	485e      	ldr	r0, [pc, #376]	; (8004fe8 <_printf_i+0x244>)
 8004e6e:	230a      	movs	r3, #10
 8004e70:	e019      	b.n	8004ea6 <_printf_i+0x102>
 8004e72:	680e      	ldr	r6, [r1, #0]
 8004e74:	602b      	str	r3, [r5, #0]
 8004e76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e7a:	bf18      	it	ne
 8004e7c:	b236      	sxthne	r6, r6
 8004e7e:	e7ef      	b.n	8004e60 <_printf_i+0xbc>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	6820      	ldr	r0, [r4, #0]
 8004e84:	1d19      	adds	r1, r3, #4
 8004e86:	6029      	str	r1, [r5, #0]
 8004e88:	0601      	lsls	r1, r0, #24
 8004e8a:	d501      	bpl.n	8004e90 <_printf_i+0xec>
 8004e8c:	681e      	ldr	r6, [r3, #0]
 8004e8e:	e002      	b.n	8004e96 <_printf_i+0xf2>
 8004e90:	0646      	lsls	r6, r0, #25
 8004e92:	d5fb      	bpl.n	8004e8c <_printf_i+0xe8>
 8004e94:	881e      	ldrh	r6, [r3, #0]
 8004e96:	4854      	ldr	r0, [pc, #336]	; (8004fe8 <_printf_i+0x244>)
 8004e98:	2f6f      	cmp	r7, #111	; 0x6f
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2308      	moveq	r3, #8
 8004e9e:	230a      	movne	r3, #10
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ea6:	6865      	ldr	r5, [r4, #4]
 8004ea8:	60a5      	str	r5, [r4, #8]
 8004eaa:	2d00      	cmp	r5, #0
 8004eac:	bfa2      	ittt	ge
 8004eae:	6821      	ldrge	r1, [r4, #0]
 8004eb0:	f021 0104 	bicge.w	r1, r1, #4
 8004eb4:	6021      	strge	r1, [r4, #0]
 8004eb6:	b90e      	cbnz	r6, 8004ebc <_printf_i+0x118>
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	d04d      	beq.n	8004f58 <_printf_i+0x1b4>
 8004ebc:	4615      	mov	r5, r2
 8004ebe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ec2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ec6:	5dc7      	ldrb	r7, [r0, r7]
 8004ec8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ecc:	4637      	mov	r7, r6
 8004ece:	42bb      	cmp	r3, r7
 8004ed0:	460e      	mov	r6, r1
 8004ed2:	d9f4      	bls.n	8004ebe <_printf_i+0x11a>
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d10b      	bne.n	8004ef0 <_printf_i+0x14c>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	07de      	lsls	r6, r3, #31
 8004edc:	d508      	bpl.n	8004ef0 <_printf_i+0x14c>
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	6861      	ldr	r1, [r4, #4]
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	bfde      	ittt	le
 8004ee6:	2330      	movle	r3, #48	; 0x30
 8004ee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ef0:	1b52      	subs	r2, r2, r5
 8004ef2:	6122      	str	r2, [r4, #16]
 8004ef4:	f8cd a000 	str.w	sl, [sp]
 8004ef8:	464b      	mov	r3, r9
 8004efa:	aa03      	add	r2, sp, #12
 8004efc:	4621      	mov	r1, r4
 8004efe:	4640      	mov	r0, r8
 8004f00:	f7ff fee2 	bl	8004cc8 <_printf_common>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d14c      	bne.n	8004fa2 <_printf_i+0x1fe>
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	b004      	add	sp, #16
 8004f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f12:	4835      	ldr	r0, [pc, #212]	; (8004fe8 <_printf_i+0x244>)
 8004f14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f18:	6829      	ldr	r1, [r5, #0]
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f20:	6029      	str	r1, [r5, #0]
 8004f22:	061d      	lsls	r5, r3, #24
 8004f24:	d514      	bpl.n	8004f50 <_printf_i+0x1ac>
 8004f26:	07df      	lsls	r7, r3, #31
 8004f28:	bf44      	itt	mi
 8004f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f2e:	6023      	strmi	r3, [r4, #0]
 8004f30:	b91e      	cbnz	r6, 8004f3a <_printf_i+0x196>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f023 0320 	bic.w	r3, r3, #32
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	e7b0      	b.n	8004ea0 <_printf_i+0xfc>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f043 0320 	orr.w	r3, r3, #32
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	2378      	movs	r3, #120	; 0x78
 8004f48:	4828      	ldr	r0, [pc, #160]	; (8004fec <_printf_i+0x248>)
 8004f4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f4e:	e7e3      	b.n	8004f18 <_printf_i+0x174>
 8004f50:	0659      	lsls	r1, r3, #25
 8004f52:	bf48      	it	mi
 8004f54:	b2b6      	uxthmi	r6, r6
 8004f56:	e7e6      	b.n	8004f26 <_printf_i+0x182>
 8004f58:	4615      	mov	r5, r2
 8004f5a:	e7bb      	b.n	8004ed4 <_printf_i+0x130>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	6826      	ldr	r6, [r4, #0]
 8004f60:	6961      	ldr	r1, [r4, #20]
 8004f62:	1d18      	adds	r0, r3, #4
 8004f64:	6028      	str	r0, [r5, #0]
 8004f66:	0635      	lsls	r5, r6, #24
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	d501      	bpl.n	8004f70 <_printf_i+0x1cc>
 8004f6c:	6019      	str	r1, [r3, #0]
 8004f6e:	e002      	b.n	8004f76 <_printf_i+0x1d2>
 8004f70:	0670      	lsls	r0, r6, #25
 8004f72:	d5fb      	bpl.n	8004f6c <_printf_i+0x1c8>
 8004f74:	8019      	strh	r1, [r3, #0]
 8004f76:	2300      	movs	r3, #0
 8004f78:	6123      	str	r3, [r4, #16]
 8004f7a:	4615      	mov	r5, r2
 8004f7c:	e7ba      	b.n	8004ef4 <_printf_i+0x150>
 8004f7e:	682b      	ldr	r3, [r5, #0]
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	602a      	str	r2, [r5, #0]
 8004f84:	681d      	ldr	r5, [r3, #0]
 8004f86:	6862      	ldr	r2, [r4, #4]
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f7fb f930 	bl	80001f0 <memchr>
 8004f90:	b108      	cbz	r0, 8004f96 <_printf_i+0x1f2>
 8004f92:	1b40      	subs	r0, r0, r5
 8004f94:	6060      	str	r0, [r4, #4]
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa0:	e7a8      	b.n	8004ef4 <_printf_i+0x150>
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	4640      	mov	r0, r8
 8004faa:	47d0      	blx	sl
 8004fac:	3001      	adds	r0, #1
 8004fae:	d0ab      	beq.n	8004f08 <_printf_i+0x164>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	079b      	lsls	r3, r3, #30
 8004fb4:	d413      	bmi.n	8004fde <_printf_i+0x23a>
 8004fb6:	68e0      	ldr	r0, [r4, #12]
 8004fb8:	9b03      	ldr	r3, [sp, #12]
 8004fba:	4298      	cmp	r0, r3
 8004fbc:	bfb8      	it	lt
 8004fbe:	4618      	movlt	r0, r3
 8004fc0:	e7a4      	b.n	8004f0c <_printf_i+0x168>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4632      	mov	r2, r6
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	4640      	mov	r0, r8
 8004fca:	47d0      	blx	sl
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d09b      	beq.n	8004f08 <_printf_i+0x164>
 8004fd0:	3501      	adds	r5, #1
 8004fd2:	68e3      	ldr	r3, [r4, #12]
 8004fd4:	9903      	ldr	r1, [sp, #12]
 8004fd6:	1a5b      	subs	r3, r3, r1
 8004fd8:	42ab      	cmp	r3, r5
 8004fda:	dcf2      	bgt.n	8004fc2 <_printf_i+0x21e>
 8004fdc:	e7eb      	b.n	8004fb6 <_printf_i+0x212>
 8004fde:	2500      	movs	r5, #0
 8004fe0:	f104 0619 	add.w	r6, r4, #25
 8004fe4:	e7f5      	b.n	8004fd2 <_printf_i+0x22e>
 8004fe6:	bf00      	nop
 8004fe8:	08005359 	.word	0x08005359
 8004fec:	0800536a 	.word	0x0800536a

08004ff0 <memcpy>:
 8004ff0:	440a      	add	r2, r1
 8004ff2:	4291      	cmp	r1, r2
 8004ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ff8:	d100      	bne.n	8004ffc <memcpy+0xc>
 8004ffa:	4770      	bx	lr
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005006:	4291      	cmp	r1, r2
 8005008:	d1f9      	bne.n	8004ffe <memcpy+0xe>
 800500a:	bd10      	pop	{r4, pc}

0800500c <memmove>:
 800500c:	4288      	cmp	r0, r1
 800500e:	b510      	push	{r4, lr}
 8005010:	eb01 0402 	add.w	r4, r1, r2
 8005014:	d902      	bls.n	800501c <memmove+0x10>
 8005016:	4284      	cmp	r4, r0
 8005018:	4623      	mov	r3, r4
 800501a:	d807      	bhi.n	800502c <memmove+0x20>
 800501c:	1e43      	subs	r3, r0, #1
 800501e:	42a1      	cmp	r1, r4
 8005020:	d008      	beq.n	8005034 <memmove+0x28>
 8005022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800502a:	e7f8      	b.n	800501e <memmove+0x12>
 800502c:	4402      	add	r2, r0
 800502e:	4601      	mov	r1, r0
 8005030:	428a      	cmp	r2, r1
 8005032:	d100      	bne.n	8005036 <memmove+0x2a>
 8005034:	bd10      	pop	{r4, pc}
 8005036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800503a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800503e:	e7f7      	b.n	8005030 <memmove+0x24>

08005040 <_free_r>:
 8005040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005042:	2900      	cmp	r1, #0
 8005044:	d044      	beq.n	80050d0 <_free_r+0x90>
 8005046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504a:	9001      	str	r0, [sp, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f1a1 0404 	sub.w	r4, r1, #4
 8005052:	bfb8      	it	lt
 8005054:	18e4      	addlt	r4, r4, r3
 8005056:	f000 f913 	bl	8005280 <__malloc_lock>
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <_free_r+0x94>)
 800505c:	9801      	ldr	r0, [sp, #4]
 800505e:	6813      	ldr	r3, [r2, #0]
 8005060:	b933      	cbnz	r3, 8005070 <_free_r+0x30>
 8005062:	6063      	str	r3, [r4, #4]
 8005064:	6014      	str	r4, [r2, #0]
 8005066:	b003      	add	sp, #12
 8005068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506c:	f000 b90e 	b.w	800528c <__malloc_unlock>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d908      	bls.n	8005086 <_free_r+0x46>
 8005074:	6825      	ldr	r5, [r4, #0]
 8005076:	1961      	adds	r1, r4, r5
 8005078:	428b      	cmp	r3, r1
 800507a:	bf01      	itttt	eq
 800507c:	6819      	ldreq	r1, [r3, #0]
 800507e:	685b      	ldreq	r3, [r3, #4]
 8005080:	1949      	addeq	r1, r1, r5
 8005082:	6021      	streq	r1, [r4, #0]
 8005084:	e7ed      	b.n	8005062 <_free_r+0x22>
 8005086:	461a      	mov	r2, r3
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b10b      	cbz	r3, 8005090 <_free_r+0x50>
 800508c:	42a3      	cmp	r3, r4
 800508e:	d9fa      	bls.n	8005086 <_free_r+0x46>
 8005090:	6811      	ldr	r1, [r2, #0]
 8005092:	1855      	adds	r5, r2, r1
 8005094:	42a5      	cmp	r5, r4
 8005096:	d10b      	bne.n	80050b0 <_free_r+0x70>
 8005098:	6824      	ldr	r4, [r4, #0]
 800509a:	4421      	add	r1, r4
 800509c:	1854      	adds	r4, r2, r1
 800509e:	42a3      	cmp	r3, r4
 80050a0:	6011      	str	r1, [r2, #0]
 80050a2:	d1e0      	bne.n	8005066 <_free_r+0x26>
 80050a4:	681c      	ldr	r4, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	6053      	str	r3, [r2, #4]
 80050aa:	4421      	add	r1, r4
 80050ac:	6011      	str	r1, [r2, #0]
 80050ae:	e7da      	b.n	8005066 <_free_r+0x26>
 80050b0:	d902      	bls.n	80050b8 <_free_r+0x78>
 80050b2:	230c      	movs	r3, #12
 80050b4:	6003      	str	r3, [r0, #0]
 80050b6:	e7d6      	b.n	8005066 <_free_r+0x26>
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	1961      	adds	r1, r4, r5
 80050bc:	428b      	cmp	r3, r1
 80050be:	bf04      	itt	eq
 80050c0:	6819      	ldreq	r1, [r3, #0]
 80050c2:	685b      	ldreq	r3, [r3, #4]
 80050c4:	6063      	str	r3, [r4, #4]
 80050c6:	bf04      	itt	eq
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	6054      	str	r4, [r2, #4]
 80050ce:	e7ca      	b.n	8005066 <_free_r+0x26>
 80050d0:	b003      	add	sp, #12
 80050d2:	bd30      	pop	{r4, r5, pc}
 80050d4:	200017d8 	.word	0x200017d8

080050d8 <sbrk_aligned>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4e0e      	ldr	r6, [pc, #56]	; (8005114 <sbrk_aligned+0x3c>)
 80050dc:	460c      	mov	r4, r1
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	4605      	mov	r5, r0
 80050e2:	b911      	cbnz	r1, 80050ea <sbrk_aligned+0x12>
 80050e4:	f000 f8bc 	bl	8005260 <_sbrk_r>
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 f8b7 	bl	8005260 <_sbrk_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d00a      	beq.n	800510c <sbrk_aligned+0x34>
 80050f6:	1cc4      	adds	r4, r0, #3
 80050f8:	f024 0403 	bic.w	r4, r4, #3
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d007      	beq.n	8005110 <sbrk_aligned+0x38>
 8005100:	1a21      	subs	r1, r4, r0
 8005102:	4628      	mov	r0, r5
 8005104:	f000 f8ac 	bl	8005260 <_sbrk_r>
 8005108:	3001      	adds	r0, #1
 800510a:	d101      	bne.n	8005110 <sbrk_aligned+0x38>
 800510c:	f04f 34ff 	mov.w	r4, #4294967295
 8005110:	4620      	mov	r0, r4
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	200017dc 	.word	0x200017dc

08005118 <_malloc_r>:
 8005118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511c:	1ccd      	adds	r5, r1, #3
 800511e:	f025 0503 	bic.w	r5, r5, #3
 8005122:	3508      	adds	r5, #8
 8005124:	2d0c      	cmp	r5, #12
 8005126:	bf38      	it	cc
 8005128:	250c      	movcc	r5, #12
 800512a:	2d00      	cmp	r5, #0
 800512c:	4607      	mov	r7, r0
 800512e:	db01      	blt.n	8005134 <_malloc_r+0x1c>
 8005130:	42a9      	cmp	r1, r5
 8005132:	d905      	bls.n	8005140 <_malloc_r+0x28>
 8005134:	230c      	movs	r3, #12
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	2600      	movs	r6, #0
 800513a:	4630      	mov	r0, r6
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	4e2e      	ldr	r6, [pc, #184]	; (80051fc <_malloc_r+0xe4>)
 8005142:	f000 f89d 	bl	8005280 <__malloc_lock>
 8005146:	6833      	ldr	r3, [r6, #0]
 8005148:	461c      	mov	r4, r3
 800514a:	bb34      	cbnz	r4, 800519a <_malloc_r+0x82>
 800514c:	4629      	mov	r1, r5
 800514e:	4638      	mov	r0, r7
 8005150:	f7ff ffc2 	bl	80050d8 <sbrk_aligned>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	4604      	mov	r4, r0
 8005158:	d14d      	bne.n	80051f6 <_malloc_r+0xde>
 800515a:	6834      	ldr	r4, [r6, #0]
 800515c:	4626      	mov	r6, r4
 800515e:	2e00      	cmp	r6, #0
 8005160:	d140      	bne.n	80051e4 <_malloc_r+0xcc>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	4631      	mov	r1, r6
 8005166:	4638      	mov	r0, r7
 8005168:	eb04 0803 	add.w	r8, r4, r3
 800516c:	f000 f878 	bl	8005260 <_sbrk_r>
 8005170:	4580      	cmp	r8, r0
 8005172:	d13a      	bne.n	80051ea <_malloc_r+0xd2>
 8005174:	6821      	ldr	r1, [r4, #0]
 8005176:	3503      	adds	r5, #3
 8005178:	1a6d      	subs	r5, r5, r1
 800517a:	f025 0503 	bic.w	r5, r5, #3
 800517e:	3508      	adds	r5, #8
 8005180:	2d0c      	cmp	r5, #12
 8005182:	bf38      	it	cc
 8005184:	250c      	movcc	r5, #12
 8005186:	4629      	mov	r1, r5
 8005188:	4638      	mov	r0, r7
 800518a:	f7ff ffa5 	bl	80050d8 <sbrk_aligned>
 800518e:	3001      	adds	r0, #1
 8005190:	d02b      	beq.n	80051ea <_malloc_r+0xd2>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	442b      	add	r3, r5
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	e00e      	b.n	80051b8 <_malloc_r+0xa0>
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	1b52      	subs	r2, r2, r5
 800519e:	d41e      	bmi.n	80051de <_malloc_r+0xc6>
 80051a0:	2a0b      	cmp	r2, #11
 80051a2:	d916      	bls.n	80051d2 <_malloc_r+0xba>
 80051a4:	1961      	adds	r1, r4, r5
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	6025      	str	r5, [r4, #0]
 80051aa:	bf18      	it	ne
 80051ac:	6059      	strne	r1, [r3, #4]
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	bf08      	it	eq
 80051b2:	6031      	streq	r1, [r6, #0]
 80051b4:	5162      	str	r2, [r4, r5]
 80051b6:	604b      	str	r3, [r1, #4]
 80051b8:	4638      	mov	r0, r7
 80051ba:	f104 060b 	add.w	r6, r4, #11
 80051be:	f000 f865 	bl	800528c <__malloc_unlock>
 80051c2:	f026 0607 	bic.w	r6, r6, #7
 80051c6:	1d23      	adds	r3, r4, #4
 80051c8:	1af2      	subs	r2, r6, r3
 80051ca:	d0b6      	beq.n	800513a <_malloc_r+0x22>
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	50a3      	str	r3, [r4, r2]
 80051d0:	e7b3      	b.n	800513a <_malloc_r+0x22>
 80051d2:	6862      	ldr	r2, [r4, #4]
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	bf0c      	ite	eq
 80051d8:	6032      	streq	r2, [r6, #0]
 80051da:	605a      	strne	r2, [r3, #4]
 80051dc:	e7ec      	b.n	80051b8 <_malloc_r+0xa0>
 80051de:	4623      	mov	r3, r4
 80051e0:	6864      	ldr	r4, [r4, #4]
 80051e2:	e7b2      	b.n	800514a <_malloc_r+0x32>
 80051e4:	4634      	mov	r4, r6
 80051e6:	6876      	ldr	r6, [r6, #4]
 80051e8:	e7b9      	b.n	800515e <_malloc_r+0x46>
 80051ea:	230c      	movs	r3, #12
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	4638      	mov	r0, r7
 80051f0:	f000 f84c 	bl	800528c <__malloc_unlock>
 80051f4:	e7a1      	b.n	800513a <_malloc_r+0x22>
 80051f6:	6025      	str	r5, [r4, #0]
 80051f8:	e7de      	b.n	80051b8 <_malloc_r+0xa0>
 80051fa:	bf00      	nop
 80051fc:	200017d8 	.word	0x200017d8

08005200 <_realloc_r>:
 8005200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005204:	4680      	mov	r8, r0
 8005206:	4614      	mov	r4, r2
 8005208:	460e      	mov	r6, r1
 800520a:	b921      	cbnz	r1, 8005216 <_realloc_r+0x16>
 800520c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005210:	4611      	mov	r1, r2
 8005212:	f7ff bf81 	b.w	8005118 <_malloc_r>
 8005216:	b92a      	cbnz	r2, 8005224 <_realloc_r+0x24>
 8005218:	f7ff ff12 	bl	8005040 <_free_r>
 800521c:	4625      	mov	r5, r4
 800521e:	4628      	mov	r0, r5
 8005220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005224:	f000 f838 	bl	8005298 <_malloc_usable_size_r>
 8005228:	4284      	cmp	r4, r0
 800522a:	4607      	mov	r7, r0
 800522c:	d802      	bhi.n	8005234 <_realloc_r+0x34>
 800522e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005232:	d812      	bhi.n	800525a <_realloc_r+0x5a>
 8005234:	4621      	mov	r1, r4
 8005236:	4640      	mov	r0, r8
 8005238:	f7ff ff6e 	bl	8005118 <_malloc_r>
 800523c:	4605      	mov	r5, r0
 800523e:	2800      	cmp	r0, #0
 8005240:	d0ed      	beq.n	800521e <_realloc_r+0x1e>
 8005242:	42bc      	cmp	r4, r7
 8005244:	4622      	mov	r2, r4
 8005246:	4631      	mov	r1, r6
 8005248:	bf28      	it	cs
 800524a:	463a      	movcs	r2, r7
 800524c:	f7ff fed0 	bl	8004ff0 <memcpy>
 8005250:	4631      	mov	r1, r6
 8005252:	4640      	mov	r0, r8
 8005254:	f7ff fef4 	bl	8005040 <_free_r>
 8005258:	e7e1      	b.n	800521e <_realloc_r+0x1e>
 800525a:	4635      	mov	r5, r6
 800525c:	e7df      	b.n	800521e <_realloc_r+0x1e>
	...

08005260 <_sbrk_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d06      	ldr	r5, [pc, #24]	; (800527c <_sbrk_r+0x1c>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f7fc fc4a 	bl	8001b04 <_sbrk>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_sbrk_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_sbrk_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	200017e0 	.word	0x200017e0

08005280 <__malloc_lock>:
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <__malloc_lock+0x8>)
 8005282:	f000 b811 	b.w	80052a8 <__retarget_lock_acquire_recursive>
 8005286:	bf00      	nop
 8005288:	200017e4 	.word	0x200017e4

0800528c <__malloc_unlock>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <__malloc_unlock+0x8>)
 800528e:	f000 b80c 	b.w	80052aa <__retarget_lock_release_recursive>
 8005292:	bf00      	nop
 8005294:	200017e4 	.word	0x200017e4

08005298 <_malloc_usable_size_r>:
 8005298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529c:	1f18      	subs	r0, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bfbc      	itt	lt
 80052a2:	580b      	ldrlt	r3, [r1, r0]
 80052a4:	18c0      	addlt	r0, r0, r3
 80052a6:	4770      	bx	lr

080052a8 <__retarget_lock_acquire_recursive>:
 80052a8:	4770      	bx	lr

080052aa <__retarget_lock_release_recursive>:
 80052aa:	4770      	bx	lr

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
