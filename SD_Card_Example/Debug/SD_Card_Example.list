
SD_Card_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006714  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e84  08006e84  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e8c  08006e8c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000276c  20000024  08006eb8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002790  08006eb8  00022790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e03d  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214a  00000000  00000000  0002e091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  000301e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001706d  00000000  00000000  000318c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011984  00000000  00000000  00048935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008747e  00000000  00000000  0005a2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1737  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003014  00000000  00000000  000e1788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006890 	.word	0x08006890

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08006890 	.word	0x08006890

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_15

/* SPI Chip Select */
static void SELECT(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f2:	4802      	ldr	r0, [pc, #8]	; (80004fc <SELECT+0x14>)
 80004f4:	f001 fb10 	bl	8001b18 <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020000 	.word	0x40020000

08000500 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	4802      	ldr	r0, [pc, #8]	; (8000514 <DESELECT+0x14>)
 800050c:	f001 fb04 	bl	8001b18 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020000 	.word	0x40020000

08000518 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000522:	bf00      	nop
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <SPI_TxByte+0x30>)
 8000526:	f002 faf7 	bl	8002b18 <HAL_SPI_GetState>
 800052a:	4603      	mov	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	d1f9      	bne.n	8000524 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	2201      	movs	r2, #1
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <SPI_TxByte+0x30>)
 800053a:	f002 f80f 	bl	800255c <HAL_SPI_Transmit>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000044 	.word	0x20000044

0800054c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000552:	23ff      	movs	r3, #255	; 0xff
 8000554:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 800055a:	bf00      	nop
 800055c:	4809      	ldr	r0, [pc, #36]	; (8000584 <SPI_RxByte+0x38>)
 800055e:	f002 fadb 	bl	8002b18 <HAL_SPI_GetState>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d1f9      	bne.n	800055c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000568:	1dba      	adds	r2, r7, #6
 800056a:	1df9      	adds	r1, r7, #7
 800056c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2301      	movs	r3, #1
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <SPI_RxByte+0x38>)
 8000576:	f002 f92d 	bl	80027d4 <HAL_SPI_TransmitReceive>

  return data;
 800057a:	79bb      	ldrb	r3, [r7, #6]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000044 	.word	0x20000044

08000588 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000590:	f7ff ffdc 	bl	800054c <SPI_RxByte>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	701a      	strb	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <SD_ReadyWait+0x34>)
 80005ac:	2232      	movs	r2, #50	; 0x32
 80005ae:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80005b0:	f7ff ffcc 	bl	800054c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80005b4:	f7ff ffca 	bl	800054c <SPI_RxByte>
 80005b8:	4603      	mov	r3, r0
 80005ba:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2bff      	cmp	r3, #255	; 0xff
 80005c0:	d004      	beq.n	80005cc <SD_ReadyWait+0x28>
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <SD_ReadyWait+0x34>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f3      	bne.n	80005b4 <SD_ReadyWait+0x10>

  return res;
 80005cc:	79fb      	ldrb	r3, [r7, #7]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000254e 	.word	0x2000254e

080005dc <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80005e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005e6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80005e8:	f7ff ff8a 	bl	8000500 <DESELECT>

  for(int i = 0; i < 10; i++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	e005      	b.n	80005fe <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80005f2:	20ff      	movs	r0, #255	; 0xff
 80005f4:	f7ff ff90 	bl	8000518 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	3301      	adds	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	2b09      	cmp	r3, #9
 8000602:	ddf6      	ble.n	80005f2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000604:	f7ff ff70 	bl	80004e8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800061c:	2395      	movs	r3, #149	; 0x95
 800061e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e009      	b.n	800063a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000626:	1d3a      	adds	r2, r7, #4
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff72 	bl	8000518 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3301      	adds	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2b05      	cmp	r3, #5
 800063e:	ddf2      	ble.n	8000626 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000640:	e002      	b.n	8000648 <SD_PowerOn+0x6c>
  {
    Count--;
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3b01      	subs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000648:	f7ff ff80 	bl	800054c <SPI_RxByte>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d002      	beq.n	8000658 <SD_PowerOn+0x7c>
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f4      	bne.n	8000642 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000658:	f7ff ff52 	bl	8000500 <DESELECT>
  SPI_TxByte(0XFF);
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	f7ff ff5b 	bl	8000518 <SPI_TxByte>

  PowerFlag = 1;
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <SD_PowerOn+0x94>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000041 	.word	0x20000041

08000674 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <SD_PowerOff+0x14>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	20000041 	.word	0x20000041

0800068c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <SD_CheckPower+0x14>)
 8000692:	781b      	ldrb	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000041 	.word	0x20000041

080006a4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <SD_RxDataBlock+0x68>)
 80006b0:	220a      	movs	r2, #10
 80006b2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80006b4:	f7ff ff4a 	bl	800054c <SPI_RxByte>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d104      	bne.n	80006cc <SD_RxDataBlock+0x28>
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <SD_RxDataBlock+0x68>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1f3      	bne.n	80006b4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	2bfe      	cmp	r3, #254	; 0xfe
 80006d0:	d001      	beq.n	80006d6 <SD_RxDataBlock+0x32>
    return FALSE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e016      	b.n	8000704 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff53 	bl	8000588 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff4d 	bl	8000588 <SPI_RxBytePtr>
  } while(btr -= 2);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	3b02      	subs	r3, #2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1ed      	bne.n	80006d6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80006fa:	f7ff ff27 	bl	800054c <SPI_RxByte>
  SPI_RxByte();
 80006fe:	f7ff ff25 	bl	800054c <SPI_RxByte>

  return TRUE;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000254d 	.word	0x2000254d

08000710 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000720:	f7ff ff40 	bl	80005a4 <SD_ReadyWait>
 8000724:	4603      	mov	r3, r0
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d001      	beq.n	800072e <SD_TxDataBlock+0x1e>
    return FALSE;
 800072a:	2300      	movs	r3, #0
 800072c:	e040      	b.n	80007b0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fef1 	bl	8000518 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	2bfd      	cmp	r3, #253	; 0xfd
 800073a:	d031      	beq.n	80007a0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fee5 	bl	8000518 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fede 	bl	8000518 <SPI_TxByte>
    } while (--wc);
 800075c:	7bbb      	ldrb	r3, [r7, #14]
 800075e:	3b01      	subs	r3, #1
 8000760:	73bb      	strb	r3, [r7, #14]
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1eb      	bne.n	8000740 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000768:	f7ff fef0 	bl	800054c <SPI_RxByte>
    SPI_RxByte();
 800076c:	f7ff feee 	bl	800054c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000770:	e00b      	b.n	800078a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000772:	f7ff feeb 	bl	800054c <SPI_RxByte>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	2b05      	cmp	r3, #5
 8000782:	d006      	beq.n	8000792 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	3301      	adds	r3, #1
 8000788:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800078a:	7b7b      	ldrb	r3, [r7, #13]
 800078c:	2b40      	cmp	r3, #64	; 0x40
 800078e:	d9f0      	bls.n	8000772 <SD_TxDataBlock+0x62>
 8000790:	e000      	b.n	8000794 <SD_TxDataBlock+0x84>
        break;
 8000792:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000794:	bf00      	nop
 8000796:	f7ff fed9 	bl	800054c <SPI_RxByte>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0fa      	beq.n	8000796 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	f003 031f 	and.w	r3, r3, #31
 80007a6:	2b05      	cmp	r3, #5
 80007a8:	d101      	bne.n	80007ae <SD_TxDataBlock+0x9e>
    return TRUE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007c4:	f7ff feee 	bl	80005a4 <SD_ReadyWait>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2bff      	cmp	r3, #255	; 0xff
 80007cc:	d001      	beq.n	80007d2 <SD_SendCmd+0x1a>
    return 0xFF;
 80007ce:	23ff      	movs	r3, #255	; 0xff
 80007d0:	e040      	b.n	8000854 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fe9f 	bl	8000518 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	0e1b      	lsrs	r3, r3, #24
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fe99 	bl	8000518 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	0c1b      	lsrs	r3, r3, #16
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fe93 	bl	8000518 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fe8d 	bl	8000518 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe88 	bl	8000518 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b40      	cmp	r3, #64	; 0x40
 8000810:	d101      	bne.n	8000816 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000812:	2395      	movs	r3, #149	; 0x95
 8000814:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b48      	cmp	r3, #72	; 0x48
 800081a:	d101      	bne.n	8000820 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800081c:	2387      	movs	r3, #135	; 0x87
 800081e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fe78 	bl	8000518 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b4c      	cmp	r3, #76	; 0x4c
 800082c:	d101      	bne.n	8000832 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800082e:	f7ff fe8d 	bl	800054c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000832:	230a      	movs	r3, #10
 8000834:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000836:	f7ff fe89 	bl	800054c <SPI_RxByte>
 800083a:	4603      	mov	r3, r0
 800083c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800083e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da05      	bge.n	8000852 <SD_SendCmd+0x9a>
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	3b01      	subs	r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f1      	bne.n	8000836 <SD_SendCmd+0x7e>

  return res;
 8000852:	7b7b      	ldrb	r3, [r7, #13]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800086c:	2301      	movs	r3, #1
 800086e:	e0d5      	b.n	8000a1c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000870:	4b6c      	ldr	r3, [pc, #432]	; (8000a24 <SD_disk_initialize+0x1c8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <SD_disk_initialize+0x2a>
    return Stat;
 800087e:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <SD_disk_initialize+0x1c8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	e0ca      	b.n	8000a1c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000886:	f7ff fea9 	bl	80005dc <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800088a:	f7ff fe2d 	bl	80004e8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000892:	2100      	movs	r1, #0
 8000894:	2040      	movs	r0, #64	; 0x40
 8000896:	f7ff ff8f 	bl	80007b8 <SD_SendCmd>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	f040 80a5 	bne.w	80009ec <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80008a2:	4b61      	ldr	r3, [pc, #388]	; (8000a28 <SD_disk_initialize+0x1cc>)
 80008a4:	2264      	movs	r2, #100	; 0x64
 80008a6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80008ac:	2048      	movs	r0, #72	; 0x48
 80008ae:	f7ff ff83 	bl	80007b8 <SD_SendCmd>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d158      	bne.n	800096a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e00c      	b.n	80008d8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80008be:	7bfc      	ldrb	r4, [r7, #15]
 80008c0:	f7ff fe44 	bl	800054c <SPI_RxByte>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	f104 0310 	add.w	r3, r4, #16
 80008cc:	443b      	add	r3, r7
 80008ce:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	3301      	adds	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d9ef      	bls.n	80008be <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008de:	7abb      	ldrb	r3, [r7, #10]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	f040 8083 	bne.w	80009ec <SD_disk_initialize+0x190>
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	2baa      	cmp	r3, #170	; 0xaa
 80008ea:	d17f      	bne.n	80009ec <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80008ec:	2100      	movs	r1, #0
 80008ee:	2077      	movs	r0, #119	; 0x77
 80008f0:	f7ff ff62 	bl	80007b8 <SD_SendCmd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d807      	bhi.n	800090a <SD_disk_initialize+0xae>
 80008fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008fe:	2069      	movs	r0, #105	; 0x69
 8000900:	f7ff ff5a 	bl	80007b8 <SD_SendCmd>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d005      	beq.n	8000916 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <SD_disk_initialize+0x1cc>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1eb      	bne.n	80008ec <SD_disk_initialize+0x90>
 8000914:	e000      	b.n	8000918 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000916:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000918:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <SD_disk_initialize+0x1cc>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d064      	beq.n	80009ec <SD_disk_initialize+0x190>
 8000922:	2100      	movs	r1, #0
 8000924:	207a      	movs	r0, #122	; 0x7a
 8000926:	f7ff ff47 	bl	80007b8 <SD_SendCmd>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d15d      	bne.n	80009ec <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e00c      	b.n	8000950 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000936:	7bfc      	ldrb	r4, [r7, #15]
 8000938:	f7ff fe08 	bl	800054c <SPI_RxByte>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	f104 0310 	add.w	r3, r4, #16
 8000944:	443b      	add	r3, r7
 8000946:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3301      	adds	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d9ef      	bls.n	8000936 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000956:	7a3b      	ldrb	r3, [r7, #8]
 8000958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SD_disk_initialize+0x108>
 8000960:	2306      	movs	r3, #6
 8000962:	e000      	b.n	8000966 <SD_disk_initialize+0x10a>
 8000964:	2302      	movs	r3, #2
 8000966:	73bb      	strb	r3, [r7, #14]
 8000968:	e040      	b.n	80009ec <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800096a:	2100      	movs	r1, #0
 800096c:	2077      	movs	r0, #119	; 0x77
 800096e:	f7ff ff23 	bl	80007b8 <SD_SendCmd>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d808      	bhi.n	800098a <SD_disk_initialize+0x12e>
 8000978:	2100      	movs	r1, #0
 800097a:	2069      	movs	r0, #105	; 0x69
 800097c:	f7ff ff1c 	bl	80007b8 <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d801      	bhi.n	800098a <SD_disk_initialize+0x12e>
 8000986:	2302      	movs	r3, #2
 8000988:	e000      	b.n	800098c <SD_disk_initialize+0x130>
 800098a:	2301      	movs	r3, #1
 800098c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800098e:	7bbb      	ldrb	r3, [r7, #14]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d10e      	bne.n	80009b2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000994:	2100      	movs	r1, #0
 8000996:	2077      	movs	r0, #119	; 0x77
 8000998:	f7ff ff0e 	bl	80007b8 <SD_SendCmd>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d80e      	bhi.n	80009c0 <SD_disk_initialize+0x164>
 80009a2:	2100      	movs	r1, #0
 80009a4:	2069      	movs	r0, #105	; 0x69
 80009a6:	f7ff ff07 	bl	80007b8 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d107      	bne.n	80009c0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80009b0:	e00d      	b.n	80009ce <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80009b2:	2100      	movs	r1, #0
 80009b4:	2041      	movs	r0, #65	; 0x41
 80009b6:	f7ff feff 	bl	80007b8 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <SD_disk_initialize+0x1cc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1e1      	bne.n	800098e <SD_disk_initialize+0x132>
 80009ca:	e000      	b.n	80009ce <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80009cc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <SD_disk_initialize+0x1cc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <SD_disk_initialize+0x18c>
 80009d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009dc:	2050      	movs	r0, #80	; 0x50
 80009de:	f7ff feeb 	bl	80007b8 <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <SD_disk_initialize+0x1d0>)
 80009ee:	7bbb      	ldrb	r3, [r7, #14]
 80009f0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80009f2:	f7ff fd85 	bl	8000500 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80009f6:	f7ff fda9 	bl	800054c <SPI_RxByte>

  if (type)
 80009fa:	7bbb      	ldrb	r3, [r7, #14]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <SD_disk_initialize+0x1c8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f023 0301 	bic.w	r3, r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SD_disk_initialize+0x1c8>)
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e001      	b.n	8000a16 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a12:	f7ff fe2f 	bl	8000674 <SD_PowerOff>
  }

  return Stat;
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <SD_disk_initialize+0x1c8>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	2000254d 	.word	0x2000254d
 8000a2c:	20000040 	.word	0x20000040

08000a30 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e002      	b.n	8000a4a <SD_disk_status+0x1a>

  return Stat;
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SD_disk_status+0x28>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000000 	.word	0x20000000

08000a5c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SD_disk_read+0x1c>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <SD_disk_read+0x20>
    return RES_PARERR;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	e051      	b.n	8000b20 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <SD_disk_read+0xcc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e048      	b.n	8000b20 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <SD_disk_read+0xd0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	607b      	str	r3, [r7, #4]

  SELECT();
 8000aa0:	f7ff fd22 	bl	80004e8 <SELECT>

  if (count == 1)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d111      	bne.n	8000ace <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2051      	movs	r0, #81	; 0x51
 8000aae:	f7ff fe83 	bl	80007b8 <SD_SendCmd>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d129      	bne.n	8000b0c <SD_disk_read+0xb0>
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	68b8      	ldr	r0, [r7, #8]
 8000abe:	f7ff fdf1 	bl	80006a4 <SD_RxDataBlock>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d021      	beq.n	8000b0c <SD_disk_read+0xb0>
      count = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	e01e      	b.n	8000b0c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2052      	movs	r0, #82	; 0x52
 8000ad2:	f7ff fe71 	bl	80007b8 <SD_SendCmd>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d117      	bne.n	8000b0c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae0:	68b8      	ldr	r0, [r7, #8]
 8000ae2:	f7ff fddf 	bl	80006a4 <SD_RxDataBlock>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00a      	beq.n	8000b02 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000af2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1ed      	bne.n	8000adc <SD_disk_read+0x80>
 8000b00:	e000      	b.n	8000b04 <SD_disk_read+0xa8>
          break;
 8000b02:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	204c      	movs	r0, #76	; 0x4c
 8000b08:	f7ff fe56 	bl	80007b8 <SD_SendCmd>
    }
  }

  DESELECT();
 8000b0c:	f7ff fcf8 	bl	8000500 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000b10:	f7ff fd1c 	bl	800054c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf14      	ite	ne
 8000b1a:	2301      	movne	r3, #1
 8000b1c:	2300      	moveq	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000040 	.word	0x20000040

08000b30 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <SD_disk_write+0x1c>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <SD_disk_write+0x20>
    return RES_PARERR;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e06b      	b.n	8000c28 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <SD_disk_write+0x100>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e062      	b.n	8000c28 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <SD_disk_write+0x100>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000b70:	2302      	movs	r3, #2
 8000b72:	e059      	b.n	8000c28 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <SD_disk_write+0x104>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	025b      	lsls	r3, r3, #9
 8000b84:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b86:	f7ff fcaf 	bl	80004e8 <SELECT>

  if (count == 1)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d110      	bne.n	8000bb2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	2058      	movs	r0, #88	; 0x58
 8000b94:	f7ff fe10 	bl	80007b8 <SD_SendCmd>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d13a      	bne.n	8000c14 <SD_disk_write+0xe4>
 8000b9e:	21fe      	movs	r1, #254	; 0xfe
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f7ff fdb5 	bl	8000710 <SD_TxDataBlock>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d033      	beq.n	8000c14 <SD_disk_write+0xe4>
      count = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	e030      	b.n	8000c14 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <SD_disk_write+0x104>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d007      	beq.n	8000bce <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2077      	movs	r0, #119	; 0x77
 8000bc2:	f7ff fdf9 	bl	80007b8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	2057      	movs	r0, #87	; 0x57
 8000bca:	f7ff fdf5 	bl	80007b8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2059      	movs	r0, #89	; 0x59
 8000bd2:	f7ff fdf1 	bl	80007b8 <SD_SendCmd>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d11b      	bne.n	8000c14 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000bdc:	21fc      	movs	r1, #252	; 0xfc
 8000bde:	68b8      	ldr	r0, [r7, #8]
 8000be0:	f7ff fd96 	bl	8000710 <SD_TxDataBlock>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00a      	beq.n	8000c00 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bf0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1ee      	bne.n	8000bdc <SD_disk_write+0xac>
 8000bfe:	e000      	b.n	8000c02 <SD_disk_write+0xd2>
          break;
 8000c00:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000c02:	21fd      	movs	r1, #253	; 0xfd
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fd83 	bl	8000710 <SD_TxDataBlock>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000c14:	f7ff fc74 	bl	8000500 <DESELECT>
  SPI_RxByte();
 8000c18:	f7ff fc98 	bl	800054c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000040 	.word	0x20000040

08000c38 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b08b      	sub	sp, #44	; 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	603a      	str	r2, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	460b      	mov	r3, r1
 8000c46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000c52:	2304      	movs	r3, #4
 8000c54:	e11b      	b.n	8000e8e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d129      	bne.n	8000cb6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d017      	beq.n	8000c9a <SD_disk_ioctl+0x62>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	dc1f      	bgt.n	8000cae <SD_disk_ioctl+0x76>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <SD_disk_ioctl+0x40>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d00b      	beq.n	8000c8e <SD_disk_ioctl+0x56>
 8000c76:	e01a      	b.n	8000cae <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000c78:	f7ff fd08 	bl	800068c <SD_CheckPower>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000c82:	f7ff fcf7 	bl	8000674 <SD_PowerOff>
      res = RES_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c8c:	e0fd      	b.n	8000e8a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000c8e:	f7ff fca5 	bl	80005dc <SD_PowerOn>
      res = RES_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c98:	e0f7      	b.n	8000e8a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	1c5c      	adds	r4, r3, #1
 8000c9e:	f7ff fcf5 	bl	800068c <SD_CheckPower>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000cac:	e0ed      	b.n	8000e8a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cb4:	e0e9      	b.n	8000e8a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000cb6:	4b78      	ldr	r3, [pc, #480]	; (8000e98 <SD_disk_ioctl+0x260>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e0e2      	b.n	8000e8e <SD_disk_ioctl+0x256>

    SELECT();
 8000cc8:	f7ff fc0e 	bl	80004e8 <SELECT>

    switch (ctrl)
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	2b0d      	cmp	r3, #13
 8000cd0:	f200 80cc 	bhi.w	8000e6c <SD_disk_ioctl+0x234>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <SD_disk_ioctl+0xa4>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000dd7 	.word	0x08000dd7
 8000ce0:	08000d15 	.word	0x08000d15
 8000ce4:	08000dc7 	.word	0x08000dc7
 8000ce8:	08000e6d 	.word	0x08000e6d
 8000cec:	08000e6d 	.word	0x08000e6d
 8000cf0:	08000e6d 	.word	0x08000e6d
 8000cf4:	08000e6d 	.word	0x08000e6d
 8000cf8:	08000e6d 	.word	0x08000e6d
 8000cfc:	08000e6d 	.word	0x08000e6d
 8000d00:	08000e6d 	.word	0x08000e6d
 8000d04:	08000e6d 	.word	0x08000e6d
 8000d08:	08000de9 	.word	0x08000de9
 8000d0c:	08000e0d 	.word	0x08000e0d
 8000d10:	08000e31 	.word	0x08000e31
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d14:	2100      	movs	r1, #0
 8000d16:	2049      	movs	r0, #73	; 0x49
 8000d18:	f7ff fd4e 	bl	80007b8 <SD_SendCmd>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 80a8 	bne.w	8000e74 <SD_disk_ioctl+0x23c>
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcba 	bl	80006a4 <SD_RxDataBlock>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 809e 	beq.w	8000e74 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000d38:	7b3b      	ldrb	r3, [r7, #12]
 8000d3a:	099b      	lsrs	r3, r3, #6
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10e      	bne.n	8000d60 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d42:	7d7b      	ldrb	r3, [r7, #21]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	7d3b      	ldrb	r3, [r7, #20]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d56:	8bfb      	ldrh	r3, [r7, #30]
 8000d58:	029a      	lsls	r2, r3, #10
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e02e      	b.n	8000dbe <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d60:	7c7b      	ldrb	r3, [r7, #17]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	7dbb      	ldrb	r3, [r7, #22]
 8000d6a:	09db      	lsrs	r3, r3, #7
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	7d7b      	ldrb	r3, [r7, #21]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 0306 	and.w	r3, r3, #6
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3302      	adds	r3, #2
 8000d84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d88:	7d3b      	ldrb	r3, [r7, #20]
 8000d8a:	099b      	lsrs	r3, r3, #6
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	7cbb      	ldrb	r3, [r7, #18]
 8000d9e:	029b      	lsls	r3, r3, #10
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000db0:	8bfa      	ldrh	r2, [r7, #30]
 8000db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db6:	3b09      	subs	r3, #9
 8000db8:	409a      	lsls	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000dc4:	e056      	b.n	8000e74 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dcc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dd4:	e055      	b.n	8000e82 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000dd6:	f7ff fbe5 	bl	80005a4 <SD_ReadyWait>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2bff      	cmp	r3, #255	; 0xff
 8000dde:	d14b      	bne.n	8000e78 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000de6:	e047      	b.n	8000e78 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000de8:	2100      	movs	r1, #0
 8000dea:	2049      	movs	r0, #73	; 0x49
 8000dec:	f7ff fce4 	bl	80007b8 <SD_SendCmd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d142      	bne.n	8000e7c <SD_disk_ioctl+0x244>
 8000df6:	2110      	movs	r1, #16
 8000df8:	6a38      	ldr	r0, [r7, #32]
 8000dfa:	f7ff fc53 	bl	80006a4 <SD_RxDataBlock>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d03b      	beq.n	8000e7c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e0a:	e037      	b.n	8000e7c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	204a      	movs	r0, #74	; 0x4a
 8000e10:	f7ff fcd2 	bl	80007b8 <SD_SendCmd>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d132      	bne.n	8000e80 <SD_disk_ioctl+0x248>
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	6a38      	ldr	r0, [r7, #32]
 8000e1e:	f7ff fc41 	bl	80006a4 <SD_RxDataBlock>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d02b      	beq.n	8000e80 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e2e:	e027      	b.n	8000e80 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000e30:	2100      	movs	r1, #0
 8000e32:	207a      	movs	r0, #122	; 0x7a
 8000e34:	f7ff fcc0 	bl	80007b8 <SD_SendCmd>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d116      	bne.n	8000e6c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e44:	e00b      	b.n	8000e5e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000e46:	6a3c      	ldr	r4, [r7, #32]
 8000e48:	1c63      	adds	r3, r4, #1
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	f7ff fb7e 	bl	800054c <SPI_RxByte>
 8000e50:	4603      	mov	r3, r0
 8000e52:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d9ef      	bls.n	8000e46 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e72:	e006      	b.n	8000e82 <SD_disk_ioctl+0x24a>
      break;
 8000e74:	bf00      	nop
 8000e76:	e004      	b.n	8000e82 <SD_disk_ioctl+0x24a>
      break;
 8000e78:	bf00      	nop
 8000e7a:	e002      	b.n	8000e82 <SD_disk_ioctl+0x24a>
      break;
 8000e7c:	bf00      	nop
 8000e7e:	e000      	b.n	8000e82 <SD_disk_ioctl+0x24a>
      break;
 8000e80:	bf00      	nop
    }

    DESELECT();
 8000e82:	f7ff fb3d 	bl	8000500 <DESELECT>
    SPI_RxByte();
 8000e86:	f7ff fb61 	bl	800054c <SPI_RxByte>
  }

  return res;
 8000e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	372c      	adds	r7, #44	; 0x2c
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000000 	.word	0x20000000

08000e9c <send_uart>:
uint32_t total, free_space;


/* Function for sending Uart Data */
void send_uart(char* string)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff f995 	bl	80001d4 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, len, 2000);
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <send_uart+0x2c>)
 8000eba:	f001 ff52 	bl	8002d62 <HAL_UART_Transmit>
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000009c 	.word	0x2000009c

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f000 fb21 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f8af 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 f96d 	bl	80011b8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000ede:	f000 f90b 	bl	80010f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ee2:	f000 f93f 	bl	8001164 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000ee6:	f002 fab1 	bl	800344c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* Mounting the SD CARD*/
  res = f_mount(&fs, "", 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	4942      	ldr	r1, [pc, #264]	; (8000ff8 <main+0x12c>)
 8000eee:	4843      	ldr	r0, [pc, #268]	; (8000ffc <main+0x130>)
 8000ef0:	f004 fcfa 	bl	80058e8 <f_mount>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b41      	ldr	r3, [pc, #260]	; (8001000 <main+0x134>)
 8000efa:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)
 8000efc:	4b40      	ldr	r3, [pc, #256]	; (8001000 <main+0x134>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <main+0x40>
	  send_uart("error in mounting SD Card \n");
 8000f04:	483f      	ldr	r0, [pc, #252]	; (8001004 <main+0x138>)
 8000f06:	f7ff ffc9 	bl	8000e9c <send_uart>
 8000f0a:	e002      	b.n	8000f12 <main+0x46>
  else
	  send_uart("SD Card mounted successfully \n");
 8000f0c:	483e      	ldr	r0, [pc, #248]	; (8001008 <main+0x13c>)
 8000f0e:	f7ff ffc5 	bl	8000e9c <send_uart>

  /* Open file, write data and close it */
  res = f_open(&file, "file10.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000f12:	2213      	movs	r2, #19
 8000f14:	493d      	ldr	r1, [pc, #244]	; (800100c <main+0x140>)
 8000f16:	483e      	ldr	r0, [pc, #248]	; (8001010 <main+0x144>)
 8000f18:	f004 fd2c 	bl	8005974 <f_open>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b37      	ldr	r3, [pc, #220]	; (8001000 <main+0x134>)
 8000f22:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)	send_uart("failed to open \n");
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <main+0x134>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <main+0x68>
 8000f2c:	4839      	ldr	r0, [pc, #228]	; (8001014 <main+0x148>)
 8000f2e:	f7ff ffb5 	bl	8000e9c <send_uart>
 8000f32:	e002      	b.n	8000f3a <main+0x6e>
  else	send_uart("file opened successfully \n");
 8000f34:	4838      	ldr	r0, [pc, #224]	; (8001018 <main+0x14c>)
 8000f36:	f7ff ffb1 	bl	8000e9c <send_uart>

  res = f_puts("This data in the file that is caled file1 bla bla\n", &file);
 8000f3a:	4935      	ldr	r1, [pc, #212]	; (8001010 <main+0x144>)
 8000f3c:	4837      	ldr	r0, [pc, #220]	; (800101c <main+0x150>)
 8000f3e:	f005 fb34 	bl	80065aa <f_puts>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <main+0x134>)
 8000f48:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)	send_uart("failed to write the data \n");
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <main+0x134>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <main+0x8e>
 8000f52:	4833      	ldr	r0, [pc, #204]	; (8001020 <main+0x154>)
 8000f54:	f7ff ffa2 	bl	8000e9c <send_uart>
 8000f58:	e002      	b.n	8000f60 <main+0x94>
  else	send_uart("data written successfully \n");
 8000f5a:	4832      	ldr	r0, [pc, #200]	; (8001024 <main+0x158>)
 8000f5c:	f7ff ff9e 	bl	8000e9c <send_uart>

  res = f_close(&file);
 8000f60:	482b      	ldr	r0, [pc, #172]	; (8001010 <main+0x144>)
 8000f62:	f005 fa44 	bl	80063ee <f_close>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <main+0x134>)
 8000f6c:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)	send_uart("failed to close the file \n");
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <main+0x134>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <main+0xb2>
 8000f76:	482c      	ldr	r0, [pc, #176]	; (8001028 <main+0x15c>)
 8000f78:	f7ff ff90 	bl	8000e9c <send_uart>
 8000f7c:	e002      	b.n	8000f84 <main+0xb8>
  else	send_uart("file closed successfully \n");
 8000f7e:	482b      	ldr	r0, [pc, #172]	; (800102c <main+0x160>)
 8000f80:	f7ff ff8c 	bl	8000e9c <send_uart>

  send_uart("File written and closed\n");
 8000f84:	482a      	ldr	r0, [pc, #168]	; (8001030 <main+0x164>)
 8000f86:	f7ff ff89 	bl	8000e9c <send_uart>

  /* Open file, read data and close it*/
  res = f_open(&file, "file10.txt", FA_READ);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	491f      	ldr	r1, [pc, #124]	; (800100c <main+0x140>)
 8000f8e:	4820      	ldr	r0, [pc, #128]	; (8001010 <main+0x144>)
 8000f90:	f004 fcf0 	bl	8005974 <f_open>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <main+0x134>)
 8000f9a:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)	send_uart("failed to open \n");
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <main+0x134>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <main+0xe0>
 8000fa4:	481b      	ldr	r0, [pc, #108]	; (8001014 <main+0x148>)
 8000fa6:	f7ff ff79 	bl	8000e9c <send_uart>
 8000faa:	e002      	b.n	8000fb2 <main+0xe6>
  else	send_uart("file opened successfully \n");
 8000fac:	481a      	ldr	r0, [pc, #104]	; (8001018 <main+0x14c>)
 8000fae:	f7ff ff75 	bl	8000e9c <send_uart>

  uint8_t l = strlen("This data in the file that is caled file1 bla bla\n");
 8000fb2:	2332      	movs	r3, #50	; 0x32
 8000fb4:	71fb      	strb	r3, [r7, #7]
  f_gets(buffer, l, &file);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4a15      	ldr	r2, [pc, #84]	; (8001010 <main+0x144>)
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481d      	ldr	r0, [pc, #116]	; (8001034 <main+0x168>)
 8000fbe:	f005 fa40 	bl	8006442 <f_gets>
  send_uart(buffer);
 8000fc2:	481c      	ldr	r0, [pc, #112]	; (8001034 <main+0x168>)
 8000fc4:	f7ff ff6a 	bl	8000e9c <send_uart>

  res = f_close(&file);
 8000fc8:	4811      	ldr	r0, [pc, #68]	; (8001010 <main+0x144>)
 8000fca:	f005 fa10 	bl	80063ee <f_close>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <main+0x134>)
 8000fd4:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK)	send_uart("failed to close the file \n");
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <main+0x134>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <main+0x11a>
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <main+0x15c>)
 8000fe0:	f7ff ff5c 	bl	8000e9c <send_uart>
 8000fe4:	e002      	b.n	8000fec <main+0x120>
  else	send_uart("file closed successfully \n");
 8000fe6:	4811      	ldr	r0, [pc, #68]	; (800102c <main+0x160>)
 8000fe8:	f7ff ff58 	bl	8000e9c <send_uart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//send_uart("Hello World\n");
	HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f000 fb04 	bl	80015fc <HAL_Delay>
 8000ff4:	e7fa      	b.n	8000fec <main+0x120>
 8000ff6:	bf00      	nop
 8000ff8:	080068a8 	.word	0x080068a8
 8000ffc:	200000e0 	.word	0x200000e0
 8001000:	20002148 	.word	0x20002148
 8001004:	080068ac 	.word	0x080068ac
 8001008:	080068c8 	.word	0x080068c8
 800100c:	080068e8 	.word	0x080068e8
 8001010:	20001118 	.word	0x20001118
 8001014:	080068f4 	.word	0x080068f4
 8001018:	08006908 	.word	0x08006908
 800101c:	08006924 	.word	0x08006924
 8001020:	08006958 	.word	0x08006958
 8001024:	08006974 	.word	0x08006974
 8001028:	08006990 	.word	0x08006990
 800102c:	080069ac 	.word	0x080069ac
 8001030:	080069c8 	.word	0x080069c8
 8001034:	2000214c 	.word	0x2000214c

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2230      	movs	r2, #48	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fc1a 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <SystemClock_Config+0xb8>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <SystemClock_Config+0xb8>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <SystemClock_Config+0xb8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <SystemClock_Config+0xbc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <SystemClock_Config+0xbc>)
 8001086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <SystemClock_Config+0xbc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fd4e 	bl	8001b4c <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010b6:	f000 f8d1 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010be:	2301      	movs	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 ffb1 	bl	800203c <HAL_RCC_ClockConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80010e0:	f000 f8bc 	bl	800125c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80010e4:	f001 f890 	bl	8002208 <HAL_RCC_EnableCSS>
}
 80010e8:	bf00      	nop
 80010ea:	3750      	adds	r7, #80	; 0x50
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_SPI3_Init+0x64>)
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <MX_SPI3_Init+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_SPI3_Init+0x64>)
 8001104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_SPI3_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_SPI3_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_SPI3_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_SPI3_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_SPI3_Init+0x64>)
 8001124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001128:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_SPI3_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_SPI3_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_SPI3_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_SPI3_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_SPI3_Init+0x64>)
 8001144:	220a      	movs	r2, #10
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_SPI3_Init+0x64>)
 800114a:	f001 f97e 	bl	800244a <HAL_SPI_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001154:	f000 f882 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000044 	.word	0x20000044
 8001160:	40003c00 	.word	0x40003c00

08001164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART1_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001170:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800119c:	f001 fd94 	bl	8002cc8 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f859 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000009c 	.word	0x2000009c
 80011b4:	40011000 	.word	0x40011000

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_GPIO_Init+0x9c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <MX_GPIO_Init+0x9c>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_GPIO_Init+0x9c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <MX_GPIO_Init+0xa0>)
 800122a:	f000 fc75 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800122e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_GPIO_Init+0xa0>)
 8001248:	f000 fae2 	bl	8001810 <HAL_GPIO_Init>

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_SPI_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12b      	bne.n	8001332 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_SPI_MspInit+0x88>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_SPI_MspInit+0x88>)
 80012e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_SPI_MspInit+0x88>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_SPI_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_SPI_MspInit+0x88>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_SPI_MspInit+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001312:	2338      	movs	r3, #56	; 0x38
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001322:	2306      	movs	r3, #6
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 800132e:	f000 fa6f 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40003c00 	.word	0x40003c00
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_UART_MspInit+0x84>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12c      	bne.n	80013c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_UART_MspInit+0x88>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_UART_MspInit+0x88>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_UART_MspInit+0x88>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_UART_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_UART_MspInit+0x88>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_UART_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013b4:	2307      	movs	r3, #7
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_UART_MspInit+0x8c>)
 80013c0:	f000 fa26 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000

080013d8 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <SDTimer_Handler+0x40>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <SDTimer_Handler+0x1c>
		Timer1--;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <SDTimer_Handler+0x40>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <SDTimer_Handler+0x40>)
 80013f2:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <SDTimer_Handler+0x44>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <SDTimer_Handler+0x34>
		Timer2--;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <SDTimer_Handler+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <SDTimer_Handler+0x44>)
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000254d 	.word	0x2000254d
 800141c:	2000254e 	.word	0x2000254e

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001424:	f000 fff6 	bl	8002414 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x8>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <SysTick_Handler+0x30>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3301      	adds	r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <SysTick_Handler+0x30>)
 800147c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <SysTick_Handler+0x30>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b09      	cmp	r3, #9
 8001486:	d904      	bls.n	8001492 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Handler+0x30>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800148e:	f7ff ffa3 	bl	80013d8 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 f893 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000254c 	.word	0x2000254c

080014a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ca:	490e      	ldr	r1, [pc, #56]	; (8001504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e0:	4c0b      	ldr	r4, [pc, #44]	; (8001510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ee:	f7ff ffd7 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f005 f9a1 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff fce9 	bl	8000ecc <main>
  bx  lr    
 80014fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001508:	08006e94 	.word	0x08006e94
  ldr r2, =_sbss
 800150c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001510:	20002790 	.word	0x20002790

08001514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_Init+0x40>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_Init+0x40>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_Init+0x40>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 f931 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	200f      	movs	r0, #15
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fe8c 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f93b 	bl	80017f6 <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f911 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000004 	.word	0x20000004
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	20000008 	.word	0x20000008

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000000c 	.word	0x2000000c
 80015e0:	20002550 	.word	0x20002550

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20002550 	.word	0x20002550

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000000c 	.word	0x2000000c

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff47 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff5c 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff8e 	bl	80016fc <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffb0 	bl	8001764 <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	e159      	b.n	8001ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800182c:	2201      	movs	r2, #1
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	429a      	cmp	r2, r3
 8001846:	f040 8148 	bne.w	8001ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d005      	beq.n	8001862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	2b02      	cmp	r3, #2
 8001860:	d130      	bne.n	80018c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d017      	beq.n	8001900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d123      	bne.n	8001954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	69b9      	ldr	r1, [r7, #24]
 8001950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a2 	beq.w	8001ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a56      	ldr	r2, [pc, #344]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <HAL_GPIO_Init+0x2e8>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b2:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x2ec>)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <HAL_GPIO_Init+0x2f0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x202>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a48      	ldr	r2, [pc, #288]	; (8001b04 <HAL_GPIO_Init+0x2f4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x1fe>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a47      	ldr	r2, [pc, #284]	; (8001b08 <HAL_GPIO_Init+0x2f8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x1fa>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a46      	ldr	r2, [pc, #280]	; (8001b0c <HAL_GPIO_Init+0x2fc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x1f6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a45      	ldr	r2, [pc, #276]	; (8001b10 <HAL_GPIO_Init+0x300>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x1f2>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e008      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e004      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x204>
 8001a12:	2300      	movs	r3, #0
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f002 0203 	and.w	r2, r2, #3
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a24:	4935      	ldr	r1, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x2ec>)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a56:	4a2f      	ldr	r2, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a80:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	f67f aea2 	bls.w	800182c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020400 	.word	0x40020400
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020c00 	.word	0x40020c00
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40013c00 	.word	0x40013c00

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e267      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d075      	beq.n	8001c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6a:	4b88      	ldr	r3, [pc, #544]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d00c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b76:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d05b      	beq.n	8001c54 <HAL_RCC_OscConfig+0x108>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d157      	bne.n	8001c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e242      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x74>
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a75      	ldr	r2, [pc, #468]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e01d      	b.n	8001bfc <HAL_RCC_OscConfig+0xb0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x98>
 8001bca:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6f      	ldr	r2, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6c      	ldr	r2, [pc, #432]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0xb0>
 8001be4:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a68      	ldr	r2, [pc, #416]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fcee 	bl	80015e4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fcea 	bl	80015e4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e207      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0xc0>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fcda 	bl	80015e4 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fcd6 	bl	80015e4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1f3      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0xe8>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d063      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c62:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d11c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_RCC_OscConfig+0x152>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e1c7      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	e03a      	b.n	8001d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_OscConfig+0x244>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fc8f 	bl	80015e4 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff fc8b 	bl	80015e4 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1a8      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4925      	ldr	r1, [pc, #148]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x244>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fc6e 	bl	80015e4 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc6a 	bl	80015e4 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e187      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d036      	beq.n	8001da4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_RCC_OscConfig+0x248>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff fc4e 	bl	80015e4 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc4a 	bl	80015e4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e167      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x200>
 8001d6a:	e01b      	b.n	8001da4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_OscConfig+0x248>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fc37 	bl	80015e4 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	e00e      	b.n	8001d98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fc33 	bl	80015e4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d907      	bls.n	8001d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e150      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	42470000 	.word	0x42470000
 8001d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ea      	bne.n	8001d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8097 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a7c      	ldr	r2, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b74      	ldr	r3, [pc, #464]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a73      	ldr	r2, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fbf3 	bl	80015e4 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7ff fbef 	bl	80015e4 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e10c      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x2ea>
 8001e28:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a63      	ldr	r2, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	e01c      	b.n	8001e70 <HAL_RCC_OscConfig+0x324>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x30c>
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a5b      	ldr	r2, [pc, #364]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0x324>
 8001e58:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4a54      	ldr	r2, [pc, #336]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e6a:	f023 0304 	bic.w	r3, r3, #4
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d015      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff fbb4 	bl	80015e4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff fbb0 	bl	80015e4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0cb      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0ee      	beq.n	8001e80 <HAL_RCC_OscConfig+0x334>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fb9e 	bl	80015e4 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7ff fb9a 	bl	80015e4 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0b5      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ee      	bne.n	8001eac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a38      	ldr	r2, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a1 	beq.w	800202c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d05c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d141      	bne.n	8001f82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_RCC_OscConfig+0x478>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb6e 	bl	80015e4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff fb6a 	bl	80015e4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e087      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	019b      	lsls	r3, r3, #6
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	041b      	lsls	r3, r3, #16
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	491b      	ldr	r1, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x478>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fb43 	bl	80015e4 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff fb3f 	bl	80015e4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e05c      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x416>
 8001f80:	e054      	b.n	800202c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_RCC_OscConfig+0x478>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fb2c 	bl	80015e4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff fb28 	bl	80015e4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e045      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x444>
 8001fae:	e03d      	b.n	800202c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e038      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x4ec>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d028      	beq.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d121      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d11a      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002000:	4293      	cmp	r3, r2
 8002002:	d111      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	3b01      	subs	r3, #1
 8002012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0cc      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d90c      	bls.n	8002078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d044      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d119      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e067      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4934      	ldr	r1, [pc, #208]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7ff fa5a 	bl	80015e4 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7ff fa56 	bl	80015e4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e04f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d20c      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 f82d 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	490a      	ldr	r1, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f9ba 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00
 80021f8:	40023800 	.word	0x40023800
 80021fc:	08006a2c 	.word	0x08006a2c
 8002200:	20000004 	.word	0x20000004
 8002204:	20000008 	.word	0x20000008

08002208 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_EnableCSS+0x14>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	4247004c 	.word	0x4247004c

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002224:	b090      	sub	sp, #64	; 0x40
 8002226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d00d      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x40>
 8002244:	2b08      	cmp	r3, #8
 8002246:	f200 80a1 	bhi.w	800238c <HAL_RCC_GetSysClockFreq+0x16c>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x34>
 800224e:	2b04      	cmp	r3, #4
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x3a>
 8002252:	e09b      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002258:	e09b      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225a:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800225e:	e098      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226a:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d028      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002276:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	2200      	movs	r2, #0
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	627a      	str	r2, [r7, #36]	; 0x24
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002288:	2100      	movs	r1, #0
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800228c:	fb03 f201 	mul.w	r2, r3, r1
 8002290:	2300      	movs	r3, #0
 8002292:	fb00 f303 	mul.w	r3, r0, r3
 8002296:	4413      	add	r3, r2
 8002298:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800229a:	fba0 1202 	umull	r1, r2, r0, r2
 800229e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022a0:	460a      	mov	r2, r1
 80022a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	4413      	add	r3, r2
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ac:	2200      	movs	r2, #0
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	61fa      	str	r2, [r7, #28]
 80022b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022ba:	f7fd ff93 	bl	80001e4 <__aeabi_uldivmod>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4613      	mov	r3, r2
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c6:	e053      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	2200      	movs	r2, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	617a      	str	r2, [r7, #20]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022da:	f04f 0b00 	mov.w	fp, #0
 80022de:	4652      	mov	r2, sl
 80022e0:	465b      	mov	r3, fp
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	0159      	lsls	r1, r3, #5
 80022ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f0:	0150      	lsls	r0, r2, #5
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	ebb2 080a 	subs.w	r8, r2, sl
 80022fa:	eb63 090b 	sbc.w	r9, r3, fp
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800230a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800230e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002312:	ebb2 0408 	subs.w	r4, r2, r8
 8002316:	eb63 0509 	sbc.w	r5, r3, r9
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	00eb      	lsls	r3, r5, #3
 8002324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002328:	00e2      	lsls	r2, r4, #3
 800232a:	4614      	mov	r4, r2
 800232c:	461d      	mov	r5, r3
 800232e:	eb14 030a 	adds.w	r3, r4, sl
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	eb45 030b 	adc.w	r3, r5, fp
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002346:	4629      	mov	r1, r5
 8002348:	028b      	lsls	r3, r1, #10
 800234a:	4621      	mov	r1, r4
 800234c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002350:	4621      	mov	r1, r4
 8002352:	028a      	lsls	r2, r1, #10
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	2200      	movs	r2, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002364:	f7fd ff3e 	bl	80001e4 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800238a:	e002      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002394:	4618      	mov	r0, r3
 8002396:	3740      	adds	r7, #64	; 0x40
 8002398:	46bd      	mov	sp, r7
 800239a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	017d7840 	.word	0x017d7840

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a9b      	lsrs	r3, r3, #10
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08006a3c 	.word	0x08006a3c

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f0:	f7ff ffdc 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0b5b      	lsrs	r3, r3, #13
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	08006a3c 	.word	0x08006a3c

08002414 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_NMI_IRQHandler+0x20>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d104      	bne.n	800242e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002424:	f000 f80a 	bl	800243c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_RCC_NMI_IRQHandler+0x24>)
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	701a      	strb	r2, [r3, #0]
  }
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	4002380e 	.word	0x4002380e

0800243c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e07b      	b.n	8002554 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800246c:	d009      	beq.n	8002482 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	61da      	str	r2, [r3, #28]
 8002474:	e005      	b.n	8002482 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe ff0b 	bl	80012b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	ea42 0103 	orr.w	r1, r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	f003 0104 	and.w	r1, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f003 0210 	and.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002542:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_SPI_Transmit+0x22>
 800257a:	2302      	movs	r3, #2
 800257c:	e126      	b.n	80027cc <HAL_SPI_Transmit+0x270>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002586:	f7ff f82d 	bl	80015e4 <HAL_GetTick>
 800258a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800259c:	2302      	movs	r3, #2
 800259e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025a0:	e10b      	b.n	80027ba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SPI_Transmit+0x52>
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025b2:	e102      	b.n	80027ba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2203      	movs	r2, #3
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fa:	d10f      	bne.n	800261c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d007      	beq.n	800263a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002642:	d14b      	bne.n	80026dc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_SPI_Transmit+0xf6>
 800264c:	8afb      	ldrh	r3, [r7, #22]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d13e      	bne.n	80026d0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	1c9a      	adds	r2, r3, #2
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002676:	e02b      	b.n	80026d0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d112      	bne.n	80026ac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	1c9a      	adds	r2, r3, #2
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80026aa:	e011      	b.n	80026d0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ac:	f7fe ff9a 	bl	80015e4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d803      	bhi.n	80026c4 <HAL_SPI_Transmit+0x168>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d102      	bne.n	80026ca <HAL_SPI_Transmit+0x16e>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026ce:	e074      	b.n	80027ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ce      	bne.n	8002678 <HAL_SPI_Transmit+0x11c>
 80026da:	e04c      	b.n	8002776 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_SPI_Transmit+0x18e>
 80026e4:	8afb      	ldrh	r3, [r7, #22]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d140      	bne.n	800276c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002710:	e02c      	b.n	800276c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d113      	bne.n	8002748 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	86da      	strh	r2, [r3, #54]	; 0x36
 8002746:	e011      	b.n	800276c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002748:	f7fe ff4c 	bl	80015e4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d803      	bhi.n	8002760 <HAL_SPI_Transmit+0x204>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275e:	d102      	bne.n	8002766 <HAL_SPI_Transmit+0x20a>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	77fb      	strb	r3, [r7, #31]
          goto error;
 800276a:	e026      	b.n	80027ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1cd      	bne.n	8002712 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fa62 	bl	8002c44 <SPI_EndRxTxTransaction>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e000      	b.n	80027ba <HAL_SPI_Transmit+0x25e>
  }

error:
 80027b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027e2:	2301      	movs	r3, #1
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x26>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e18a      	b.n	8002b10 <HAL_SPI_TransmitReceive+0x33c>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002802:	f7fe feef 	bl	80015e4 <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800281c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002820:	2b01      	cmp	r3, #1
 8002822:	d00f      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x70>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282a:	d107      	bne.n	800283c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <HAL_SPI_TransmitReceive+0x68>
 8002834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002838:	2b04      	cmp	r3, #4
 800283a:	d003      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800283c:	2302      	movs	r3, #2
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002842:	e15b      	b.n	8002afc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_SPI_TransmitReceive+0x82>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_SPI_TransmitReceive+0x82>
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800285c:	e14e      	b.n	8002afc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b04      	cmp	r3, #4
 8002868:	d003      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2205      	movs	r2, #5
 800286e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d007      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ce:	d178      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_SPI_TransmitReceive+0x10a>
 80028d8:	8b7b      	ldrh	r3, [r7, #26]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d166      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	881a      	ldrh	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002902:	e053      	b.n	80029ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d11b      	bne.n	800294a <HAL_SPI_TransmitReceive+0x176>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d016      	beq.n	800294a <HAL_SPI_TransmitReceive+0x176>
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d113      	bne.n	800294a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	1c9a      	adds	r2, r3, #2
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d119      	bne.n	800298c <HAL_SPI_TransmitReceive+0x1b8>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d014      	beq.n	800298c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	b292      	uxth	r2, r2
 800296e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	1c9a      	adds	r2, r3, #2
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002988:	2301      	movs	r3, #1
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800298c:	f7fe fe2a 	bl	80015e4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002998:	429a      	cmp	r2, r3
 800299a:	d807      	bhi.n	80029ac <HAL_SPI_TransmitReceive+0x1d8>
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d003      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029aa:	e0a7      	b.n	8002afc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1a6      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x130>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1a1      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x130>
 80029c0:	e07c      	b.n	8002abc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x1fc>
 80029ca:	8b7b      	ldrh	r3, [r7, #26]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d16b      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f6:	e057      	b.n	8002aa8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d11c      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x26c>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d017      	beq.n	8002a40 <HAL_SPI_TransmitReceive+0x26c>
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d114      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d119      	bne.n	8002a82 <HAL_SPI_TransmitReceive+0x2ae>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a82:	f7fe fdaf 	bl	80015e4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d803      	bhi.n	8002a9a <HAL_SPI_TransmitReceive+0x2c6>
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d102      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x2cc>
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aa6:	e029      	b.n	8002afc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1a2      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x224>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d19d      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f8bf 	bl	8002c44 <SPI_EndRxTxTransaction>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ad8:	e010      	b.n	8002afc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	e000      	b.n	8002afc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002afa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b26:	b2db      	uxtb	r3, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b44:	f7fe fd4e 	bl	80015e4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b54:	f7fe fd46 	bl	80015e4 <HAL_GetTick>
 8002b58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	015b      	lsls	r3, r3, #5
 8002b60:	0d1b      	lsrs	r3, r3, #20
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b6a:	e054      	b.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d050      	beq.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b74:	f7fe fd36 	bl	80015e4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d902      	bls.n	8002b8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d13d      	bne.n	8002c06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba2:	d111      	bne.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	d004      	beq.n	8002bb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d107      	bne.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd0:	d10f      	bne.n	8002bf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e017      	b.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d19b      	bne.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000004 	.word	0x20000004

08002c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <SPI_EndRxTxTransaction+0x7c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <SPI_EndRxTxTransaction+0x80>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0d5b      	lsrs	r3, r3, #21
 8002c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6e:	d112      	bne.n	8002c96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff ff5a 	bl	8002b34 <SPI_WaitFlagStateUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0220 	orr.w	r2, r3, #32
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e00f      	b.n	8002cb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d0f2      	beq.n	8002c96 <SPI_EndRxTxTransaction+0x52>
 8002cb0:	e000      	b.n	8002cb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cb2:	bf00      	nop
  }

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	165e9f81 	.word	0x165e9f81

08002cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e03f      	b.n	8002d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fb2a 	bl	8001348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f929 	bl	8002f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af02      	add	r7, sp, #8
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d17c      	bne.n	8002e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_UART_Transmit+0x2c>
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e075      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_UART_Transmit+0x3e>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e06e      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2221      	movs	r2, #33	; 0x21
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fc15 	bl	80015e4 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd0:	d108      	bne.n	8002de4 <HAL_UART_Transmit+0x82>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002df4:	e02a      	b.n	8002e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f840 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e036      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e007      	b.n	8002e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1cf      	bne.n	8002df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f810 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e006      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b090      	sub	sp, #64	; 0x40
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	e050      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d04c      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ea6:	f7fe fb9d 	bl	80015e4 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d241      	bcs.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ed6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e5      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3314      	adds	r3, #20
 8002ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f0a:	623a      	str	r2, [r7, #32]
 8002f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	69f9      	ldr	r1, [r7, #28]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e5      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00f      	b.n	8002f5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d09f      	beq.n	8002e98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3740      	adds	r7, #64	; 0x40
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b0c0      	sub	sp, #256	; 0x100
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	68d9      	ldr	r1, [r3, #12]
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	ea40 0301 	orr.w	r3, r0, r1
 8002f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fbc:	f021 010c 	bic.w	r1, r1, #12
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	6999      	ldr	r1, [r3, #24]
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	ea40 0301 	orr.w	r3, r0, r1
 8002fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <UART_SetConfig+0x2cc>)
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d005      	beq.n	8003004 <UART_SetConfig+0xa0>
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	; (8003234 <UART_SetConfig+0x2d0>)
 8003000:	429a      	cmp	r2, r3
 8003002:	d104      	bne.n	800300e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7ff f9f2 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800300c:	e003      	b.n	8003016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800300e:	f7ff f9d9 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003020:	f040 810c 	bne.w	800323c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800302e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	1891      	adds	r1, r2, r2
 800303c:	65b9      	str	r1, [r7, #88]	; 0x58
 800303e:	415b      	adcs	r3, r3
 8003040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003046:	4621      	mov	r1, r4
 8003048:	eb12 0801 	adds.w	r8, r2, r1
 800304c:	4629      	mov	r1, r5
 800304e:	eb43 0901 	adc.w	r9, r3, r1
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003066:	4690      	mov	r8, r2
 8003068:	4699      	mov	r9, r3
 800306a:	4623      	mov	r3, r4
 800306c:	eb18 0303 	adds.w	r3, r8, r3
 8003070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003074:	462b      	mov	r3, r5
 8003076:	eb49 0303 	adc.w	r3, r9, r3
 800307a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800308a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800308e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003092:	460b      	mov	r3, r1
 8003094:	18db      	adds	r3, r3, r3
 8003096:	653b      	str	r3, [r7, #80]	; 0x50
 8003098:	4613      	mov	r3, r2
 800309a:	eb42 0303 	adc.w	r3, r2, r3
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
 80030a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030a8:	f7fd f89c 	bl	80001e4 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <UART_SetConfig+0x2d4>)
 80030b2:	fba3 2302 	umull	r2, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	011c      	lsls	r4, r3, #4
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80030d4:	415b      	adcs	r3, r3
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030dc:	4641      	mov	r1, r8
 80030de:	eb12 0a01 	adds.w	sl, r2, r1
 80030e2:	4649      	mov	r1, r9
 80030e4:	eb43 0b01 	adc.w	fp, r3, r1
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030fc:	4692      	mov	sl, r2
 80030fe:	469b      	mov	fp, r3
 8003100:	4643      	mov	r3, r8
 8003102:	eb1a 0303 	adds.w	r3, sl, r3
 8003106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800310a:	464b      	mov	r3, r9
 800310c:	eb4b 0303 	adc.w	r3, fp, r3
 8003110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003128:	460b      	mov	r3, r1
 800312a:	18db      	adds	r3, r3, r3
 800312c:	643b      	str	r3, [r7, #64]	; 0x40
 800312e:	4613      	mov	r3, r2
 8003130:	eb42 0303 	adc.w	r3, r2, r3
 8003134:	647b      	str	r3, [r7, #68]	; 0x44
 8003136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800313a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800313e:	f7fd f851 	bl	80001e4 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4611      	mov	r1, r2
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <UART_SetConfig+0x2d4>)
 800314a:	fba3 2301 	umull	r2, r3, r3, r1
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2264      	movs	r2, #100	; 0x64
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	1acb      	subs	r3, r1, r3
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <UART_SetConfig+0x2d4>)
 8003160:	fba3 2302 	umull	r2, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800316c:	441c      	add	r4, r3
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800317c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003180:	4642      	mov	r2, r8
 8003182:	464b      	mov	r3, r9
 8003184:	1891      	adds	r1, r2, r2
 8003186:	63b9      	str	r1, [r7, #56]	; 0x38
 8003188:	415b      	adcs	r3, r3
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003190:	4641      	mov	r1, r8
 8003192:	1851      	adds	r1, r2, r1
 8003194:	6339      	str	r1, [r7, #48]	; 0x30
 8003196:	4649      	mov	r1, r9
 8003198:	414b      	adcs	r3, r1
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031a8:	4659      	mov	r1, fp
 80031aa:	00cb      	lsls	r3, r1, #3
 80031ac:	4651      	mov	r1, sl
 80031ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b2:	4651      	mov	r1, sl
 80031b4:	00ca      	lsls	r2, r1, #3
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	4642      	mov	r2, r8
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031c4:	464b      	mov	r3, r9
 80031c6:	460a      	mov	r2, r1
 80031c8:	eb42 0303 	adc.w	r3, r2, r3
 80031cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031e4:	460b      	mov	r3, r1
 80031e6:	18db      	adds	r3, r3, r3
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ea:	4613      	mov	r3, r2
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031fa:	f7fc fff3 	bl	80001e4 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <UART_SetConfig+0x2d4>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	; 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <UART_SetConfig+0x2d4>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 0207 	and.w	r2, r3, #7
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4422      	add	r2, r4
 800322a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800322c:	e105      	b.n	800343a <UART_SetConfig+0x4d6>
 800322e:	bf00      	nop
 8003230:	40011000 	.word	0x40011000
 8003234:	40011400 	.word	0x40011400
 8003238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800323c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800324a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800324e:	4642      	mov	r2, r8
 8003250:	464b      	mov	r3, r9
 8003252:	1891      	adds	r1, r2, r2
 8003254:	6239      	str	r1, [r7, #32]
 8003256:	415b      	adcs	r3, r3
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800325e:	4641      	mov	r1, r8
 8003260:	1854      	adds	r4, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb43 0501 	adc.w	r5, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003284:	464b      	mov	r3, r9
 8003286:	eb45 0303 	adc.w	r3, r5, r3
 800328a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800329a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032aa:	4629      	mov	r1, r5
 80032ac:	008b      	lsls	r3, r1, #2
 80032ae:	4621      	mov	r1, r4
 80032b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b4:	4621      	mov	r1, r4
 80032b6:	008a      	lsls	r2, r1, #2
 80032b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032bc:	f7fc ff92 	bl	80001e4 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b60      	ldr	r3, [pc, #384]	; (8003448 <UART_SetConfig+0x4e4>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	011c      	lsls	r4, r3, #4
 80032ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	61b9      	str	r1, [r7, #24]
 80032e8:	415b      	adcs	r3, r3
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f0:	4641      	mov	r1, r8
 80032f2:	1851      	adds	r1, r2, r1
 80032f4:	6139      	str	r1, [r7, #16]
 80032f6:	4649      	mov	r1, r9
 80032f8:	414b      	adcs	r3, r1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003308:	4659      	mov	r1, fp
 800330a:	00cb      	lsls	r3, r1, #3
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003312:	4651      	mov	r1, sl
 8003314:	00ca      	lsls	r2, r1, #3
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	4603      	mov	r3, r0
 800331c:	4642      	mov	r2, r8
 800331e:	189b      	adds	r3, r3, r2
 8003320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003324:	464b      	mov	r3, r9
 8003326:	460a      	mov	r2, r1
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	67bb      	str	r3, [r7, #120]	; 0x78
 800333a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003348:	4649      	mov	r1, r9
 800334a:	008b      	lsls	r3, r1, #2
 800334c:	4641      	mov	r1, r8
 800334e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003352:	4641      	mov	r1, r8
 8003354:	008a      	lsls	r2, r1, #2
 8003356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800335a:	f7fc ff43 	bl	80001e4 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <UART_SetConfig+0x4e4>)
 8003364:	fba3 1302 	umull	r1, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2164      	movs	r1, #100	; 0x64
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	3332      	adds	r3, #50	; 0x32
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <UART_SetConfig+0x4e4>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003382:	441c      	add	r4, r3
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003388:	2200      	movs	r2, #0
 800338a:	673b      	str	r3, [r7, #112]	; 0x70
 800338c:	677a      	str	r2, [r7, #116]	; 0x74
 800338e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003392:	4642      	mov	r2, r8
 8003394:	464b      	mov	r3, r9
 8003396:	1891      	adds	r1, r2, r2
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	415b      	adcs	r3, r3
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a2:	4641      	mov	r1, r8
 80033a4:	1851      	adds	r1, r2, r1
 80033a6:	6039      	str	r1, [r7, #0]
 80033a8:	4649      	mov	r1, r9
 80033aa:	414b      	adcs	r3, r1
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033ba:	4659      	mov	r1, fp
 80033bc:	00cb      	lsls	r3, r1, #3
 80033be:	4651      	mov	r1, sl
 80033c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c4:	4651      	mov	r1, sl
 80033c6:	00ca      	lsls	r2, r1, #3
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	4603      	mov	r3, r0
 80033ce:	4642      	mov	r2, r8
 80033d0:	189b      	adds	r3, r3, r2
 80033d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d4:	464b      	mov	r3, r9
 80033d6:	460a      	mov	r2, r1
 80033d8:	eb42 0303 	adc.w	r3, r2, r3
 80033dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	663b      	str	r3, [r7, #96]	; 0x60
 80033e8:	667a      	str	r2, [r7, #100]	; 0x64
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033f6:	4649      	mov	r1, r9
 80033f8:	008b      	lsls	r3, r1, #2
 80033fa:	4641      	mov	r1, r8
 80033fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003400:	4641      	mov	r1, r8
 8003402:	008a      	lsls	r2, r1, #2
 8003404:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003408:	f7fc feec 	bl	80001e4 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <UART_SetConfig+0x4e4>)
 8003412:	fba3 1302 	umull	r1, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2164      	movs	r1, #100	; 0x64
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	3332      	adds	r3, #50	; 0x32
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <UART_SetConfig+0x4e4>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4422      	add	r2, r4
 8003438:	609a      	str	r2, [r3, #8]
}
 800343a:	bf00      	nop
 800343c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003440:	46bd      	mov	sp, r7
 8003442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003446:	bf00      	nop
 8003448:	51eb851f 	.word	0x51eb851f

0800344c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003450:	4904      	ldr	r1, [pc, #16]	; (8003464 <MX_FATFS_Init+0x18>)
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <MX_FATFS_Init+0x1c>)
 8003454:	f003 f91a 	bl	800668c <FATFS_LinkDriver>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <MX_FATFS_Init+0x20>)
 800345e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20002558 	.word	0x20002558
 8003468:	20000010 	.word	0x20000010
 800346c:	20002554 	.word	0x20002554

08003470 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003474:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f9e5 	bl	800085c <SD_disk_initialize>
 8003492:	4603      	mov	r3, r0
 8003494:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fac0 	bl	8000a30 <SD_disk_status>
 80034b0:	4603      	mov	r3, r0
 80034b2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80034cc:	7bf8      	ldrb	r0, [r7, #15]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	f7fd fac2 	bl	8000a5c <SD_disk_read>
 80034d8:	4603      	mov	r3, r0
 80034da:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80034f4:	7bf8      	ldrb	r0, [r7, #15]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	f7fd fb18 	bl	8000b30 <SD_disk_write>
 8003500:	4603      	mov	r3, r0
 8003502:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	603a      	str	r2, [r7, #0]
 8003516:	71fb      	strb	r3, [r7, #7]
 8003518:	460b      	mov	r3, r1
 800351a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	79b9      	ldrb	r1, [r7, #6]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fb88 	bl	8000c38 <SD_disk_ioctl>
 8003528:	4603      	mov	r3, r0
 800352a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <disk_status+0x30>)
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	79fa      	ldrb	r2, [r7, #7]
 800354c:	4905      	ldr	r1, [pc, #20]	; (8003564 <disk_status+0x30>)
 800354e:	440a      	add	r2, r1
 8003550:	7a12      	ldrb	r2, [r2, #8]
 8003552:	4610      	mov	r0, r2
 8003554:	4798      	blx	r3
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]
  return stat;
 800355a:	7bfb      	ldrb	r3, [r7, #15]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20002784 	.word	0x20002784

08003568 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <disk_initialize+0x48>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d111      	bne.n	80035a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <disk_initialize+0x48>)
 8003584:	2101      	movs	r1, #1
 8003586:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <disk_initialize+0x48>)
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	79fa      	ldrb	r2, [r7, #7]
 8003596:	4906      	ldr	r1, [pc, #24]	; (80035b0 <disk_initialize+0x48>)
 8003598:	440a      	add	r2, r1
 800359a:	7a12      	ldrb	r2, [r2, #8]
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20002784 	.word	0x20002784

080035b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <disk_read+0x3c>)
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	689c      	ldr	r4, [r3, #8]
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <disk_read+0x3c>)
 80035d4:	4413      	add	r3, r2
 80035d6:	7a18      	ldrb	r0, [r3, #8]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	47a0      	blx	r4
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20002784 	.word	0x20002784

080035f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4603      	mov	r3, r0
 8003602:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <disk_write+0x3c>)
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	68dc      	ldr	r4, [r3, #12]
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <disk_write+0x3c>)
 8003614:	4413      	add	r3, r2
 8003616:	7a18      	ldrb	r0, [r3, #8]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	47a0      	blx	r4
 8003620:	4603      	mov	r3, r0
 8003622:	75fb      	strb	r3, [r7, #23]
  return res;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
}
 8003626:	4618      	mov	r0, r3
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	bf00      	nop
 8003630:	20002784 	.word	0x20002784

08003634 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	603a      	str	r2, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
 8003640:	460b      	mov	r3, r1
 8003642:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <disk_ioctl+0x38>)
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	79fa      	ldrb	r2, [r7, #7]
 8003652:	4906      	ldr	r1, [pc, #24]	; (800366c <disk_ioctl+0x38>)
 8003654:	440a      	add	r2, r1
 8003656:	7a10      	ldrb	r0, [r2, #8]
 8003658:	79b9      	ldrb	r1, [r7, #6]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4798      	blx	r3
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
  return res;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20002784 	.word	0x20002784

08003670 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3301      	adds	r3, #1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	b21a      	sxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b21b      	sxth	r3, r3
 800368c:	4313      	orrs	r3, r2
 800368e:	b21b      	sxth	r3, r3
 8003690:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003692:	89fb      	ldrh	r3, [r7, #14]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3303      	adds	r3, #3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	3202      	adds	r2, #2
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	3201      	adds	r2, #1
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	887a      	ldrh	r2, [r7, #2]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	1c53      	adds	r3, r2, #1
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	6179      	str	r1, [r7, #20]
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f1      	bne.n	800378e <mem_cpy+0x1a>
	}
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80037b6:	b480      	push	{r7}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	617a      	str	r2, [r7, #20]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f3      	bne.n	80037c6 <mem_set+0x10>
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	61fa      	str	r2, [r7, #28]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	61ba      	str	r2, [r7, #24]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	1acb      	subs	r3, r1, r3
 8003818:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3b01      	subs	r3, #1
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <mem_cmp+0x40>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0eb      	beq.n	8003804 <mem_cmp+0x18>

	return r;
 800382c:	697b      	ldr	r3, [r7, #20]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	; 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003844:	e002      	b.n	800384c <chk_chr+0x12>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3301      	adds	r3, #1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <chk_chr+0x26>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	4293      	cmp	r3, r2
 800385e:	d1f2      	bne.n	8003846 <chk_chr+0xc>
	return *str;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e029      	b.n	80038d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003884:	4a27      	ldr	r2, [pc, #156]	; (8003924 <chk_lock+0xb4>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4413      	add	r3, r2
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01d      	beq.n	80038ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003892:	4a24      	ldr	r2, [pc, #144]	; (8003924 <chk_lock+0xb4>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4413      	add	r3, r2
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d116      	bne.n	80038d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <chk_lock+0xb4>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d10c      	bne.n	80038d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <chk_lock+0xb4>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4413      	add	r3, r2
 80038c0:	3308      	adds	r3, #8
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d102      	bne.n	80038d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80038cc:	e007      	b.n	80038de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3301      	adds	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d9d2      	bls.n	8003884 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d109      	bne.n	80038f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <chk_lock+0x80>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d101      	bne.n	80038f4 <chk_lock+0x84>
 80038f0:	2300      	movs	r3, #0
 80038f2:	e010      	b.n	8003916 <chk_lock+0xa6>
 80038f4:	2312      	movs	r3, #18
 80038f6:	e00e      	b.n	8003916 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <chk_lock+0xa0>
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <chk_lock+0xb4>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	4413      	add	r3, r2
 8003906:	330c      	adds	r3, #12
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	d101      	bne.n	8003914 <chk_lock+0xa4>
 8003910:	2310      	movs	r3, #16
 8003912:	e000      	b.n	8003916 <chk_lock+0xa6>
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20002564 	.word	0x20002564

08003928 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800392e:	2300      	movs	r3, #0
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	e002      	b.n	800393a <enq_lock+0x12>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3301      	adds	r3, #1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d806      	bhi.n	800394e <enq_lock+0x26>
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <enq_lock+0x40>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	4413      	add	r3, r2
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f2      	bne.n	8003934 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b02      	cmp	r3, #2
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20002564 	.word	0x20002564

0800396c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e01f      	b.n	80039bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800397c:	4a41      	ldr	r2, [pc, #260]	; (8003a84 <inc_lock+0x118>)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	4413      	add	r3, r2
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d113      	bne.n	80039b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800398e:	4a3d      	ldr	r2, [pc, #244]	; (8003a84 <inc_lock+0x118>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800399e:	429a      	cmp	r2, r3
 80039a0:	d109      	bne.n	80039b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80039a2:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <inc_lock+0x118>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	4413      	add	r3, r2
 80039aa:	3308      	adds	r3, #8
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d006      	beq.n	80039c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d9dc      	bls.n	800397c <inc_lock+0x10>
 80039c2:	e000      	b.n	80039c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80039c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d132      	bne.n	8003a32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e002      	b.n	80039d8 <inc_lock+0x6c>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d806      	bhi.n	80039ec <inc_lock+0x80>
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <inc_lock+0x118>)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4413      	add	r3, r2
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f2      	bne.n	80039d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d101      	bne.n	80039f6 <inc_lock+0x8a>
 80039f2:	2300      	movs	r3, #0
 80039f4:	e040      	b.n	8003a78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4922      	ldr	r1, [pc, #136]	; (8003a84 <inc_lock+0x118>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	440b      	add	r3, r1
 8003a02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	491e      	ldr	r1, [pc, #120]	; (8003a84 <inc_lock+0x118>)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	440b      	add	r3, r1
 8003a10:	3304      	adds	r3, #4
 8003a12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	491a      	ldr	r1, [pc, #104]	; (8003a84 <inc_lock+0x118>)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	440b      	add	r3, r1
 8003a20:	3308      	adds	r3, #8
 8003a22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003a24:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <inc_lock+0x118>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4413      	add	r3, r2
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	2200      	movs	r2, #0
 8003a30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <inc_lock+0xe0>
 8003a38:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <inc_lock+0x118>)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	330c      	adds	r3, #12
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <inc_lock+0xe0>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e015      	b.n	8003a78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d108      	bne.n	8003a64 <inc_lock+0xf8>
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <inc_lock+0x118>)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	e001      	b.n	8003a68 <inc_lock+0xfc>
 8003a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a68:	4906      	ldr	r1, [pc, #24]	; (8003a84 <inc_lock+0x118>)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	440b      	add	r3, r1
 8003a70:	330c      	adds	r3, #12
 8003a72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	20002564 	.word	0x20002564

08003a88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d825      	bhi.n	8003ae8 <dec_lock+0x60>
		n = Files[i].ctr;
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <dec_lock+0x74>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003aaa:	89fb      	ldrh	r3, [r7, #14]
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab0:	d101      	bne.n	8003ab6 <dec_lock+0x2e>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <dec_lock+0x3a>
 8003abc:	89fb      	ldrh	r3, [r7, #14]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <dec_lock+0x74>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	330c      	adds	r3, #12
 8003acc:	89fa      	ldrh	r2, [r7, #14]
 8003ace:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <dec_lock+0x5a>
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <dec_lock+0x74>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4413      	add	r3, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	737b      	strb	r3, [r7, #13]
 8003ae6:	e001      	b.n	8003aec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003ae8:	2302      	movs	r3, #2
 8003aea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003aec:	7b7b      	ldrb	r3, [r7, #13]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20002564 	.word	0x20002564

08003b00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e010      	b.n	8003b30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003b0e:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <clear_lock+0x44>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	4413      	add	r3, r2
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d105      	bne.n	8003b2a <clear_lock+0x2a>
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <clear_lock+0x44>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4413      	add	r3, r2
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d9eb      	bls.n	8003b0e <clear_lock+0xe>
	}
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	20002564 	.word	0x20002564

08003b48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	78db      	ldrb	r3, [r3, #3]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d034      	beq.n	8003bc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7858      	ldrb	r0, [r3, #1]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	f7ff fd40 	bl	80035f4 <disk_write>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e022      	b.n	8003bc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	1ad2      	subs	r2, r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d217      	bcs.n	8003bc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	789b      	ldrb	r3, [r3, #2]
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	e010      	b.n	8003bc0 <sync_window+0x78>
					wsect += fs->fsize;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7858      	ldrb	r0, [r3, #1]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	f7ff fd1d 	bl	80035f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d8eb      	bhi.n	8003b9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d01b      	beq.n	8003c20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ffad 	bl	8003b48 <sync_window>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7858      	ldrb	r0, [r3, #1]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c02:	2301      	movs	r3, #1
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	f7ff fcd5 	bl	80035b4 <disk_read>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff87 	bl	8003b48 <sync_window>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d159      	bne.n	8003cf8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d149      	bne.n	8003ce0 <sync_fs+0xb4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	791b      	ldrb	r3, [r3, #4]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d145      	bne.n	8003ce0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	899b      	ldrh	r3, [r3, #12]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2100      	movs	r1, #0
 8003c62:	f7ff fda8 	bl	80037b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3338      	adds	r3, #56	; 0x38
 8003c6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003c6e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fd37 	bl	80036e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3338      	adds	r3, #56	; 0x38
 8003c7c:	4921      	ldr	r1, [pc, #132]	; (8003d04 <sync_fs+0xd8>)
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fd4c 	bl	800371c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3338      	adds	r3, #56	; 0x38
 8003c88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c8c:	491e      	ldr	r1, [pc, #120]	; (8003d08 <sync_fs+0xdc>)
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fd44 	bl	800371c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3338      	adds	r3, #56	; 0x38
 8003c98:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f7ff fd3a 	bl	800371c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3338      	adds	r3, #56	; 0x38
 8003cac:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7ff fd30 	bl	800371c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	7858      	ldrb	r0, [r3, #1]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f7ff fc8d 	bl	80035f4 <disk_write>
			fs->fsi_flag = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fca3 	bl	8003634 <disk_ioctl>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <sync_fs+0xcc>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	41615252 	.word	0x41615252
 8003d08:	61417272 	.word	0x61417272

08003d0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	3b02      	subs	r3, #2
 8003d1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	3b02      	subs	r3, #2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d301      	bcc.n	8003d2c <clust2sect+0x20>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e008      	b.n	8003d3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	895b      	ldrh	r3, [r3, #10]
 8003d30:	461a      	mov	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	fb03 f202 	mul.w	r2, r3, r2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	4413      	add	r3, r2
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d904      	bls.n	8003d6a <get_fat+0x20>
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e0bb      	b.n	8003ee8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	f000 8083 	beq.w	8003e86 <get_fat+0x13c>
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	f300 80a7 	bgt.w	8003ed4 <get_fat+0x18a>
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d002      	beq.n	8003d90 <get_fat+0x46>
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d056      	beq.n	8003e3c <get_fat+0xf2>
 8003d8e:	e0a1      	b.n	8003ed4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	899b      	ldrh	r3, [r3, #12]
 8003da6:	4619      	mov	r1, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dae:	4413      	add	r3, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	6938      	ldr	r0, [r7, #16]
 8003db4:	f7ff ff0c 	bl	8003bd0 <move_window>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 808d 	bne.w	8003eda <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	60fa      	str	r2, [r7, #12]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	8992      	ldrh	r2, [r2, #12]
 8003dca:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dce:	fb01 f202 	mul.w	r2, r1, r2
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ddc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	899b      	ldrh	r3, [r3, #12]
 8003de6:	4619      	mov	r1, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dee:	4413      	add	r3, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	6938      	ldr	r0, [r7, #16]
 8003df4:	f7ff feec 	bl	8003bd0 <move_window>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d16f      	bne.n	8003ede <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	899b      	ldrh	r3, [r3, #12]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e0a:	fb01 f202 	mul.w	r2, r1, r2
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <get_fat+0xe8>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	e002      	b.n	8003e38 <get_fat+0xee>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e38:	617b      	str	r3, [r7, #20]
			break;
 8003e3a:	e055      	b.n	8003ee8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	899b      	ldrh	r3, [r3, #12]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e50:	4413      	add	r3, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	6938      	ldr	r0, [r7, #16]
 8003e56:	f7ff febb 	bl	8003bd0 <move_window>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d140      	bne.n	8003ee2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	8992      	ldrh	r2, [r2, #12]
 8003e6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e72:	fb00 f202 	mul.w	r2, r0, r2
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	440b      	add	r3, r1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fbf8 	bl	8003670 <ld_word>
 8003e80:	4603      	mov	r3, r0
 8003e82:	617b      	str	r3, [r7, #20]
			break;
 8003e84:	e030      	b.n	8003ee8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	899b      	ldrh	r3, [r3, #12]
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6938      	ldr	r0, [r7, #16]
 8003ea0:	f7ff fe96 	bl	8003bd0 <move_window>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11d      	bne.n	8003ee6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	8992      	ldrh	r2, [r2, #12]
 8003eb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ebc:	fb00 f202 	mul.w	r2, r0, r2
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fbeb 	bl	80036a0 <ld_dword>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ed0:	617b      	str	r3, [r7, #20]
			break;
 8003ed2:	e009      	b.n	8003ee8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e006      	b.n	8003ee8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003eda:	bf00      	nop
 8003edc:	e004      	b.n	8003ee8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ee6:	bf00      	nop
		}
	}

	return val;
 8003ee8:	697b      	ldr	r3, [r7, #20]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003ef2:	b590      	push	{r4, r7, lr}
 8003ef4:	b089      	sub	sp, #36	; 0x24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003efe:	2302      	movs	r3, #2
 8003f00:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	f240 8102 	bls.w	800410e <put_fat+0x21c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	f080 80fc 	bcs.w	800410e <put_fat+0x21c>
		switch (fs->fs_type) {
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	f000 80b6 	beq.w	800408c <put_fat+0x19a>
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	f300 80fd 	bgt.w	8004120 <put_fat+0x22e>
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d003      	beq.n	8003f32 <put_fat+0x40>
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	f000 8083 	beq.w	8004036 <put_fat+0x144>
 8003f30:	e0f6      	b.n	8004120 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	899b      	ldrh	r3, [r3, #12]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f50:	4413      	add	r3, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff fe3b 	bl	8003bd0 <move_window>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f5e:	7ffb      	ldrb	r3, [r7, #31]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 80d6 	bne.w	8004112 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	61ba      	str	r2, [r7, #24]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	8992      	ldrh	r2, [r2, #12]
 8003f76:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f7a:	fb00 f202 	mul.w	r2, r0, r2
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	440b      	add	r3, r1
 8003f82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <put_fat+0xb8>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b25b      	sxtb	r3, r3
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	b25a      	sxtb	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	e001      	b.n	8003fae <put_fat+0xbc>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	899b      	ldrh	r3, [r3, #12]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fc8:	4413      	add	r3, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff fdff 	bl	8003bd0 <move_window>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 809c 	bne.w	8004116 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	899b      	ldrh	r3, [r3, #12]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ff0:	fb00 f202 	mul.w	r2, r0, r2
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <put_fat+0x11a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e00e      	b.n	800402a <put_fat+0x138>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b25b      	sxtb	r3, r3
 8004012:	f023 030f 	bic.w	r3, r3, #15
 8004016:	b25a      	sxtb	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	b25b      	sxtb	r3, r3
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	b25b      	sxtb	r3, r3
 8004024:	4313      	orrs	r3, r2
 8004026:	b25b      	sxtb	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	70da      	strb	r2, [r3, #3]
			break;
 8004034:	e074      	b.n	8004120 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	899b      	ldrh	r3, [r3, #12]
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	b29b      	uxth	r3, r3
 8004042:	4619      	mov	r1, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	fbb3 f3f1 	udiv	r3, r3, r1
 800404a:	4413      	add	r3, r2
 800404c:	4619      	mov	r1, r3
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff fdbe 	bl	8003bd0 <move_window>
 8004054:	4603      	mov	r3, r0
 8004056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004058:	7ffb      	ldrb	r3, [r7, #31]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d15d      	bne.n	800411a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	8992      	ldrh	r2, [r2, #12]
 800406c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004070:	fb00 f202 	mul.w	r2, r0, r2
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	440b      	add	r3, r1
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	b292      	uxth	r2, r2
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fb31 	bl	80036e6 <st_word>
			fs->wflag = 1;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	70da      	strb	r2, [r3, #3]
			break;
 800408a:	e049      	b.n	8004120 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	899b      	ldrh	r3, [r3, #12]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	b29b      	uxth	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a0:	4413      	add	r3, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7ff fd93 	bl	8003bd0 <move_window>
 80040aa:	4603      	mov	r3, r0
 80040ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040ae:	7ffb      	ldrb	r3, [r7, #31]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d134      	bne.n	800411e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	8992      	ldrh	r2, [r2, #12]
 80040c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80040cc:	fb00 f202 	mul.w	r2, r0, r2
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	440b      	add	r3, r1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fae3 	bl	80036a0 <ld_dword>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80040e0:	4323      	orrs	r3, r4
 80040e2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	8992      	ldrh	r2, [r2, #12]
 80040f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80040f6:	fb00 f202 	mul.w	r2, r0, r2
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	440b      	add	r3, r1
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fb0b 	bl	800371c <st_dword>
			fs->wflag = 1;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	70da      	strb	r2, [r3, #3]
			break;
 800410c:	e008      	b.n	8004120 <put_fat+0x22e>
		}
	}
 800410e:	bf00      	nop
 8004110:	e006      	b.n	8004120 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004112:	bf00      	nop
 8004114:	e004      	b.n	8004120 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004116:	bf00      	nop
 8004118:	e002      	b.n	8004120 <put_fat+0x22e>
			if (res != FR_OK) break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <put_fat+0x22e>
			if (res != FR_OK) break;
 800411e:	bf00      	nop
	return res;
 8004120:	7ffb      	ldrb	r3, [r7, #31]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	; 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}

0800412a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b088      	sub	sp, #32
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d904      	bls.n	8004150 <remove_chain+0x26>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	d301      	bcc.n	8004154 <remove_chain+0x2a>
 8004150:	2302      	movs	r3, #2
 8004152:	e04b      	b.n	80041ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800415a:	f04f 32ff 	mov.w	r2, #4294967295
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	69b8      	ldr	r0, [r7, #24]
 8004162:	f7ff fec6 	bl	8003ef2 <put_fat>
 8004166:	4603      	mov	r3, r0
 8004168:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <remove_chain+0x4a>
 8004170:	7ffb      	ldrb	r3, [r7, #31]
 8004172:	e03b      	b.n	80041ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff fde7 	bl	8003d4a <get_fat>
 800417c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d031      	beq.n	80041e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <remove_chain+0x64>
 800418a:	2302      	movs	r3, #2
 800418c:	e02e      	b.n	80041ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d101      	bne.n	800419a <remove_chain+0x70>
 8004196:	2301      	movs	r3, #1
 8004198:	e028      	b.n	80041ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800419a:	2200      	movs	r2, #0
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	69b8      	ldr	r0, [r7, #24]
 80041a0:	f7ff fea7 	bl	8003ef2 <put_fat>
 80041a4:	4603      	mov	r3, r0
 80041a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80041a8:	7ffb      	ldrb	r3, [r7, #31]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <remove_chain+0x88>
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	e01c      	b.n	80041ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	3b02      	subs	r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d20b      	bcs.n	80041d8 <remove_chain+0xae>
			fs->free_clst++;
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3c6      	bcc.n	8004174 <remove_chain+0x4a>
 80041e6:	e000      	b.n	80041ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80041e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <create_chain+0x2c>
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	429a      	cmp	r2, r3
 800421e:	d31b      	bcc.n	8004258 <create_chain+0x64>
 8004220:	2301      	movs	r3, #1
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e018      	b.n	8004258 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fd8e 	bl	8003d4a <get_fat>
 800422e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d801      	bhi.n	800423a <create_chain+0x46>
 8004236:	2301      	movs	r3, #1
 8004238:	e070      	b.n	800431c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d101      	bne.n	8004246 <create_chain+0x52>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	e06a      	b.n	800431c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	429a      	cmp	r2, r3
 800424e:	d201      	bcs.n	8004254 <create_chain+0x60>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	e063      	b.n	800431c <create_chain+0x128>
		scl = clst;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	3301      	adds	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	429a      	cmp	r2, r3
 800426a:	d307      	bcc.n	800427c <create_chain+0x88>
				ncl = 2;
 800426c:	2302      	movs	r3, #2
 800426e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	429a      	cmp	r2, r3
 8004276:	d901      	bls.n	800427c <create_chain+0x88>
 8004278:	2300      	movs	r3, #0
 800427a:	e04f      	b.n	800431c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800427c:	69f9      	ldr	r1, [r7, #28]
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fd63 	bl	8003d4a <get_fat>
 8004284:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d003      	beq.n	800429a <create_chain+0xa6>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d101      	bne.n	800429e <create_chain+0xaa>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	e03e      	b.n	800431c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d1da      	bne.n	800425c <create_chain+0x68>
 80042a6:	2300      	movs	r3, #0
 80042a8:	e038      	b.n	800431c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80042aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80042ac:	f04f 32ff 	mov.w	r2, #4294967295
 80042b0:	69f9      	ldr	r1, [r7, #28]
 80042b2:	6938      	ldr	r0, [r7, #16]
 80042b4:	f7ff fe1d 	bl	8003ef2 <put_fat>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <create_chain+0xe2>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d006      	beq.n	80042d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	6938      	ldr	r0, [r7, #16]
 80042ce:	f7ff fe10 	bl	8003ef2 <put_fat>
 80042d2:	4603      	mov	r3, r0
 80042d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <create_chain+0x116>
		fs->last_clst = ncl;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	3b02      	subs	r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d804      	bhi.n	80042fa <create_chain+0x106>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	1e5a      	subs	r2, r3, #1
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	711a      	strb	r2, [r3, #4]
 8004308:	e007      	b.n	800431a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800430a:	7dfb      	ldrb	r3, [r7, #23]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d102      	bne.n	8004316 <create_chain+0x122>
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	e000      	b.n	8004318 <create_chain+0x124>
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800431a:	69fb      	ldr	r3, [r7, #28]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	3304      	adds	r3, #4
 800433a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	899b      	ldrh	r3, [r3, #12]
 8004340:	461a      	mov	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	fbb3 f3f2 	udiv	r3, r3, r2
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	8952      	ldrh	r2, [r2, #10]
 800434c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004350:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1d1a      	adds	r2, r3, #4
 8004356:	613a      	str	r2, [r7, #16]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <clmt_clust+0x42>
 8004362:	2300      	movs	r3, #0
 8004364:	e010      	b.n	8004388 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	d307      	bcc.n	800437e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3304      	adds	r3, #4
 800437a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800437c:	e7e9      	b.n	8004352 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800437e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043aa:	d204      	bcs.n	80043b6 <dir_sdi+0x22>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <dir_sdi+0x26>
		return FR_INT_ERR;
 80043b6:	2302      	movs	r3, #2
 80043b8:	e071      	b.n	800449e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <dir_sdi+0x46>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d902      	bls.n	80043da <dir_sdi+0x46>
		clst = fs->dirbase;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10c      	bne.n	80043fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	8912      	ldrh	r2, [r2, #8]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d301      	bcc.n	80043f0 <dir_sdi+0x5c>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e056      	b.n	800449e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	61da      	str	r2, [r3, #28]
 80043f8:	e02d      	b.n	8004456 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	895b      	ldrh	r3, [r3, #10]
 80043fe:	461a      	mov	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	899b      	ldrh	r3, [r3, #12]
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800440a:	e019      	b.n	8004440 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fc9a 	bl	8003d4a <get_fat>
 8004416:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d101      	bne.n	8004424 <dir_sdi+0x90>
 8004420:	2301      	movs	r3, #1
 8004422:	e03c      	b.n	800449e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d904      	bls.n	8004434 <dir_sdi+0xa0>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	429a      	cmp	r2, r3
 8004432:	d301      	bcc.n	8004438 <dir_sdi+0xa4>
 8004434:	2302      	movs	r3, #2
 8004436:	e032      	b.n	800449e <dir_sdi+0x10a>
			ofs -= csz;
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d2e1      	bcs.n	800440c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f7ff fc5e 	bl	8003d0c <clust2sect>
 8004450:	4602      	mov	r2, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <dir_sdi+0xd4>
 8004464:	2302      	movs	r3, #2
 8004466:	e01a      	b.n	800449e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	899b      	ldrh	r3, [r3, #12]
 8004470:	4619      	mov	r1, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	fbb3 f3f1 	udiv	r3, r3, r1
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	899b      	ldrh	r3, [r3, #12]
 8004488:	461a      	mov	r2, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004490:	fb00 f202 	mul.w	r2, r0, r2
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	18ca      	adds	r2, r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	3320      	adds	r3, #32
 80044bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <dir_next+0x28>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044cc:	d301      	bcc.n	80044d2 <dir_next+0x2c>
 80044ce:	2304      	movs	r3, #4
 80044d0:	e0bb      	b.n	800464a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	899b      	ldrh	r3, [r3, #12]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	fbb3 f1f2 	udiv	r1, r3, r2
 80044de:	fb01 f202 	mul.w	r2, r1, r2
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 809d 	bne.w	8004624 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10b      	bne.n	8004514 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	8912      	ldrh	r2, [r2, #8]
 8004504:	4293      	cmp	r3, r2
 8004506:	f0c0 808d 	bcc.w	8004624 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	61da      	str	r2, [r3, #28]
 8004510:	2304      	movs	r3, #4
 8004512:	e09a      	b.n	800464a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	899b      	ldrh	r3, [r3, #12]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	8952      	ldrh	r2, [r2, #10]
 8004524:	3a01      	subs	r2, #1
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d17b      	bne.n	8004624 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7ff fc08 	bl	8003d4a <get_fat>
 800453a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d801      	bhi.n	8004546 <dir_next+0xa0>
 8004542:	2302      	movs	r3, #2
 8004544:	e081      	b.n	800464a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d101      	bne.n	8004552 <dir_next+0xac>
 800454e:	2301      	movs	r3, #1
 8004550:	e07b      	b.n	800464a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	429a      	cmp	r2, r3
 800455a:	d359      	bcc.n	8004610 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	61da      	str	r2, [r3, #28]
 8004568:	2304      	movs	r3, #4
 800456a:	e06e      	b.n	800464a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f7ff fe3d 	bl	80041f4 <create_chain>
 800457a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <dir_next+0xe0>
 8004582:	2307      	movs	r3, #7
 8004584:	e061      	b.n	800464a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <dir_next+0xea>
 800458c:	2302      	movs	r3, #2
 800458e:	e05c      	b.n	800464a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d101      	bne.n	800459c <dir_next+0xf6>
 8004598:	2301      	movs	r3, #1
 800459a:	e056      	b.n	800464a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff fad3 	bl	8003b48 <sync_window>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <dir_next+0x106>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e04e      	b.n	800464a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	899b      	ldrh	r3, [r3, #12]
 80045b6:	461a      	mov	r2, r3
 80045b8:	2100      	movs	r1, #0
 80045ba:	f7ff f8fc 	bl	80037b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	6979      	ldr	r1, [r7, #20]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff fba1 	bl	8003d0c <clust2sect>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	635a      	str	r2, [r3, #52]	; 0x34
 80045d0:	e012      	b.n	80045f8 <dir_next+0x152>
						fs->wflag = 1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fab5 	bl	8003b48 <sync_window>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <dir_next+0x142>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e030      	b.n	800464a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3301      	adds	r3, #1
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	635a      	str	r2, [r3, #52]	; 0x34
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	895b      	ldrh	r3, [r3, #10]
 80045fc:	461a      	mov	r2, r3
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4293      	cmp	r3, r2
 8004602:	d3e6      	bcc.n	80045d2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fb77 	bl	8003d0c <clust2sect>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	899b      	ldrh	r3, [r3, #12]
 8004634:	461a      	mov	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	fbb3 f0f2 	udiv	r0, r3, r2
 800463c:	fb00 f202 	mul.w	r2, r0, r2
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	18ca      	adds	r2, r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004662:	2100      	movs	r1, #0
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fe95 	bl	8004394 <dir_sdi>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d12b      	bne.n	80046cc <dir_alloc+0x7a>
		n = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4619      	mov	r1, r3
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff faa6 	bl	8003bd0 <move_window>
 8004684:	4603      	mov	r3, r0
 8004686:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11d      	bne.n	80046ca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2be5      	cmp	r3, #229	; 0xe5
 8004696:	d004      	beq.n	80046a2 <dir_alloc+0x50>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d102      	bne.n	80046b6 <dir_alloc+0x64>
 80046b0:	e00c      	b.n	80046cc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80046b6:	2101      	movs	r1, #1
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fef4 	bl	80044a6 <dir_next>
 80046be:	4603      	mov	r3, r0
 80046c0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0d7      	beq.n	8004678 <dir_alloc+0x26>
 80046c8:	e000      	b.n	80046cc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80046ca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d101      	bne.n	80046d6 <dir_alloc+0x84>
 80046d2:	2307      	movs	r3, #7
 80046d4:	75fb      	strb	r3, [r7, #23]
	return res;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	331a      	adds	r3, #26
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe ffbe 	bl	8003670 <ld_word>
 80046f4:	4603      	mov	r3, r0
 80046f6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d109      	bne.n	8004714 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	3314      	adds	r3, #20
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe ffb3 	bl	8003670 <ld_word>
 800470a:	4603      	mov	r3, r0
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004714:	68fb      	ldr	r3, [r7, #12]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	331a      	adds	r3, #26
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	b292      	uxth	r2, r2
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe ffd6 	bl	80036e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d109      	bne.n	8004756 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f103 0214 	add.w	r2, r3, #20
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	b29b      	uxth	r3, r3
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fe ffc8 	bl	80036e6 <st_word>
	}
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	331a      	adds	r3, #26
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe ff7e 	bl	8003670 <ld_word>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <cmp_lfn+0x1e>
 800477a:	2300      	movs	r3, #0
 800477c:	e059      	b.n	8004832 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004786:	1e5a      	subs	r2, r3, #1
 8004788:	4613      	mov	r3, r2
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004794:	2301      	movs	r3, #1
 8004796:	81fb      	strh	r3, [r7, #14]
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e033      	b.n	8004806 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800479e:	4a27      	ldr	r2, [pc, #156]	; (800483c <cmp_lfn+0xdc>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4413      	add	r3, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ff5f 	bl	8003670 <ld_word>
 80047b2:	4603      	mov	r3, r0
 80047b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80047b6:	89fb      	ldrh	r3, [r7, #14]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01a      	beq.n	80047f2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2bfe      	cmp	r3, #254	; 0xfe
 80047c0:	d812      	bhi.n	80047e8 <cmp_lfn+0x88>
 80047c2:	89bb      	ldrh	r3, [r7, #12]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 ffad 	bl	8006724 <ff_wtoupper>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461c      	mov	r4, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	617a      	str	r2, [r7, #20]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 ffa1 	bl	8006724 <ff_wtoupper>
 80047e2:	4603      	mov	r3, r0
 80047e4:	429c      	cmp	r4, r3
 80047e6:	d001      	beq.n	80047ec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80047e8:	2300      	movs	r3, #0
 80047ea:	e022      	b.n	8004832 <cmp_lfn+0xd2>
			}
			wc = uc;
 80047ec:	89bb      	ldrh	r3, [r7, #12]
 80047ee:	81fb      	strh	r3, [r7, #14]
 80047f0:	e006      	b.n	8004800 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047f2:	89bb      	ldrh	r3, [r7, #12]
 80047f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d001      	beq.n	8004800 <cmp_lfn+0xa0>
 80047fc:	2300      	movs	r3, #0
 80047fe:	e018      	b.n	8004832 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d9c8      	bls.n	800479e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <cmp_lfn+0xd0>
 8004818:	89fb      	ldrh	r3, [r7, #14]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <cmp_lfn+0xd0>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <cmp_lfn+0xd0>
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004830:	2301      	movs	r3, #1
}
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}
 800483a:	bf00      	nop
 800483c:	08006ac4 	.word	0x08006ac4

08004840 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	460b      	mov	r3, r1
 8004850:	71fb      	strb	r3, [r7, #7]
 8004852:	4613      	mov	r3, r2
 8004854:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	330d      	adds	r3, #13
 800485a:	79ba      	ldrb	r2, [r7, #6]
 800485c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	330b      	adds	r3, #11
 8004862:	220f      	movs	r2, #15
 8004864:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	330c      	adds	r3, #12
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	331a      	adds	r3, #26
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe ff36 	bl	80036e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	1e5a      	subs	r2, r3, #1
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	82fb      	strh	r3, [r7, #22]
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004892:	8afb      	ldrh	r3, [r7, #22]
 8004894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004898:	4293      	cmp	r3, r2
 800489a:	d007      	beq.n	80048ac <put_lfn+0x6c>
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	61fa      	str	r2, [r7, #28]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <put_lfn+0xcc>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4413      	add	r3, r2
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4413      	add	r3, r2
 80048ba:	8afa      	ldrh	r2, [r7, #22]
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe ff11 	bl	80036e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80048c4:	8afb      	ldrh	r3, [r7, #22]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <put_lfn+0x90>
 80048ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	3301      	adds	r3, #1
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d9da      	bls.n	8004892 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80048dc:	8afb      	ldrh	r3, [r7, #22]
 80048de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d006      	beq.n	80048f4 <put_lfn+0xb4>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d103      	bne.n	80048fc <put_lfn+0xbc>
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	79fa      	ldrb	r2, [r7, #7]
 8004900:	701a      	strb	r2, [r3, #0]
}
 8004902:	bf00      	nop
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	08006ac4 	.word	0x08006ac4

08004910 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800491e:	220b      	movs	r2, #11
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7fe ff26 	bl	8003774 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b05      	cmp	r3, #5
 800492c:	d92b      	bls.n	8004986 <gen_numname+0x76>
		sr = seq;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004932:	e022      	b.n	800497a <gen_numname+0x6a>
			wc = *lfn++;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800493e:	2300      	movs	r3, #0
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	e017      	b.n	8004974 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	005a      	lsls	r2, r3, #1
 8004948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	4413      	add	r3, r2
 8004950:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <gen_numname+0x5e>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004968:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800496c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	3301      	adds	r3, #1
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d9e4      	bls.n	8004944 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1d8      	bne.n	8004934 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004986:	2307      	movs	r3, #7
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	b2db      	uxtb	r3, r3
 8004994:	3330      	adds	r3, #48	; 0x30
 8004996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800499a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800499e:	2b39      	cmp	r3, #57	; 0x39
 80049a0:	d904      	bls.n	80049ac <gen_numname+0x9c>
 80049a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049a6:	3307      	adds	r3, #7
 80049a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	1e5a      	subs	r2, r3, #1
 80049b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80049b2:	3330      	adds	r3, #48	; 0x30
 80049b4:	443b      	add	r3, r7
 80049b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80049ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1df      	bne.n	800498a <gen_numname+0x7a>
	ns[i] = '~';
 80049ca:	f107 0214 	add.w	r2, r7, #20
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	4413      	add	r3, r2
 80049d2:	227e      	movs	r2, #126	; 0x7e
 80049d4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	e002      	b.n	80049e2 <gen_numname+0xd2>
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	3301      	adds	r3, #1
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d205      	bcs.n	80049f6 <gen_numname+0xe6>
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d1f2      	bne.n	80049dc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	2b07      	cmp	r3, #7
 80049fa:	d807      	bhi.n	8004a0c <gen_numname+0xfc>
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a02:	3330      	adds	r3, #48	; 0x30
 8004a04:	443b      	add	r3, r7
 8004a06:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004a0a:	e000      	b.n	8004a0e <gen_numname+0xfe>
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	627a      	str	r2, [r7, #36]	; 0x24
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	460a      	mov	r2, r1
 8004a1a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	2b07      	cmp	r3, #7
 8004a20:	d9e9      	bls.n	80049f6 <gen_numname+0xe6>
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	3730      	adds	r7, #48	; 0x30
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004a38:	230b      	movs	r3, #11
 8004a3a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	0852      	lsrs	r2, r2, #1
 8004a42:	01db      	lsls	r3, r3, #7
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	6079      	str	r1, [r7, #4]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ed      	bne.n	8004a3c <sum_sfn+0x10>
	return sum;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fc88 	bl	8004394 <dir_sdi>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <dir_find+0x24>
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	e0a9      	b.n	8004be6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004a92:	23ff      	movs	r3, #255	; 0xff
 8004a94:	753b      	strb	r3, [r7, #20]
 8004a96:	7d3b      	ldrb	r3, [r7, #20]
 8004a98:	757b      	strb	r3, [r7, #21]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6938      	ldr	r0, [r7, #16]
 8004aaa:	f7ff f891 	bl	8003bd0 <move_window>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 8090 	bne.w	8004bda <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ac2:	7dbb      	ldrb	r3, [r7, #22]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <dir_find+0x60>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	75fb      	strb	r3, [r7, #23]
 8004acc:	e08a      	b.n	8004be4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	330b      	adds	r3, #11
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7bfa      	ldrb	r2, [r7, #15]
 8004ae0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004ae2:	7dbb      	ldrb	r3, [r7, #22]
 8004ae4:	2be5      	cmp	r3, #229	; 0xe5
 8004ae6:	d007      	beq.n	8004af8 <dir_find+0x8a>
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <dir_find+0x98>
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d006      	beq.n	8004b06 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004af8:	23ff      	movs	r3, #255	; 0xff
 8004afa:	757b      	strb	r3, [r7, #21]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
 8004b04:	e05e      	b.n	8004bc4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b0f      	cmp	r3, #15
 8004b0a:	d136      	bne.n	8004b7a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d154      	bne.n	8004bc4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004b1a:	7dbb      	ldrb	r3, [r7, #22]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	7b5b      	ldrb	r3, [r3, #13]
 8004b2a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004b2c:	7dbb      	ldrb	r3, [r7, #22]
 8004b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b32:	75bb      	strb	r3, [r7, #22]
 8004b34:	7dbb      	ldrb	r3, [r7, #22]
 8004b36:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004b40:	7dba      	ldrb	r2, [r7, #22]
 8004b42:	7d7b      	ldrb	r3, [r7, #21]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d115      	bne.n	8004b74 <dir_find+0x106>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	330d      	adds	r3, #13
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	7d3a      	ldrb	r2, [r7, #20]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d10e      	bne.n	8004b74 <dir_find+0x106>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f7ff fdfd 	bl	8004760 <cmp_lfn>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <dir_find+0x106>
 8004b6c:	7d7b      	ldrb	r3, [r7, #21]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e000      	b.n	8004b76 <dir_find+0x108>
 8004b74:	23ff      	movs	r3, #255	; 0xff
 8004b76:	757b      	strb	r3, [r7, #21]
 8004b78:	e024      	b.n	8004bc4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004b7a:	7d7b      	ldrb	r3, [r7, #21]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <dir_find+0x126>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ff51 	bl	8004a2c <sum_sfn>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	7d3b      	ldrb	r3, [r7, #20]
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d024      	beq.n	8004bde <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <dir_find+0x14a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a18      	ldr	r0, [r3, #32]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3324      	adds	r3, #36	; 0x24
 8004baa:	220b      	movs	r2, #11
 8004bac:	4619      	mov	r1, r3
 8004bae:	f7fe fe1d 	bl	80037ec <mem_cmp>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d014      	beq.n	8004be2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004bb8:	23ff      	movs	r3, #255	; 0xff
 8004bba:	757b      	strb	r3, [r7, #21]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff fc6d 	bl	80044a6 <dir_next>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f43f af65 	beq.w	8004aa2 <dir_find+0x34>
 8004bd8:	e004      	b.n	8004be4 <dir_find+0x176>
		if (res != FR_OK) break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004be2:	bf00      	nop

	return res;
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004c04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <dir_register+0x20>
 8004c0c:	2306      	movs	r3, #6
 8004c0e:	e0e0      	b.n	8004dd2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	e002      	b.n	8004c1c <dir_register+0x2c>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	3301      	adds	r3, #1
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f4      	bne.n	8004c16 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004c32:	f107 030c 	add.w	r3, r7, #12
 8004c36:	220c      	movs	r2, #12
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe fd9b 	bl	8003774 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d032      	beq.n	8004cae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2240      	movs	r2, #64	; 0x40
 8004c4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004c50:	2301      	movs	r3, #1
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c54:	e016      	b.n	8004c84 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	f107 010c 	add.w	r1, r7, #12
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	f7ff fe53 	bl	8004910 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff feff 	bl	8004a6e <dir_find>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004c76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	3301      	adds	r3, #1
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	2b63      	cmp	r3, #99	; 0x63
 8004c88:	d9e5      	bls.n	8004c56 <dir_register+0x66>
 8004c8a:	e000      	b.n	8004c8e <dir_register+0x9e>
			if (res != FR_OK) break;
 8004c8c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	2b64      	cmp	r3, #100	; 0x64
 8004c92:	d101      	bne.n	8004c98 <dir_register+0xa8>
 8004c94:	2307      	movs	r3, #7
 8004c96:	e09c      	b.n	8004dd2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d002      	beq.n	8004ca6 <dir_register+0xb6>
 8004ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ca4:	e095      	b.n	8004dd2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004ca6:	7dfa      	ldrb	r2, [r7, #23]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <dir_register+0xd8>
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	330c      	adds	r3, #12
 8004cbc:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <dir_register+0x1ec>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	e000      	b.n	8004cca <dir_register+0xda>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004ccc:	6a39      	ldr	r1, [r7, #32]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fcbf 	bl	8004652 <dir_alloc>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d148      	bne.n	8004d74 <dir_register+0x184>
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d042      	beq.n	8004d74 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	015b      	lsls	r3, r3, #5
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fb4a 	bl	8004394 <dir_sdi>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d132      	bne.n	8004d74 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3324      	adds	r3, #36	; 0x24
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fe8a 	bl	8004a2c <sum_sfn>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	4619      	mov	r1, r3
 8004d22:	69f8      	ldr	r0, [r7, #28]
 8004d24:	f7fe ff54 	bl	8003bd0 <move_window>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11d      	bne.n	8004d72 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	6918      	ldr	r0, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a19      	ldr	r1, [r3, #32]
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	7efb      	ldrb	r3, [r7, #27]
 8004d44:	f7ff fd7c 	bl	8004840 <put_lfn>
				fs->wflag = 1;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004d4e:	2100      	movs	r1, #0
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fba8 	bl	80044a6 <dir_next>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <dir_register+0x184>
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	623b      	str	r3, [r7, #32]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1d5      	bne.n	8004d1c <dir_register+0x12c>
 8004d70:	e000      	b.n	8004d74 <dir_register+0x184>
				if (res != FR_OK) break;
 8004d72:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d128      	bne.n	8004dce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4619      	mov	r1, r3
 8004d82:	69f8      	ldr	r0, [r7, #28]
 8004d84:	f7fe ff24 	bl	8003bd0 <move_window>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d11b      	bne.n	8004dce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fd09 	bl	80037b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a18      	ldr	r0, [r3, #32]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3324      	adds	r3, #36	; 0x24
 8004dac:	220b      	movs	r2, #11
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7fe fce0 	bl	8003774 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	f002 0218 	and.w	r2, r2, #24
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3730      	adds	r7, #48	; 0x30
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	4ec4ec4f 	.word	0x4ec4ec4f

08004de0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	61ba      	str	r2, [r7, #24]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e10:	2b1f      	cmp	r3, #31
 8004e12:	d940      	bls.n	8004e96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e16:	2b2f      	cmp	r3, #47	; 0x2f
 8004e18:	d006      	beq.n	8004e28 <create_name+0x48>
 8004e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e1c:	2b5c      	cmp	r3, #92	; 0x5c
 8004e1e:	d110      	bne.n	8004e42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004e20:	e002      	b.n	8004e28 <create_name+0x48>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3301      	adds	r3, #1
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b2f      	cmp	r3, #47	; 0x2f
 8004e32:	d0f6      	beq.n	8004e22 <create_name+0x42>
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	4413      	add	r3, r2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b5c      	cmp	r3, #92	; 0x5c
 8004e3e:	d0f0      	beq.n	8004e22 <create_name+0x42>
			break;
 8004e40:	e02a      	b.n	8004e98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2bfe      	cmp	r3, #254	; 0xfe
 8004e46:	d901      	bls.n	8004e4c <create_name+0x6c>
 8004e48:	2306      	movs	r3, #6
 8004e4a:	e17d      	b.n	8005148 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e54:	2101      	movs	r1, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fc28 	bl	80066ac <ff_convert>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <create_name+0x8a>
 8004e66:	2306      	movs	r3, #6
 8004e68:	e16e      	b.n	8005148 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6e:	d809      	bhi.n	8004e84 <create_name+0xa4>
 8004e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e72:	4619      	mov	r1, r3
 8004e74:	488d      	ldr	r0, [pc, #564]	; (80050ac <create_name+0x2cc>)
 8004e76:	f7fe fce0 	bl	800383a <chk_chr>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <create_name+0xa4>
 8004e80:	2306      	movs	r3, #6
 8004e82:	e161      	b.n	8005148 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	617a      	str	r2, [r7, #20]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004e94:	e7b4      	b.n	8004e00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004e96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	441a      	add	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ea4:	2b1f      	cmp	r3, #31
 8004ea6:	d801      	bhi.n	8004eac <create_name+0xcc>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	e000      	b.n	8004eae <create_name+0xce>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004eb2:	e011      	b.n	8004ed8 <create_name+0xf8>
		w = lfn[di - 1];
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004ec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d002      	beq.n	8004ed2 <create_name+0xf2>
 8004ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ece:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed0:	d106      	bne.n	8004ee0 <create_name+0x100>
		di--;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ea      	bne.n	8004eb4 <create_name+0xd4>
 8004ede:	e000      	b.n	8004ee2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004ee0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <create_name+0x118>
 8004ef4:	2306      	movs	r3, #6
 8004ef6:	e127      	b.n	8005148 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3324      	adds	r3, #36	; 0x24
 8004efc:	220b      	movs	r2, #11
 8004efe:	2120      	movs	r1, #32
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fc58 	bl	80037b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004f06:	2300      	movs	r3, #0
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	e002      	b.n	8004f12 <create_name+0x132>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d0f5      	beq.n	8004f0c <create_name+0x12c>
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f2c:	d0ee      	beq.n	8004f0c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <create_name+0x168>
 8004f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f38:	f043 0303 	orr.w	r3, r3, #3
 8004f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004f40:	e002      	b.n	8004f48 <create_name+0x168>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <create_name+0x182>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f54:	3b01      	subs	r3, #1
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f60:	d1ef      	bne.n	8004f42 <create_name+0x162>

	i = b = 0; ni = 8;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f68:	2300      	movs	r3, #0
 8004f6a:	623b      	str	r3, [r7, #32]
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	61ba      	str	r2, [r7, #24]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8090 	beq.w	80050a8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d006      	beq.n	8004f9c <create_name+0x1bc>
 8004f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f90:	2b2e      	cmp	r3, #46	; 0x2e
 8004f92:	d10a      	bne.n	8004faa <create_name+0x1ca>
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d006      	beq.n	8004faa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fa0:	f043 0303 	orr.w	r3, r3, #3
 8004fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fa8:	e07d      	b.n	80050a6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004faa:	6a3a      	ldr	r2, [r7, #32]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d203      	bcs.n	8004fba <create_name+0x1da>
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d123      	bne.n	8005002 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b0b      	cmp	r3, #11
 8004fbe:	d106      	bne.n	8004fce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fc4:	f043 0303 	orr.w	r3, r3, #3
 8004fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fcc:	e075      	b.n	80050ba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d005      	beq.n	8004fe2 <create_name+0x202>
 8004fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fda:	f043 0303 	orr.w	r3, r3, #3
 8004fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d866      	bhi.n	80050b8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	2308      	movs	r3, #8
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	230b      	movs	r3, #11
 8004ff4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005000:	e051      	b.n	80050a6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005004:	2b7f      	cmp	r3, #127	; 0x7f
 8005006:	d914      	bls.n	8005032 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005008:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f001 fb4d 	bl	80066ac <ff_convert>
 8005012:	4603      	mov	r3, r0
 8005014:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <create_name+0x246>
 800501c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800501e:	3b80      	subs	r3, #128	; 0x80
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <create_name+0x2d0>)
 8005022:	5cd3      	ldrb	r3, [r2, r3]
 8005024:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800502a:	f043 0302 	orr.w	r3, r3, #2
 800502e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	d007      	beq.n	8005048 <create_name+0x268>
 8005038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800503a:	4619      	mov	r1, r3
 800503c:	481d      	ldr	r0, [pc, #116]	; (80050b4 <create_name+0x2d4>)
 800503e:	f7fe fbfc 	bl	800383a <chk_chr>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005048:	235f      	movs	r3, #95	; 0x5f
 800504a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800504c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005050:	f043 0303 	orr.w	r3, r3, #3
 8005054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005058:	e01b      	b.n	8005092 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800505a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d909      	bls.n	8005074 <create_name+0x294>
 8005060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005062:	2b5a      	cmp	r3, #90	; 0x5a
 8005064:	d806      	bhi.n	8005074 <create_name+0x294>
					b |= 2;
 8005066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005072:	e00e      	b.n	8005092 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005076:	2b60      	cmp	r3, #96	; 0x60
 8005078:	d90b      	bls.n	8005092 <create_name+0x2b2>
 800507a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800507c:	2b7a      	cmp	r3, #122	; 0x7a
 800507e:	d808      	bhi.n	8005092 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800508c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800508e:	3b20      	subs	r3, #32
 8005090:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	623a      	str	r2, [r7, #32]
 8005098:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800509a:	b2d1      	uxtb	r1, r2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	460a      	mov	r2, r1
 80050a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80050a6:	e763      	b.n	8004f70 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80050a8:	bf00      	nop
 80050aa:	e006      	b.n	80050ba <create_name+0x2da>
 80050ac:	080069e4 	.word	0x080069e4
 80050b0:	08006a44 	.word	0x08006a44
 80050b4:	080069f0 	.word	0x080069f0
			if (si > di) break;			/* No extension */
 80050b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050c0:	2be5      	cmp	r3, #229	; 0xe5
 80050c2:	d103      	bne.n	80050cc <create_name+0x2ec>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2205      	movs	r2, #5
 80050c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d104      	bne.n	80050dc <create_name+0x2fc>
 80050d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80050dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d005      	beq.n	80050f4 <create_name+0x314>
 80050e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d105      	bne.n	8005100 <create_name+0x320>
 80050f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d117      	bne.n	800513c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800510c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d105      	bne.n	8005124 <create_name+0x344>
 8005118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800511c:	f043 0310 	orr.w	r3, r3, #16
 8005120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b04      	cmp	r3, #4
 800512e:	d105      	bne.n	800513c <create_name+0x35c>
 8005130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005134:	f043 0308 	orr.w	r3, r3, #8
 8005138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005142:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005146:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005164:	e002      	b.n	800516c <follow_path+0x1c>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b2f      	cmp	r3, #47	; 0x2f
 8005172:	d0f8      	beq.n	8005166 <follow_path+0x16>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b5c      	cmp	r3, #92	; 0x5c
 800517a:	d0f4      	beq.n	8005166 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b1f      	cmp	r3, #31
 8005188:	d80a      	bhi.n	80051a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005192:	2100      	movs	r1, #0
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff f8fd 	bl	8004394 <dir_sdi>
 800519a:	4603      	mov	r3, r0
 800519c:	75fb      	strb	r3, [r7, #23]
 800519e:	e048      	b.n	8005232 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80051a0:	463b      	mov	r3, r7
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fe1b 	bl	8004de0 <create_name>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d139      	bne.n	8005228 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fc5a 	bl	8004a6e <dir_find>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d12c      	bne.n	800522c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d127      	bne.n	800522c <follow_path+0xdc>
 80051dc:	2305      	movs	r3, #5
 80051de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80051e0:	e024      	b.n	800522c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80051e2:	7afb      	ldrb	r3, [r7, #11]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d121      	bne.n	8005230 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	799b      	ldrb	r3, [r3, #6]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80051f8:	2305      	movs	r3, #5
 80051fa:	75fb      	strb	r3, [r7, #23]
 80051fc:	e019      	b.n	8005232 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	8992      	ldrh	r2, [r2, #12]
 800520c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005210:	fb00 f202 	mul.w	r2, r0, r2
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	440b      	add	r3, r1
 8005218:	4619      	mov	r1, r3
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fa60 	bl	80046e0 <ld_clust>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005226:	e7bb      	b.n	80051a0 <follow_path+0x50>
			if (res != FR_OK) break;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <follow_path+0xe2>
				break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005230:	bf00      	nop
			}
		}
	}

	return res;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d031      	beq.n	80052b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e002      	b.n	8005260 <get_ldnumber+0x24>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	3301      	adds	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b1f      	cmp	r3, #31
 8005266:	d903      	bls.n	8005270 <get_ldnumber+0x34>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b3a      	cmp	r3, #58	; 0x3a
 800526e:	d1f4      	bne.n	800525a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b3a      	cmp	r3, #58	; 0x3a
 8005276:	d11c      	bne.n	80052b2 <get_ldnumber+0x76>
			tp = *path;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	60fa      	str	r2, [r7, #12]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	3b30      	subs	r3, #48	; 0x30
 8005288:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b09      	cmp	r3, #9
 800528e:	d80e      	bhi.n	80052ae <get_ldnumber+0x72>
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d10a      	bne.n	80052ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <get_ldnumber+0x72>
					vol = (int)i;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	3301      	adds	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	e002      	b.n	80052b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80052b6:	693b      	ldr	r3, [r7, #16]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	70da      	strb	r2, [r3, #3]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295
 80052da:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fe fc76 	bl	8003bd0 <move_window>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <check_fs+0x2a>
 80052ea:	2304      	movs	r3, #4
 80052ec:	e038      	b.n	8005360 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3338      	adds	r3, #56	; 0x38
 80052f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe f9ba 	bl	8003670 <ld_word>
 80052fc:	4603      	mov	r3, r0
 80052fe:	461a      	mov	r2, r3
 8005300:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <check_fs+0x48>
 8005308:	2303      	movs	r3, #3
 800530a:	e029      	b.n	8005360 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005312:	2be9      	cmp	r3, #233	; 0xe9
 8005314:	d009      	beq.n	800532a <check_fs+0x66>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800531c:	2beb      	cmp	r3, #235	; 0xeb
 800531e:	d11e      	bne.n	800535e <check_fs+0x9a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005326:	2b90      	cmp	r3, #144	; 0x90
 8005328:	d119      	bne.n	800535e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3338      	adds	r3, #56	; 0x38
 800532e:	3336      	adds	r3, #54	; 0x36
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe f9b5 	bl	80036a0 <ld_dword>
 8005336:	4603      	mov	r3, r0
 8005338:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800533c:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <check_fs+0xa4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <check_fs+0x82>
 8005342:	2300      	movs	r3, #0
 8005344:	e00c      	b.n	8005360 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3338      	adds	r3, #56	; 0x38
 800534a:	3352      	adds	r3, #82	; 0x52
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe f9a7 	bl	80036a0 <ld_dword>
 8005352:	4603      	mov	r3, r0
 8005354:	4a05      	ldr	r2, [pc, #20]	; (800536c <check_fs+0xa8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <check_fs+0x9a>
 800535a:	2300      	movs	r3, #0
 800535c:	e000      	b.n	8005360 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800535e:	2302      	movs	r3, #2
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	00544146 	.word	0x00544146
 800536c:	33544146 	.word	0x33544146

08005370 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b096      	sub	sp, #88	; 0x58
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff ff59 	bl	800523c <get_ldnumber>
 800538a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	da01      	bge.n	8005396 <find_volume+0x26>
 8005392:	230b      	movs	r3, #11
 8005394:	e265      	b.n	8005862 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005396:	4a9f      	ldr	r2, [pc, #636]	; (8005614 <find_volume+0x2a4>)
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <find_volume+0x3a>
 80053a6:	230c      	movs	r3, #12
 80053a8:	e25b      	b.n	8005862 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01a      	beq.n	80053f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe f8b5 	bl	8003534 <disk_status>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80053d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10c      	bne.n	80053f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <find_volume+0x82>
 80053e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80053ee:	230a      	movs	r3, #10
 80053f0:	e237      	b.n	8005862 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80053f2:	2300      	movs	r3, #0
 80053f4:	e235      	b.n	8005862 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80053fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	4618      	mov	r0, r3
 800540a:	f7fe f8ad 	bl	8003568 <disk_initialize>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005420:	2303      	movs	r3, #3
 8005422:	e21e      	b.n	8005862 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <find_volume+0xca>
 800542a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005436:	230a      	movs	r3, #10
 8005438:	e213      	b.n	8005862 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	7858      	ldrb	r0, [r3, #1]
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	330c      	adds	r3, #12
 8005442:	461a      	mov	r2, r3
 8005444:	2102      	movs	r1, #2
 8005446:	f7fe f8f5 	bl	8003634 <disk_ioctl>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <find_volume+0xe4>
 8005450:	2301      	movs	r3, #1
 8005452:	e206      	b.n	8005862 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	899b      	ldrh	r3, [r3, #12]
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d80d      	bhi.n	800547a <find_volume+0x10a>
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	899b      	ldrh	r3, [r3, #12]
 8005462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005466:	d308      	bcc.n	800547a <find_volume+0x10a>
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	899b      	ldrh	r3, [r3, #12]
 800546c:	461a      	mov	r2, r3
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	899b      	ldrh	r3, [r3, #12]
 8005472:	3b01      	subs	r3, #1
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <find_volume+0x10e>
 800547a:	2301      	movs	r3, #1
 800547c:	e1f1      	b.n	8005862 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005482:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005484:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005486:	f7ff ff1d 	bl	80052c4 <check_fs>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005494:	2b02      	cmp	r3, #2
 8005496:	d149      	bne.n	800552c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005498:	2300      	movs	r3, #0
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
 800549c:	e01e      	b.n	80054dc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80054ac:	4413      	add	r3, r2
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	3304      	adds	r3, #4
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <find_volume+0x158>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	3308      	adds	r3, #8
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe f8ee 	bl	80036a0 <ld_dword>
 80054c4:	4602      	mov	r2, r0
 80054c6:	e000      	b.n	80054ca <find_volume+0x15a>
 80054c8:	2200      	movs	r2, #0
 80054ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	3358      	adds	r3, #88	; 0x58
 80054d0:	443b      	add	r3, r7
 80054d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	3301      	adds	r3, #1
 80054da:	643b      	str	r3, [r7, #64]	; 0x40
 80054dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d9dd      	bls.n	800549e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80054e2:	2300      	movs	r3, #0
 80054e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80054e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <find_volume+0x182>
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	3b01      	subs	r3, #1
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80054f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	3358      	adds	r3, #88	; 0x58
 80054f8:	443b      	add	r3, r7
 80054fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80054fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <find_volume+0x1a2>
 8005506:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800550a:	f7ff fedb 	bl	80052c4 <check_fs>
 800550e:	4603      	mov	r3, r0
 8005510:	e000      	b.n	8005514 <find_volume+0x1a4>
 8005512:	2303      	movs	r3, #3
 8005514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800551c:	2b01      	cmp	r3, #1
 800551e:	d905      	bls.n	800552c <find_volume+0x1bc>
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	3301      	adds	r3, #1
 8005524:	643b      	str	r3, [r7, #64]	; 0x40
 8005526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005528:	2b03      	cmp	r3, #3
 800552a:	d9e2      	bls.n	80054f2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800552c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005530:	2b04      	cmp	r3, #4
 8005532:	d101      	bne.n	8005538 <find_volume+0x1c8>
 8005534:	2301      	movs	r3, #1
 8005536:	e194      	b.n	8005862 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800553c:	2b01      	cmp	r3, #1
 800553e:	d901      	bls.n	8005544 <find_volume+0x1d4>
 8005540:	230d      	movs	r3, #13
 8005542:	e18e      	b.n	8005862 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	3338      	adds	r3, #56	; 0x38
 8005548:	330b      	adds	r3, #11
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe f890 	bl	8003670 <ld_word>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	899b      	ldrh	r3, [r3, #12]
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <find_volume+0x1f0>
 800555c:	230d      	movs	r3, #13
 800555e:	e180      	b.n	8005862 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	3338      	adds	r3, #56	; 0x38
 8005564:	3316      	adds	r3, #22
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe f882 	bl	8003670 <ld_word>
 800556c:	4603      	mov	r3, r0
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <find_volume+0x214>
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	3338      	adds	r3, #56	; 0x38
 800557a:	3324      	adds	r3, #36	; 0x24
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe f88f 	bl	80036a0 <ld_dword>
 8005582:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005588:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	789b      	ldrb	r3, [r3, #2]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d005      	beq.n	80055a8 <find_volume+0x238>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	789b      	ldrb	r3, [r3, #2]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d001      	beq.n	80055a8 <find_volume+0x238>
 80055a4:	230d      	movs	r3, #13
 80055a6:	e15c      	b.n	8005862 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	789b      	ldrb	r3, [r3, #2]
 80055ac:	461a      	mov	r2, r3
 80055ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b0:	fb02 f303 	mul.w	r3, r2, r3
 80055b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	895b      	ldrh	r3, [r3, #10]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <find_volume+0x26c>
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	895b      	ldrh	r3, [r3, #10]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	895b      	ldrh	r3, [r3, #10]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <find_volume+0x270>
 80055dc:	230d      	movs	r3, #13
 80055de:	e140      	b.n	8005862 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	3338      	adds	r3, #56	; 0x38
 80055e4:	3311      	adds	r3, #17
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe f842 	bl	8003670 <ld_word>
 80055ec:	4603      	mov	r3, r0
 80055ee:	461a      	mov	r2, r3
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	891b      	ldrh	r3, [r3, #8]
 80055f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fa:	8992      	ldrh	r2, [r2, #12]
 80055fc:	0952      	lsrs	r2, r2, #5
 80055fe:	b292      	uxth	r2, r2
 8005600:	fbb3 f1f2 	udiv	r1, r3, r2
 8005604:	fb01 f202 	mul.w	r2, r1, r2
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <find_volume+0x2a8>
 8005610:	230d      	movs	r3, #13
 8005612:	e126      	b.n	8005862 <find_volume+0x4f2>
 8005614:	2000255c 	.word	0x2000255c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	3338      	adds	r3, #56	; 0x38
 800561c:	3313      	adds	r3, #19
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe f826 	bl	8003670 <ld_word>
 8005624:	4603      	mov	r3, r0
 8005626:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <find_volume+0x2cc>
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	3338      	adds	r3, #56	; 0x38
 8005632:	3320      	adds	r3, #32
 8005634:	4618      	mov	r0, r3
 8005636:	f7fe f833 	bl	80036a0 <ld_dword>
 800563a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	3338      	adds	r3, #56	; 0x38
 8005640:	330e      	adds	r3, #14
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe f814 	bl	8003670 <ld_word>
 8005648:	4603      	mov	r3, r0
 800564a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800564c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <find_volume+0x2e6>
 8005652:	230d      	movs	r3, #13
 8005654:	e105      	b.n	8005862 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005656:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565a:	4413      	add	r3, r2
 800565c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565e:	8911      	ldrh	r1, [r2, #8]
 8005660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005662:	8992      	ldrh	r2, [r2, #12]
 8005664:	0952      	lsrs	r2, r2, #5
 8005666:	b292      	uxth	r2, r2
 8005668:	fbb1 f2f2 	udiv	r2, r1, r2
 800566c:	b292      	uxth	r2, r2
 800566e:	4413      	add	r3, r2
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	429a      	cmp	r2, r3
 8005678:	d201      	bcs.n	800567e <find_volume+0x30e>
 800567a:	230d      	movs	r3, #13
 800567c:	e0f1      	b.n	8005862 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800567e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005686:	8952      	ldrh	r2, [r2, #10]
 8005688:	fbb3 f3f2 	udiv	r3, r3, r2
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <find_volume+0x328>
 8005694:	230d      	movs	r3, #13
 8005696:	e0e4      	b.n	8005862 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005698:	2303      	movs	r3, #3
 800569a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d802      	bhi.n	80056ae <find_volume+0x33e>
 80056a8:	2302      	movs	r3, #2
 80056aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d802      	bhi.n	80056be <find_volume+0x34e>
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056ca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d0:	441a      	add	r2, r3
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80056d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	441a      	add	r2, r3
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80056e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d11e      	bne.n	8005726 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	3338      	adds	r3, #56	; 0x38
 80056ec:	332a      	adds	r3, #42	; 0x2a
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fd ffbe 	bl	8003670 <ld_word>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <find_volume+0x38e>
 80056fa:	230d      	movs	r3, #13
 80056fc:	e0b1      	b.n	8005862 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	891b      	ldrh	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <find_volume+0x39a>
 8005706:	230d      	movs	r3, #13
 8005708:	e0ab      	b.n	8005862 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	3338      	adds	r3, #56	; 0x38
 800570e:	332c      	adds	r3, #44	; 0x2c
 8005710:	4618      	mov	r0, r3
 8005712:	f7fd ffc5 	bl	80036a0 <ld_dword>
 8005716:	4602      	mov	r2, r0
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	647b      	str	r3, [r7, #68]	; 0x44
 8005724:	e01f      	b.n	8005766 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	891b      	ldrh	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <find_volume+0x3c2>
 800572e:	230d      	movs	r3, #13
 8005730:	e097      	b.n	8005862 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005738:	441a      	add	r2, r3
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800573e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005742:	2b02      	cmp	r3, #2
 8005744:	d103      	bne.n	800574e <find_volume+0x3de>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	e00a      	b.n	8005764 <find_volume+0x3f4>
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	4613      	mov	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4413      	add	r3, r2
 8005758:	085a      	lsrs	r2, r3, #1
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005764:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	899b      	ldrh	r3, [r3, #12]
 800576e:	4619      	mov	r1, r3
 8005770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005772:	440b      	add	r3, r1
 8005774:	3b01      	subs	r3, #1
 8005776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005778:	8989      	ldrh	r1, [r1, #12]
 800577a:	fbb3 f3f1 	udiv	r3, r3, r1
 800577e:	429a      	cmp	r2, r3
 8005780:	d201      	bcs.n	8005786 <find_volume+0x416>
 8005782:	230d      	movs	r3, #13
 8005784:	e06d      	b.n	8005862 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	619a      	str	r2, [r3, #24]
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800579c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d149      	bne.n	8005838 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	3338      	adds	r3, #56	; 0x38
 80057a8:	3330      	adds	r3, #48	; 0x30
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd ff60 	bl	8003670 <ld_word>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d140      	bne.n	8005838 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80057b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b8:	3301      	adds	r3, #1
 80057ba:	4619      	mov	r1, r3
 80057bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057be:	f7fe fa07 	bl	8003bd0 <move_window>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d137      	bne.n	8005838 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	2200      	movs	r2, #0
 80057cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	3338      	adds	r3, #56	; 0x38
 80057d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd ff4a 	bl	8003670 <ld_word>
 80057dc:	4603      	mov	r3, r0
 80057de:	461a      	mov	r2, r3
 80057e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d127      	bne.n	8005838 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	3338      	adds	r3, #56	; 0x38
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fd ff57 	bl	80036a0 <ld_dword>
 80057f2:	4603      	mov	r3, r0
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <find_volume+0x4fc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d11e      	bne.n	8005838 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	3338      	adds	r3, #56	; 0x38
 80057fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005802:	4618      	mov	r0, r3
 8005804:	f7fd ff4c 	bl	80036a0 <ld_dword>
 8005808:	4603      	mov	r3, r0
 800580a:	4a19      	ldr	r2, [pc, #100]	; (8005870 <find_volume+0x500>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d113      	bne.n	8005838 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	3338      	adds	r3, #56	; 0x38
 8005814:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd ff41 	bl	80036a0 <ld_dword>
 800581e:	4602      	mov	r2, r0
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	3338      	adds	r3, #56	; 0x38
 8005828:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800582c:	4618      	mov	r0, r3
 800582e:	f7fd ff37 	bl	80036a0 <ld_dword>
 8005832:	4602      	mov	r2, r0
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800583e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005840:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <find_volume+0x504>)
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <find_volume+0x504>)
 800584a:	801a      	strh	r2, [r3, #0]
 800584c:	4b09      	ldr	r3, [pc, #36]	; (8005874 <find_volume+0x504>)
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <find_volume+0x508>)
 8005858:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800585a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800585c:	f7fe f950 	bl	8003b00 <clear_lock>
#endif
	return FR_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3758      	adds	r7, #88	; 0x58
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	41615252 	.word	0x41615252
 8005870:	61417272 	.word	0x61417272
 8005874:	20002560 	.word	0x20002560
 8005878:	20002584 	.word	0x20002584

0800587c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005886:	2309      	movs	r3, #9
 8005888:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01c      	beq.n	80058ca <validate+0x4e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d018      	beq.n	80058ca <validate+0x4e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d013      	beq.n	80058ca <validate+0x4e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	889a      	ldrh	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	88db      	ldrh	r3, [r3, #6]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d10c      	bne.n	80058ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fd fe3c 	bl	8003534 <disk_status>
 80058bc:	4603      	mov	r3, r0
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <validate+0x4e>
			res = FR_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <validate+0x5a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	e000      	b.n	80058d8 <validate+0x5c>
 80058d6:	2300      	movs	r3, #0
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	6013      	str	r3, [r2, #0]
	return res;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80058fa:	f107 0310 	add.w	r3, r7, #16
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fc9c 	bl	800523c <get_ldnumber>
 8005904:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	da01      	bge.n	8005910 <f_mount+0x28>
 800590c:	230b      	movs	r3, #11
 800590e:	e02b      	b.n	8005968 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005910:	4a17      	ldr	r2, [pc, #92]	; (8005970 <f_mount+0x88>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005918:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005920:	69b8      	ldr	r0, [r7, #24]
 8005922:	f7fe f8ed 	bl	8003b00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	490d      	ldr	r1, [pc, #52]	; (8005970 <f_mount+0x88>)
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <f_mount+0x66>
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <f_mount+0x6a>
 800594e:	2300      	movs	r3, #0
 8005950:	e00a      	b.n	8005968 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005952:	f107 010c 	add.w	r1, r7, #12
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	2200      	movs	r2, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fd07 	bl	8005370 <find_volume>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005966:	7dfb      	ldrb	r3, [r7, #23]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3720      	adds	r7, #32
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	2000255c 	.word	0x2000255c

08005974 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b09a      	sub	sp, #104	; 0x68
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <f_open+0x18>
 8005988:	2309      	movs	r3, #9
 800598a:	e1bb      	b.n	8005d04 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005992:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005994:	79fa      	ldrb	r2, [r7, #7]
 8005996:	f107 0114 	add.w	r1, r7, #20
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fce6 	bl	8005370 <find_volume>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80059aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f040 819f 	bne.w	8005cf2 <f_open+0x37e>
		dj.obj.fs = fs;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	f107 0318 	add.w	r3, r7, #24
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fbc5 	bl	8005150 <follow_path>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80059cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11a      	bne.n	8005a0a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80059d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059d8:	b25b      	sxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da03      	bge.n	80059e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80059de:	2306      	movs	r3, #6
 80059e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80059e4:	e011      	b.n	8005a0a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	f107 0318 	add.w	r3, r7, #24
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fd ff36 	bl	8003870 <chk_lock>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	f003 031c 	and.w	r3, r3, #28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d07f      	beq.n	8005b14 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005a14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d017      	beq.n	8005a4c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005a1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d10e      	bne.n	8005a42 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005a24:	f7fd ff80 	bl	8003928 <enq_lock>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <f_open+0xc8>
 8005a2e:	f107 0318 	add.w	r3, r7, #24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff f8dc 	bl	8004bf0 <dir_register>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	e000      	b.n	8005a3e <f_open+0xca>
 8005a3c:	2312      	movs	r3, #18
 8005a3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	f043 0308 	orr.w	r3, r3, #8
 8005a48:	71fb      	strb	r3, [r7, #7]
 8005a4a:	e010      	b.n	8005a6e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005a4c:	7fbb      	ldrb	r3, [r7, #30]
 8005a4e:	f003 0311 	and.w	r3, r3, #17
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <f_open+0xea>
					res = FR_DENIED;
 8005a56:	2307      	movs	r3, #7
 8005a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005a5c:	e007      	b.n	8005a6e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <f_open+0xfa>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d168      	bne.n	8005b48 <f_open+0x1d4>
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d063      	beq.n	8005b48 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005a80:	f7fd fcf6 	bl	8003470 <get_fattime>
 8005a84:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	330e      	adds	r3, #14
 8005a8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd fe45 	bl	800371c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	3316      	adds	r3, #22
 8005a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fd fe3f 	bl	800371c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	330b      	adds	r3, #11
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fe17 	bl	80046e0 <ld_clust>
 8005ab2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fe2f 	bl	800471e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	331c      	adds	r3, #28
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fd fe28 	bl	800371c <st_dword>
					fs->wflag = 1;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d037      	beq.n	8005b48 <f_open+0x1d4>
						dw = fs->winsect;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005ade:	f107 0318 	add.w	r3, r7, #24
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fb1f 	bl	800412a <remove_chain>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8005af2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d126      	bne.n	8005b48 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe f866 	bl	8003bd0 <move_window>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b0e:	3a01      	subs	r2, #1
 8005b10:	615a      	str	r2, [r3, #20]
 8005b12:	e019      	b.n	8005b48 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005b14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d115      	bne.n	8005b48 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005b1c:	7fbb      	ldrb	r3, [r7, #30]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005b26:	2304      	movs	r3, #4
 8005b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005b2c:	e00c      	b.n	8005b48 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <f_open+0x1d4>
 8005b38:	7fbb      	ldrb	r3, [r7, #30]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <f_open+0x1d4>
						res = FR_DENIED;
 8005b42:	2307      	movs	r3, #7
 8005b44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005b48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d128      	bne.n	8005ba2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b60:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bf14      	ite	ne
 8005b7a:	2301      	movne	r3, #1
 8005b7c:	2300      	moveq	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	f107 0318 	add.w	r3, r7, #24
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd feef 	bl	800396c <inc_lock>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <f_open+0x22e>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005ba2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 80a3 	bne.w	8005cf2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fd94 	bl	80046e0 <ld_clust>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	331c      	adds	r3, #28
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fd fd6c 	bl	80036a0 <ld_dword>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	88da      	ldrh	r2, [r3, #6]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	79fa      	ldrb	r2, [r7, #7]
 8005be6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3330      	adds	r3, #48	; 0x30
 8005bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fd fdd6 	bl	80037b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d06e      	beq.n	8005cf2 <f_open+0x37e>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d06a      	beq.n	8005cf2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	895b      	ldrh	r3, [r3, #10]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	899b      	ldrh	r3, [r3, #12]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c40:	e016      	b.n	8005c70 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe f87f 	bl	8003d4a <get_fat>
 8005c4c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d802      	bhi.n	8005c5a <f_open+0x2e6>
 8005c54:	2302      	movs	r3, #2
 8005c56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d102      	bne.n	8005c68 <f_open+0x2f4>
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <f_open+0x30c>
 8005c78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d8e0      	bhi.n	8005c42 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005c86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d131      	bne.n	8005cf2 <f_open+0x37e>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	899b      	ldrh	r3, [r3, #12]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c9a:	fb01 f202 	mul.w	r2, r1, r2
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d026      	beq.n	8005cf2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe f82f 	bl	8003d0c <clust2sect>
 8005cae:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <f_open+0x34a>
						res = FR_INT_ERR;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005cbc:	e019      	b.n	8005cf2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	899b      	ldrh	r3, [r3, #12]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ccc:	441a      	add	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	7858      	ldrb	r0, [r3, #1]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f7fd fc67 	bl	80035b4 <disk_read>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <f_open+0x37e>
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <f_open+0x38c>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005d00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3768      	adds	r7, #104	; 0x68
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f107 0214 	add.w	r2, r7, #20
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fda5 	bl	800587c <validate>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <f_read+0x44>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	7d5b      	ldrb	r3, [r3, #21]
 8005d44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <f_read+0x4a>
 8005d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d54:	e135      	b.n	8005fc2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7d1b      	ldrb	r3, [r3, #20]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <f_read+0x5a>
 8005d62:	2307      	movs	r3, #7
 8005d64:	e12d      	b.n	8005fc2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	f240 811e 	bls.w	8005fb8 <f_read+0x2ac>
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005d80:	e11a      	b.n	8005fb8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	8992      	ldrh	r2, [r2, #12]
 8005d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d8e:	fb01 f202 	mul.w	r2, r1, r2
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f040 80d5 	bne.w	8005f44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	8992      	ldrh	r2, [r2, #12]
 8005da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	8952      	ldrh	r2, [r2, #10]
 8005daa:	3a01      	subs	r2, #1
 8005dac:	4013      	ands	r3, r2
 8005dae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d12f      	bne.n	8005e16 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d103      	bne.n	8005dc6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc4:	e013      	b.n	8005dee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7fe faa5 	bl	8004324 <clmt_clust>
 8005dda:	6338      	str	r0, [r7, #48]	; 0x30
 8005ddc:	e007      	b.n	8005dee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fd ffaf 	bl	8003d4a <get_fat>
 8005dec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d804      	bhi.n	8005dfe <f_read+0xf2>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2202      	movs	r2, #2
 8005df8:	755a      	strb	r2, [r3, #21]
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e0e1      	b.n	8005fc2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d104      	bne.n	8005e10 <f_read+0x104>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	755a      	strb	r2, [r3, #21]
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0d8      	b.n	8005fc2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f7fd ff74 	bl	8003d0c <clust2sect>
 8005e24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <f_read+0x12a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	755a      	strb	r2, [r3, #21]
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0c5      	b.n	8005fc2 <f_read+0x2b6>
			sect += csect;
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	899b      	ldrh	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d041      	beq.n	8005ed6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	4413      	add	r3, r2
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	8952      	ldrh	r2, [r2, #10]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d905      	bls.n	8005e6c <f_read+0x160>
					cc = fs->csize - csect;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	895b      	ldrh	r3, [r3, #10]
 8005e64:	461a      	mov	r2, r3
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	7858      	ldrb	r0, [r3, #1]
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e76:	f7fd fb9d 	bl	80035b4 <disk_read>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <f_read+0x17e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	755a      	strb	r2, [r3, #21]
 8005e86:	2301      	movs	r3, #1
 8005e88:	e09b      	b.n	8005fc2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	7d1b      	ldrb	r3, [r3, #20]
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da18      	bge.n	8005ec6 <f_read+0x1ba>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d911      	bls.n	8005ec6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	8992      	ldrh	r2, [r2, #12]
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	18d0      	adds	r0, r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	899b      	ldrh	r3, [r3, #12]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f7fd fc57 	bl	8003774 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	899b      	ldrh	r3, [r3, #12]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005ed4:	e05c      	b.n	8005f90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d02e      	beq.n	8005f3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	7d1b      	ldrb	r3, [r3, #20]
 8005ee4:	b25b      	sxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da18      	bge.n	8005f1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	7858      	ldrb	r0, [r3, #1]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f7fd fb7b 	bl	80035f4 <disk_write>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <f_read+0x202>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	755a      	strb	r2, [r3, #21]
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e059      	b.n	8005fc2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	7d1b      	ldrb	r3, [r3, #20]
 8005f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	7858      	ldrb	r0, [r3, #1]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f26:	2301      	movs	r3, #1
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	f7fd fb43 	bl	80035b4 <disk_read>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <f_read+0x232>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	755a      	strb	r2, [r3, #21]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e041      	b.n	8005fc2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	899b      	ldrh	r3, [r3, #12]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	8992      	ldrh	r2, [r2, #12]
 8005f52:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f56:	fb01 f202 	mul.w	r2, r1, r2
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	1ac3      	subs	r3, r0, r3
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d901      	bls.n	8005f6c <f_read+0x260>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	8992      	ldrh	r2, [r2, #12]
 8005f7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f7e:	fb00 f202 	mul.w	r2, r0, r2
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	440b      	add	r3, r1
 8005f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f8c:	f7fd fbf2 	bl	8003774 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	4413      	add	r3, r2
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	619a      	str	r2, [r3, #24]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	441a      	add	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f47f aee1 	bne.w	8005d82 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3738      	adds	r7, #56	; 0x38
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b08c      	sub	sp, #48	; 0x30
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f107 0210 	add.w	r2, r7, #16
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fc46 	bl	800587c <validate>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <f_write+0x44>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	7d5b      	ldrb	r3, [r3, #21]
 8006002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <f_write+0x4a>
 800600e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006012:	e16a      	b.n	80062ea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	7d1b      	ldrb	r3, [r3, #20]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <f_write+0x5a>
 8006020:	2307      	movs	r3, #7
 8006022:	e162      	b.n	80062ea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	441a      	add	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	f080 814c 	bcs.w	80062ce <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	43db      	mvns	r3, r3
 800603c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800603e:	e146      	b.n	80062ce <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	8992      	ldrh	r2, [r2, #12]
 8006048:	fbb3 f1f2 	udiv	r1, r3, r2
 800604c:	fb01 f202 	mul.w	r2, r1, r2
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 80f1 	bne.w	800623a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	8992      	ldrh	r2, [r2, #12]
 8006060:	fbb3 f3f2 	udiv	r3, r3, r2
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	8952      	ldrh	r2, [r2, #10]
 8006068:	3a01      	subs	r2, #1
 800606a:	4013      	ands	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d143      	bne.n	80060fc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10c      	bne.n	8006096 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11a      	bne.n	80060be <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2100      	movs	r1, #0
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe f8b1 	bl	80041f4 <create_chain>
 8006092:	62b8      	str	r0, [r7, #40]	; 0x28
 8006094:	e013      	b.n	80060be <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	4619      	mov	r1, r3
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7fe f93d 	bl	8004324 <clmt_clust>
 80060aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80060ac:	e007      	b.n	80060be <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f7fe f89c 	bl	80041f4 <create_chain>
 80060bc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8109 	beq.w	80062d8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d104      	bne.n	80060d6 <f_write+0x10c>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2202      	movs	r2, #2
 80060d0:	755a      	strb	r2, [r3, #21]
 80060d2:	2302      	movs	r3, #2
 80060d4:	e109      	b.n	80062ea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d104      	bne.n	80060e8 <f_write+0x11e>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	755a      	strb	r2, [r3, #21]
 80060e4:	2301      	movs	r3, #1
 80060e6:	e100      	b.n	80062ea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <f_write+0x132>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	7d1b      	ldrb	r3, [r3, #20]
 8006100:	b25b      	sxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	da18      	bge.n	8006138 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	7858      	ldrb	r0, [r3, #1]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	2301      	movs	r3, #1
 8006116:	f7fd fa6d 	bl	80035f4 <disk_write>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <f_write+0x160>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	755a      	strb	r2, [r3, #21]
 8006126:	2301      	movs	r3, #1
 8006128:	e0df      	b.n	80062ea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	7d1b      	ldrb	r3, [r3, #20]
 800612e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fd fde3 	bl	8003d0c <clust2sect>
 8006146:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <f_write+0x18e>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2202      	movs	r2, #2
 8006152:	755a      	strb	r2, [r3, #21]
 8006154:	2302      	movs	r3, #2
 8006156:	e0c8      	b.n	80062ea <f_write+0x320>
			sect += csect;
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	4413      	add	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	899b      	ldrh	r3, [r3, #12]
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	fbb3 f3f2 	udiv	r3, r3, r2
 800616c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d043      	beq.n	80061fc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	4413      	add	r3, r2
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	8952      	ldrh	r2, [r2, #10]
 800617e:	4293      	cmp	r3, r2
 8006180:	d905      	bls.n	800618e <f_write+0x1c4>
					cc = fs->csize - csect;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	895b      	ldrh	r3, [r3, #10]
 8006186:	461a      	mov	r2, r3
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	7858      	ldrb	r0, [r3, #1]
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	69f9      	ldr	r1, [r7, #28]
 8006198:	f7fd fa2c 	bl	80035f4 <disk_write>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <f_write+0x1e2>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	755a      	strb	r2, [r3, #21]
 80061a8:	2301      	movs	r3, #1
 80061aa:	e09e      	b.n	80062ea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d918      	bls.n	80061ec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	8992      	ldrh	r2, [r2, #12]
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	18d1      	adds	r1, r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	899b      	ldrh	r3, [r3, #12]
 80061d8:	461a      	mov	r2, r3
 80061da:	f7fd facb 	bl	8003774 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	7d1b      	ldrb	r3, [r3, #20]
 80061e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	899b      	ldrh	r3, [r3, #12]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80061fa:	e04b      	b.n	8006294 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	429a      	cmp	r2, r3
 8006204:	d016      	beq.n	8006234 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800620e:	429a      	cmp	r2, r3
 8006210:	d210      	bcs.n	8006234 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	7858      	ldrb	r0, [r3, #1]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800621c:	2301      	movs	r3, #1
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	f7fd f9c8 	bl	80035b4 <disk_read>
 8006224:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	755a      	strb	r2, [r3, #21]
 8006230:	2301      	movs	r3, #1
 8006232:	e05a      	b.n	80062ea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	899b      	ldrh	r3, [r3, #12]
 800623e:	4618      	mov	r0, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	8992      	ldrh	r2, [r2, #12]
 8006248:	fbb3 f1f2 	udiv	r1, r3, r2
 800624c:	fb01 f202 	mul.w	r2, r1, r2
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	1ac3      	subs	r3, r0, r3
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d901      	bls.n	8006262 <f_write+0x298>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	8992      	ldrh	r2, [r2, #12]
 8006270:	fbb3 f0f2 	udiv	r0, r3, r2
 8006274:	fb00 f202 	mul.w	r2, r0, r2
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	440b      	add	r3, r1
 800627c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627e:	69f9      	ldr	r1, [r7, #28]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fd fa77 	bl	8003774 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	7d1b      	ldrb	r3, [r3, #20]
 800628a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	4413      	add	r3, r2
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	441a      	add	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	619a      	str	r2, [r3, #24]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	bf38      	it	cc
 80062b4:	461a      	movcc	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60da      	str	r2, [r3, #12]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	441a      	add	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f47f aeb5 	bne.w	8006040 <f_write+0x76>
 80062d6:	e000      	b.n	80062da <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80062d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	7d1b      	ldrb	r3, [r3, #20]
 80062de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3730      	adds	r7, #48	; 0x30
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f107 0208 	add.w	r2, r7, #8
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff faba 	bl	800587c <validate>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d168      	bne.n	80063e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	7d1b      	ldrb	r3, [r3, #20]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d062      	beq.n	80063e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7d1b      	ldrb	r3, [r3, #20]
 8006322:	b25b      	sxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	da15      	bge.n	8006354 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	7858      	ldrb	r0, [r3, #1]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	2301      	movs	r3, #1
 8006338:	f7fd f95c 	bl	80035f4 <disk_write>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <f_sync+0x54>
 8006342:	2301      	movs	r3, #1
 8006344:	e04f      	b.n	80063e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7d1b      	ldrb	r3, [r3, #20]
 800634a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634e:	b2da      	uxtb	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006354:	f7fd f88c 	bl	8003470 <get_fattime>
 8006358:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f7fd fc34 	bl	8003bd0 <move_window>
 8006368:	4603      	mov	r3, r0
 800636a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d138      	bne.n	80063e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	330b      	adds	r3, #11
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	330b      	adds	r3, #11
 8006382:	f042 0220 	orr.w	r2, r2, #32
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	461a      	mov	r2, r3
 8006394:	68f9      	ldr	r1, [r7, #12]
 8006396:	f7fe f9c2 	bl	800471e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f103 021c 	add.w	r2, r3, #28
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f7fd f9b8 	bl	800371c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3316      	adds	r3, #22
 80063b0:	6939      	ldr	r1, [r7, #16]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fd f9b2 	bl	800371c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3312      	adds	r3, #18
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fd f991 	bl	80036e6 <st_word>
					fs->wflag = 1;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2201      	movs	r2, #1
 80063c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fd fc2d 	bl	8003c2c <sync_fs>
 80063d2:	4603      	mov	r3, r0
 80063d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7d1b      	ldrb	r3, [r3, #20]
 80063da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff ff7b 	bl	80062f2 <f_sync>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d118      	bne.n	8006438 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f107 0208 	add.w	r2, r7, #8
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fa34 	bl	800587c <validate>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10c      	bne.n	8006438 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fd fb30 	bl	8003a88 <dec_lock>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b088      	sub	sp, #32
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006456:	e01b      	b.n	8006490 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006458:	f107 0310 	add.w	r3, r7, #16
 800645c:	f107 0114 	add.w	r1, r7, #20
 8006460:	2201      	movs	r2, #1
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fc52 	bl	8005d0c <f_read>
		if (rc != 1) break;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d116      	bne.n	800649c <f_gets+0x5a>
		c = s[0];
 800646e:	7d3b      	ldrb	r3, [r7, #20]
 8006470:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	2b0d      	cmp	r3, #13
 8006476:	d100      	bne.n	800647a <f_gets+0x38>
 8006478:	e00a      	b.n	8006490 <f_gets+0x4e>
		*p++ = c;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	61ba      	str	r2, [r7, #24]
 8006480:	7dfa      	ldrb	r2, [r7, #23]
 8006482:	701a      	strb	r2, [r3, #0]
		n++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	2b0a      	cmp	r3, #10
 800648e:	d007      	beq.n	80064a0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	429a      	cmp	r2, r3
 8006498:	dbde      	blt.n	8006458 <f_gets+0x16>
 800649a:	e002      	b.n	80064a2 <f_gets+0x60>
		if (rc != 1) break;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80064a0:	bf00      	nop
	}
	*p = 0;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <f_gets+0x70>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	e000      	b.n	80064b4 <f_gets+0x72>
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	2b0a      	cmp	r3, #10
 80064cc:	d103      	bne.n	80064d6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80064ce:	210d      	movs	r1, #13
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fff3 	bl	80064bc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	db25      	blt.n	800652e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	60fa      	str	r2, [r7, #12]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b3c      	cmp	r3, #60	; 0x3c
 80064f4:	dd12      	ble.n	800651c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f103 010c 	add.w	r1, r3, #12
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	f107 0308 	add.w	r3, r7, #8
 8006506:	f7ff fd60 	bl	8005fca <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d101      	bne.n	8006516 <putc_bfd+0x5a>
 8006512:	2300      	movs	r3, #0
 8006514:	e001      	b.n	800651a <putc_bfd+0x5e>
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	e000      	b.n	8006530 <putc_bfd+0x74>
	if (i < 0) return;
 800652e:	bf00      	nop
}
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db16      	blt.n	8006574 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f103 010c 	add.w	r1, r3, #12
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	461a      	mov	r2, r3
 8006556:	f107 030c 	add.w	r3, r7, #12
 800655a:	f7ff fd36 	bl	8005fca <f_write>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d107      	bne.n	8006574 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4293      	cmp	r3, r2
 800656c:	d102      	bne.n	8006574 <putc_flush+0x3e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	e001      	b.n	8006578 <putc_flush+0x42>
	return EOF;
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	609a      	str	r2, [r3, #8]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b096      	sub	sp, #88	; 0x58
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80065b4:	f107 030c 	add.w	r3, r7, #12
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ffe0 	bl	8006580 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80065c0:	e009      	b.n	80065d6 <f_puts+0x2c>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	f107 030c 	add.w	r3, r7, #12
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff ff73 	bl	80064bc <putc_bfd>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f1      	bne.n	80065c2 <f_puts+0x18>
	return putc_flush(&pb);
 80065de:	f107 030c 	add.w	r3, r7, #12
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff ffa7 	bl	8006536 <putc_flush>
 80065e8:	4603      	mov	r3, r0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3758      	adds	r7, #88	; 0x58
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800660a:	4b1f      	ldr	r3, [pc, #124]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 800660c:	7a5b      	ldrb	r3, [r3, #9]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d131      	bne.n	8006678 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006614:	4b1c      	ldr	r3, [pc, #112]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 8006616:	7a5b      	ldrb	r3, [r3, #9]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 800661e:	2100      	movs	r1, #0
 8006620:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 8006624:	7a5b      	ldrb	r3, [r3, #9]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	4a17      	ldr	r2, [pc, #92]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 8006634:	7a5b      	ldrb	r3, [r3, #9]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	4b13      	ldr	r3, [pc, #76]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 800663c:	4413      	add	r3, r2
 800663e:	79fa      	ldrb	r2, [r7, #7]
 8006640:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 8006644:	7a5b      	ldrb	r3, [r3, #9]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	b2d1      	uxtb	r1, r2
 800664c:	4a0e      	ldr	r2, [pc, #56]	; (8006688 <FATFS_LinkDriverEx+0x94>)
 800664e:	7251      	strb	r1, [r2, #9]
 8006650:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006652:	7dbb      	ldrb	r3, [r7, #22]
 8006654:	3330      	adds	r3, #48	; 0x30
 8006656:	b2da      	uxtb	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	3301      	adds	r3, #1
 8006660:	223a      	movs	r2, #58	; 0x3a
 8006662:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3302      	adds	r3, #2
 8006668:	222f      	movs	r2, #47	; 0x2f
 800666a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	3303      	adds	r3, #3
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
}
 800667a:	4618      	mov	r0, r3
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20002784 	.word	0x20002784

0800668c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006696:	2200      	movs	r2, #0
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff ffaa 	bl	80065f4 <FATFS_LinkDriverEx>
 80066a0:	4603      	mov	r3, r0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	6039      	str	r1, [r7, #0]
 80066b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	2b7f      	cmp	r3, #127	; 0x7f
 80066bc:	d802      	bhi.n	80066c4 <ff_convert+0x18>
		c = chr;
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	81fb      	strh	r3, [r7, #14]
 80066c2:	e025      	b.n	8006710 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00b      	beq.n	80066e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	2bff      	cmp	r3, #255	; 0xff
 80066ce:	d805      	bhi.n	80066dc <ff_convert+0x30>
 80066d0:	88fb      	ldrh	r3, [r7, #6]
 80066d2:	3b80      	subs	r3, #128	; 0x80
 80066d4:	4a12      	ldr	r2, [pc, #72]	; (8006720 <ff_convert+0x74>)
 80066d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066da:	e000      	b.n	80066de <ff_convert+0x32>
 80066dc:	2300      	movs	r3, #0
 80066de:	81fb      	strh	r3, [r7, #14]
 80066e0:	e016      	b.n	8006710 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80066e2:	2300      	movs	r3, #0
 80066e4:	81fb      	strh	r3, [r7, #14]
 80066e6:	e009      	b.n	80066fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80066e8:	89fb      	ldrh	r3, [r7, #14]
 80066ea:	4a0d      	ldr	r2, [pc, #52]	; (8006720 <ff_convert+0x74>)
 80066ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f0:	88fa      	ldrh	r2, [r7, #6]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d006      	beq.n	8006704 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80066f6:	89fb      	ldrh	r3, [r7, #14]
 80066f8:	3301      	adds	r3, #1
 80066fa:	81fb      	strh	r3, [r7, #14]
 80066fc:	89fb      	ldrh	r3, [r7, #14]
 80066fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006700:	d9f2      	bls.n	80066e8 <ff_convert+0x3c>
 8006702:	e000      	b.n	8006706 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006704:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	3380      	adds	r3, #128	; 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	b2db      	uxtb	r3, r3
 800670e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006710:	89fb      	ldrh	r3, [r7, #14]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	08006ad4 	.word	0x08006ad4

08006724 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	d201      	bcs.n	800673a <ff_wtoupper+0x16>
 8006736:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <ff_wtoupper+0x10c>)
 8006738:	e000      	b.n	800673c <ff_wtoupper+0x18>
 800673a:	4b3e      	ldr	r3, [pc, #248]	; (8006834 <ff_wtoupper+0x110>)
 800673c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1c9a      	adds	r2, r3, #2
 8006742:	617a      	str	r2, [r7, #20]
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006748:	8a7b      	ldrh	r3, [r7, #18]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d068      	beq.n	8006820 <ff_wtoupper+0xfc>
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	8a7b      	ldrh	r3, [r7, #18]
 8006752:	429a      	cmp	r2, r3
 8006754:	d364      	bcc.n	8006820 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	1c9a      	adds	r2, r3, #2
 800675a:	617a      	str	r2, [r7, #20]
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	823b      	strh	r3, [r7, #16]
 8006760:	8a3b      	ldrh	r3, [r7, #16]
 8006762:	0a1b      	lsrs	r3, r3, #8
 8006764:	81fb      	strh	r3, [r7, #14]
 8006766:	8a3b      	ldrh	r3, [r7, #16]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	8a79      	ldrh	r1, [r7, #18]
 8006770:	8a3b      	ldrh	r3, [r7, #16]
 8006772:	440b      	add	r3, r1
 8006774:	429a      	cmp	r2, r3
 8006776:	da49      	bge.n	800680c <ff_wtoupper+0xe8>
			switch (cmd) {
 8006778:	89fb      	ldrh	r3, [r7, #14]
 800677a:	2b08      	cmp	r3, #8
 800677c:	d84f      	bhi.n	800681e <ff_wtoupper+0xfa>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <ff_wtoupper+0x60>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067d1 	.word	0x080067d1
 8006790:	080067d9 	.word	0x080067d9
 8006794:	080067e1 	.word	0x080067e1
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067f1 	.word	0x080067f1
 80067a0:	080067f9 	.word	0x080067f9
 80067a4:	08006801 	.word	0x08006801
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80067a8:	88fa      	ldrh	r2, [r7, #6]
 80067aa:	8a7b      	ldrh	r3, [r7, #18]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	80fb      	strh	r3, [r7, #6]
 80067b8:	e027      	b.n	800680a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	8a7b      	ldrh	r3, [r7, #18]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	80fb      	strh	r3, [r7, #6]
 80067ce:	e01c      	b.n	800680a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	3b10      	subs	r3, #16
 80067d4:	80fb      	strh	r3, [r7, #6]
 80067d6:	e018      	b.n	800680a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	3b20      	subs	r3, #32
 80067dc:	80fb      	strh	r3, [r7, #6]
 80067de:	e014      	b.n	800680a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	3b30      	subs	r3, #48	; 0x30
 80067e4:	80fb      	strh	r3, [r7, #6]
 80067e6:	e010      	b.n	800680a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	3b1a      	subs	r3, #26
 80067ec:	80fb      	strh	r3, [r7, #6]
 80067ee:	e00c      	b.n	800680a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	3308      	adds	r3, #8
 80067f4:	80fb      	strh	r3, [r7, #6]
 80067f6:	e008      	b.n	800680a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80067f8:	88fb      	ldrh	r3, [r7, #6]
 80067fa:	3b50      	subs	r3, #80	; 0x50
 80067fc:	80fb      	strh	r3, [r7, #6]
 80067fe:	e004      	b.n	800680a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006806:	80fb      	strh	r3, [r7, #6]
 8006808:	bf00      	nop
			}
			break;
 800680a:	e008      	b.n	800681e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800680c:	89fb      	ldrh	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d195      	bne.n	800673e <ff_wtoupper+0x1a>
 8006812:	8a3b      	ldrh	r3, [r7, #16]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800681c:	e78f      	b.n	800673e <ff_wtoupper+0x1a>
			break;
 800681e:	bf00      	nop
	}

	return chr;
 8006820:	88fb      	ldrh	r3, [r7, #6]
}
 8006822:	4618      	mov	r0, r3
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	08006bd4 	.word	0x08006bd4
 8006834:	08006dc8 	.word	0x08006dc8

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4d0d      	ldr	r5, [pc, #52]	; (8006870 <__libc_init_array+0x38>)
 800683c:	4c0d      	ldr	r4, [pc, #52]	; (8006874 <__libc_init_array+0x3c>)
 800683e:	1b64      	subs	r4, r4, r5
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	2600      	movs	r6, #0
 8006844:	42a6      	cmp	r6, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	4d0b      	ldr	r5, [pc, #44]	; (8006878 <__libc_init_array+0x40>)
 800684a:	4c0c      	ldr	r4, [pc, #48]	; (800687c <__libc_init_array+0x44>)
 800684c:	f000 f820 	bl	8006890 <_init>
 8006850:	1b64      	subs	r4, r4, r5
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	2600      	movs	r6, #0
 8006856:	42a6      	cmp	r6, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006860:	4798      	blx	r3
 8006862:	3601      	adds	r6, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f855 3b04 	ldr.w	r3, [r5], #4
 800686a:	4798      	blx	r3
 800686c:	3601      	adds	r6, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	08006e8c 	.word	0x08006e8c
 8006874:	08006e8c 	.word	0x08006e8c
 8006878:	08006e8c 	.word	0x08006e8c
 800687c:	08006e90 	.word	0x08006e90

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	bf00      	nop
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
